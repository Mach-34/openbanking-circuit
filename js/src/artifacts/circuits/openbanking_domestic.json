{
  "noir_version": "1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02",
  "hash": 2731842713675861176,
  "abi": {
    "parameters": [
      {
        "name": "params",
        "type": {
          "kind": "struct",
          "path": "openbanking_verifier::io::OpenbankingVerifierParams",
          "fields": [
            {
              "name": "signature_limbs",
              "type": {
                "kind": "array",
                "length": 18,
                "type": { "kind": "field" }
              }
            },
            {
              "name": "modulus_limbs",
              "type": {
                "kind": "array",
                "length": 18,
                "type": { "kind": "field" }
              }
            },
            {
              "name": "redc_limbs",
              "type": {
                "kind": "array",
                "length": 18,
                "type": { "kind": "field" }
              }
            },
            {
              "name": "partial_hash_start",
              "type": {
                "kind": "array",
                "length": 8,
                "type": { "kind": "integer", "sign": "unsigned", "width": 32 }
              }
            },
            {
              "name": "header_delimiter_index",
              "type": { "kind": "integer", "sign": "unsigned", "width": 32 }
            },
            {
              "name": "payload",
              "type": {
                "kind": "struct",
                "path": "std::collections::bounded_vec::BoundedVec",
                "fields": [
                  {
                    "name": "storage",
                    "type": {
                      "kind": "array",
                      "length": 1024,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ]
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "struct",
        "path": "openbanking_verifier::io::OpenbankingVerifierReturn",
        "fields": [
          {
            "name": "amount",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 10,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                },
                {
                  "name": "len",
                  "type": { "kind": "integer", "sign": "unsigned", "width": 32 }
                }
              ]
            }
          },
          {
            "name": "currency_code",
            "type": {
              "kind": "array",
              "length": 3,
              "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
            }
          },
          {
            "name": "payment_id",
            "type": {
              "kind": "array",
              "length": 36,
              "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
            }
          },
          {
            "name": "sort_code",
            "type": {
              "kind": "array",
              "length": 14,
              "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
            }
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "542922450338173070": {
        "error_kind": "string",
        "string": "create_json_entries: MaxNumValues limit exceeded!"
      },
      "1285086328212934425": {
        "error_kind": "string",
        "string": "find_key_in_map, key not found"
      },
      "2442402699985098867": {
        "error_kind": "string",
        "string": "ScanData: Invalid token"
      },
      "2763232959425933230": {
        "error_kind": "string",
        "string": "Attempted to write past end of BoundedVec"
      },
      "2905794910586529473": {
        "error_kind": "string",
        "string": "get_json_entry_unchecked: key not found"
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5639284723758936875": {
        "error_kind": "string",
        "string": "Cannot find key/value straddling KEY_DELIMITER_TOKEN"
      },
      "6485997221020871071": {
        "error_kind": "string",
        "string": "call to assert_max_bit_size"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9729867350472088386": {
        "error_kind": "string",
        "string": "ValidationFlags: grammar error"
      },
      "10529081074255638466": {
        "error_kind": "string",
        "string": "get_string_unchecked: entry exists but is not a string!"
      },
      "12921714806815923365": {
        "error_kind": "string",
        "string": "get_string, string size is larger than StringBytes"
      },
      "13872591378009313268": {
        "error_kind": "string",
        "string": "capture_missing_tokens: MaxNumTokens limit exceeded!"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "15544221083219072719": {
        "error_kind": "string",
        "string": "check_shuffle, lhs and rhs arrays do not contain equivalent values"
      },
      "16081317107610296567": {
        "error_kind": "string",
        "string": "first json token does not describe an object, array or key"
      },
      "16680141988109035797": {
        "error_kind": "string",
        "string": "get_object: entry exists but is not an object!"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17205526991431008989": {
        "error_kind": "string",
        "string": "validate_tokens: unclosed objects or arrays"
      },
      "17721029505246779248": {
        "error_kind": "string",
        "string": "cannot extract array elements via a key"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      },
      "18170897293561019657": {
        "error_kind": "string",
        "string": "build_transcript: MaxNumTokens limit exceeded!"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            /*@safety: `sorted` array is checked to be:\n                a. a permutation of `input`'s elements\n                b. satisfying the predicate `ordering`\n            */\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "6": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "7": {
      "source": "use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n        for i in 0..MaxLen {\n            if i >= len {\n                array[i] = zeroed;\n            }\n        }\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "13": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "18": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            unsafe {\n                //@safety: already unconstrained\n                field_less_than(b, a)\n            },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "19": {
      "source": "pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "26": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "27": {
      "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            /*@safety  : the msg_block is checked below in verify_msg_block*/\n            build_msg_block(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            //@safety : the msg_block is checked below in verify_msg_block\n            build_msg_block(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        //@safety : the msg_len is checked below in verify_msg_len\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n        let (msg_block, msg_byte_ptr) = unsafe {\n            //@safety : testing context\n            build_msg_block(input, input.len(), 0)\n        };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        let (msg_block, msg_byte_ptr) = unsafe {\n            //@safety : testing context\n            build_msg_block(input, input.len(), 64)\n        };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        let msg_block = unsafe {\n            //@safety  : testing context\n            attach_len_to_msg_block(input, 1, 448)\n        };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n",
      "path": "std/hash/sha256.nr"
    },
    "51": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "62": {
      "source": "use dep::openbanking_verifier::{\n    constants::{MAX_AMOUNT_VALUE_LENGTH, MAX_PAYLOAD_LENGTH,},\n    verify::verify_openbanking_payment,\n    io::{OpenbankingVerifierParams, OpenbankingVerifierReturn}\n};\nuse zkemail::partial_hash::{partial_sha256_var_start, partial_sha256_var_end};\n\n\nfn main(params: OpenbankingVerifierParams) -> pub OpenbankingVerifierReturn {\n    verify_openbanking_payment(params)\n}\n\n// TEST GLOBALS\npub global TEST_HEADER_DELIMITER_INDEX_LENGTH: u32 = 431;\npub global TEST_JWT_LENGTH: u32 = 1242;\npub global TEST_PAYLOAD_LENGTH: u32 = TEST_JWT_LENGTH - TEST_PH_START_PREIMAGE_LENGTH;\npub global TEST_PH_START_PREIMAGE_LENGTH: u32 = 384;\n\n#[test]\nfn test_main() {\n    // pubkey from revolut (also extracted from verifyRevolutJwt.js)\n    let modulus_limbs = [\n        0x83e879145bffccbe4d783abeca8999,\n        0xb7d9868f5b915b43f6c6a8193a1a4f,\n        0x67f95badedef107f0998ab3d52961e,\n        0x7dcc9780ac8d71c6b49bbfeca25f0,\n        0xf9fdced289a3d4f62830681be65b50,\n        0x986aa8fe98888e9f609af97515b036,\n        0xd494bc65f4608849a6ed8cf5cb82ed,\n        0x18ca508b8353e676387d22667e4adb,\n        0x9d3fcb816b4763099ccbb7416a7ad,\n        0xcfd89fee1ffcfa5f2243c92e3908b7,\n        0xcaf320fbb34158238b41042f9c6386,\n        0xb3df0cd5dee269ecec61b342880c59,\n        0x2134236dc67b59df001cac48181625,\n        0x536d424ce3dcaf2b3c15eba3ceb98,\n        0x7c6532647de2f025c4245c4a816ea9,\n        0x1ca6b6ac38706f61dd460c53293c88,\n        0x812b9256f612815edb22ec614a6c89,\n        0xc9,\n    ];\n\n    let redc_limbs = [\n        0x9ec08341171d384b92ed35848dac43,\n        0xaa5e7059598102ad1d99f33e533781,\n        0x894978a6e54a780efd6c579b74dd3f,\n        0x9531219036eb346dc4d2f142d9aeb3,\n        0x2d67220edac65500daea360896b937,\n        0x72393de3ce76a185b8d5fe4efeb301,\n        0x2e5a676dc2d3d971ead0a1a8127ff1,\n        0xbb92e11f4b88fb1f478a8e5fcc8a63,\n        0x978205931de77dc276cbffcfa9ab06,\n        0x3f0074f27a70de9b87b38923c5d26f,\n        0x315d3964500ad7da70267bebb13aed,\n        0xee04558c06aced97c3375cb93ae624,\n        0xcaf9c90ec5317baf27dabd3f3a6018,\n        0x453a832dd0cf10c2e7669123ffdabe,\n        0xc6c46372e3eda40f2582e2e9902867,\n        0xcdb6b9ecb85a01524cbe4cee82a2c2,\n        0xbbaa5920d526e092f29b41b1c629e1,\n        0x1453,\n    ];\n\n    // signature from verifyRevolutJwt.js\n    let signature_limbs = [\n        0x2e3f7f3a3b7d89cbf680adcee4f039,\n        0xcca286445a216e1c110416099710f3,\n        0x0684d04d7773fbff2223360e314f47,\n        0x1342e7d3f7cadd18ba5f0ed57b1e54,\n        0xe5347fc80630780900cffe3d20cb7d,\n        0xda578cadd719f2a38f505d54c46203,\n        0x4a729fdd97383a0e32b5e8f671c833,\n        0x810ea2ce9ace9bd072bd3b221c9b62,\n        0xc565d6bff72c8501a729ecab2aee3b,\n        0xe042b627c4e6b4cc6ab4ca0ababaaa,\n        0x8e707750c71a4f9f0b9d9389b61826,\n        0x850297f956c58dafb6bf4f7bb049fa,\n        0x32c51e7454edae060725c509d9a48c,\n        0xbe2f1df6227e67dc61e6ab82bc501f,\n        0xea17c90cc7053bbb94ddfac6b1a405,\n        0x6c6eaada9c24dfa1a476c3718f6735,\n        0x0134b376c64ba2a79a086061573792,\n        0x22,\n    ];\n\n    // Revolut JWT\n    let jwt = comptime {\n        \"eyJraWQiOiJvSjQwLUcxVklxbUU2eUhuYnA4S1E1Qmk2bXciLCJhbGciOiJQUzI1NiIsImNyaXQiOlsiYjY0IiwiaHR0cDovL29wZW5iYW5raW5nLm9yZy51ay9pYXQiLCJodHRwOi8vb3BlbmJhbmtpbmcub3JnLnVrL2lzcyIsImh0dHA6Ly9vcGVuYmFua2luZy5vcmcudWsvdGFuIl0sImI2NCI6ZmFsc2UsImh0dHA6Ly9vcGVuYmFua2luZy5vcmcudWsvdGFuIjoib3BlbmJhbmtpbmcub3JnLnVrIiwiaHR0cDovL29wZW5iYW5raW5nLm9yZy51ay9pc3MiOiIwMDE1ODAwMDAxMDNVQXZBQU0iLCJodHRwOi8vb3BlbmJhbmtpbmcub3JnLnVrL2lhdCI6MTczNTgyNTE5OX0.{\\\"Data\\\":{\\\"DomesticPaymentId\\\":\\\"6776972f-e9af-ad6a-8cdd-ff2099bd2475\\\",\\\"Status\\\":\\\"Pending\\\",\\\"StatusUpdateDateTime\\\":\\\"2025-01-02T13:39:59.455059Z\\\",\\\"CreationDateTime\\\":\\\"2025-01-02T13:39:59.455059Z\\\",\\\"ConsentId\\\":\\\"6d2e1641-e486-4a3a-936b-065628f2a926\\\",\\\"Initiation\\\":{\\\"RemittanceInformation\\\":{\\\"Unstructured\\\":\\\"Shipment fee\\\"},\\\"DebtorAccount\\\":{\\\"SchemeName\\\":\\\"UK.OBIE.SortCodeAccountNumber\\\",\\\"Identification\\\":\\\"04290953215338\\\",\\\"Name\\\":\\\"Acme Corporation\\\"},\\\"EndToEndIdentification\\\":\\\"E2E123\\\",\\\"InstructionIdentification\\\":\\\"ID412\\\",\\\"CreditorAccount\\\":{\\\"Name\\\":\\\"Receiver Co.\\\",\\\"SchemeName\\\":\\\"UK.OBIE.SortCodeAccountNumber\\\",\\\"Identification\\\":\\\"11223321325698\\\"},\\\"InstructedAmount\\\":{\\\"Amount\\\":\\\"1.00\\\",\\\"Currency\\\":\\\"GBP\\\"}}},\\\"Links\\\":{\\\"Self\\\":\\\"https://sandbox-oba.revolut.com/domestic-payments/6776972f-e9af-ad6a-8cdd-ff2099bd2475\\\"},\\\"Meta\\\":{\\\"TotalPages\\\":1}}\"\n            .as_bytes()\n    };\n\n    // extract beginning of JWT to create partial hash start. Smallest value divisble by block size (64) is\n    // 384 in this case\n    let mut partial_hash_start_preimage: [u8; TEST_PH_START_PREIMAGE_LENGTH] =\n        [0; TEST_PH_START_PREIMAGE_LENGTH];\n    for i in 0..partial_hash_start_preimage.len() {\n        partial_hash_start_preimage[i] = jwt[i];\n    }\n\n    // partial hash start\n    let partial_hash_start =\n        partial_sha256_var_start::<TEST_PH_START_PREIMAGE_LENGTH>(partial_hash_start_preimage);\n\n    let mut payload: [u8; MAX_PAYLOAD_LENGTH] = [32; MAX_PAYLOAD_LENGTH];\n    // extract rest of payload to pass in circuit\n    for i in 0..TEST_JWT_LENGTH - TEST_PH_START_PREIMAGE_LENGTH {\n        payload[i] = jwt[i + TEST_PH_START_PREIMAGE_LENGTH];\n    }\n\n    let payload_vec: BoundedVec<u8, MAX_PAYLOAD_LENGTH> =\n        BoundedVec { storage: payload, len: TEST_PAYLOAD_LENGTH };\n\n    let params = OpenbankingVerifierParams {\n        signature_limbs,\n        modulus_limbs,\n        redc_limbs,\n        partial_hash_start,\n        header_delimiter_index: TEST_HEADER_DELIMITER_INDEX_LENGTH,\n        payload: payload_vec,\n    };\n\n    let res = main(params);\n\n    let amount = comptime { \"1.00\".as_bytes() };\n    let currency_code = comptime { \"GBP\".as_bytes() };\n    let payment_id = comptime { \"6776972f-e9af-ad6a-8cdd-ff2099bd2475\".as_bytes() };\n    let sort_code = comptime { \"04290953215338\".as_bytes() };\n\n    let mut amount_padded: [u8; MAX_AMOUNT_VALUE_LENGTH] = [0; MAX_AMOUNT_VALUE_LENGTH];\n    for i in 0..amount.len() {\n        amount_padded[i] = amount[i];\n    }\n\n    assert(amount_padded == res.amount.storage, \"Expected amount not equal to extracted amount.\");\n    assert(\n        currency_code == res.currency_code,\n        \"Expected currency code not equal to extracted currency code.\",\n    );\n    assert(payment_id == res.payment_id, \"Expected payment id not equal to extracted payment id.\");\n    assert(sort_code == res.sort_code, \"Expected sort code not equal to extracted sort code.\");\n}\n\n#[test]\nfn test_poseidon2_hashes() {\n    let moduluses: [[Field; 18]; 5] = [\n        [\n            0x9f76c1ec6d8f1d11666b8e9210bfc1,\n            0x9faaf8b168eaf3873403ee08847e66,\n            0x195b6f04c7def80fa7bdb4cc034088,\n            0xff04c3928072ff8b14d8f37c2712d7,\n            0x9c5235e5abca6d068f12b22f94188c,\n            0x16d6c8ed83f01aca9dc061c5feb6be,\n            0xea43d55aaa25323247d78388148c99,\n            0x4d6df446b1ce31b3b04dbc7b1e5500,\n            0x8276307060097e03ede1ca7b29e925,\n            0x35f6a517a2dd059cb6f191949804b6,\n            0x27683ac087a341c9301ded685aa6c7,\n            0x47ab70111267727b805618c69baf53,\n            0xd1e764c3df81a304de46196d2f3a0b,\n            0x845fada16ad82f9cd9e3cac3841282,\n            0xc337dff76938fe8d4cb131e07f00d7,\n            0x1f54778fbc8db85eb0c5496ff053af,\n            0x4287bf7a9bb217030f0f54b98cabc2,\n            0xd0,\n        ],\n        [\n            0x72f0ae6fd0188462f04b39d466836f,\n            0xe87e561754ea1c86aa7f6b39c1d0d8,\n            0x1dc23e44e78404556bf7c3c8ee098b,\n            0x3e8d2bdc30992c08580af5448815d8,\n            0x41bd619e0102af7f03e4a72b1bd110,\n            0x9ed8010cf1636c05e7a0f390711155,\n            0x83a9949f9c1062c1bf5cdc4aba2a4e,\n            0x9f78a17e67d7040851f4f852a8f1db,\n            0x5950e977a9f9701f9b4898401c01b7,\n            0x7187f15b3773d92ba190e90b1a2dbd,\n            0x0c3fe01a43ce0e74119ec4a5fc112b,\n            0x6e9be5d892d21fb83c3a2688fa43dc,\n            0xc8b4a7cd5c033dd9f0788838711ac7,\n            0x37dc42891d82affe086d9d65fa1643,\n            0x875ddab4a7a329ab261eeec5d45feb,\n            0x302f9895b272465a80997178a2d001,\n            0x32f3dd05f6a2fc7bf9de2f5a6ab04d,\n            0xa8,\n        ],\n        [\n            0xeabced63d0b101558b85919bdc18ef,\n            0x26c28bd513f71998301e71cefe891d,\n            0xf1b0a3891d68ad2e81517549ff94e0,\n            0x9878b09cb8e7ed125c8fadd940d1ef,\n            0x8f829534ffbb8725d8076baf515101,\n            0xfebef68ce730276e10b3670f8f6bc3,\n            0x29185035557c19915b40654a8b8c7b,\n            0x67488b4b60d3e78e776277765933ad,\n            0xca056f7c64da61e8613bb557be8561,\n            0xc7756d3c85491513d1a7477589159b,\n            0x73f4ab5a49fe38301d54701c393aa7,\n            0x30341a2e7a5242b8bdc5a5a9ad57ce,\n            0xba00dfef6c00abb3d290a47223fd11,\n            0xf4db7bf74c533494df319739779163,\n            0xaf766d30372e431af756bf83f9a8a6,\n            0xb0f0a59a617c7285ae46f36b694d90,\n            0x488ea9627268fc59e28584ec5f2cd9,\n            0xb9,\n        ],\n        [\n            0x6e17b8be54c2c60e29a3589c64c6a3,\n            0xd3f64cf0b74f08293d974c480a62dc,\n            0x95910982e21624e239677d68d5206a,\n            0x5b771818a1661e7f4342168d378811,\n            0x6bd36d192da7b2d22c02c862c08179,\n            0x59d6fd0c32f1ee906bf5cb879c075e,\n            0xe8577567b120c54ab1308149d8f524,\n            0x86acc5a5d1fa9a2d58b9344dc746ba,\n            0xd2300caa068e2c058eeff57e11c5ff,\n            0x6a2aa11de479e920641dd3c5916e91,\n            0xa974113949de5793fa673945ff61a9,\n            0x97c28ae65b9bd0090f4beb4935ebfc,\n            0x3f0a7dcf145e36abd7d06c84891793,\n            0xe77a5e08fd0fa193cf7481b1cac327,\n            0x562d31b208144b962045f356aa1cf1,\n            0x910ebc8fa00d3ada947301b298f7f2,\n            0x440475056a1009e9d1f46030a5d94a,\n            0xbd,\n        ],\n        [\n            0x53f4e0523650eac2cf25a8d137a949,\n            0x8aa514aa79ddfb14ad539ba6089caf,\n            0x11364d0fb2a1fe18b7c6acfa8b080c,\n            0x21702e5ff991caf0692e85a50be53e,\n            0x1eb37782945b58fe288411139bc05e,\n            0xc6227242a22cfbee2b69499615e157,\n            0x941e221ef8eebce8c971e97c4c7fcb,\n            0xcff8ed09f5a6ecdb505b19e09e32f9,\n            0xcd136a4458ed79af0a22e31141d76a,\n            0x29b062040a315b0ea187d7f2bd7003,\n            0x4659d51b02bbe68a6a297a8d09441b,\n            0x7a6d9eec0ca5d777a36859d1c26700,\n            0x40aeba9b1ff45bc3ad8e031481d835,\n            0x8ff166583e658caa574561e80ec810,\n            0x21ac80c3672cee586822845ddc2bfa,\n            0xb3d18b761a488941cddb10c14c8887,\n            0xf68b666736044f9188b5b9da6d04a4,\n            0xab,\n        ],\n    ];\n\n    let redcs: [[Field; 18]; 5] = [\n        [\n            0x20536aa29207bb7a575cd98121ee02,\n            0xb47be4193844aa326612ef6433f9f6,\n            0x9cf79f6de140989b348fa89379d7bb,\n            0x3aa11134457882178caa1c95bf16bd,\n            0x7a0fba0efd33cf11ff0e11f82bc1b9,\n            0x74c565e4fb4bd68e1828eb6813b023,\n            0xc2f20fd5646500553314bc9942b662,\n            0x8a674829aaa063836140aa55cfd58c,\n            0x5889eaafc5cd8e5cd08c8fc457fedd,\n            0xe708c149b6d771fda72327883a8426,\n            0x902eaaadbf81db211717c659d710af,\n            0x412ae650e8b8aae0f3caa6a9920bf7,\n            0x3fa6d5bc2c3d688311ee10d0f83cec,\n            0x9066e9a6b29f5fdd6c28eeff2bcc02,\n            0x6a87ce031b3ff7cd525838797c352c,\n            0xc96b5f3a13c67918898b29ad7920e6,\n            0xf09dacedeebceda932430a249a5929,\n            0x13aa,\n        ],\n        [\n            0x9606960006918e17c6420365ee61d4,\n            0x448770dd64fa725828cad527c3c299,\n            0x62592758474c6f928266e6f65c2b6b,\n            0x689e2220fd335e3325d67812f24d50,\n            0x89f53fd6c8a2549088bc9a14a88424,\n            0x37a3d0ad53fa2a7bdc1b122b2054c4,\n            0x9298402db4aedf3afc16ac45a7d9ed,\n            0x32e2e009b87a3b07b224055205f711,\n            0x163b8d19a5b9e119b70ff6a91e6393,\n            0x935fbfb8843743dc188a2dcc779912,\n            0x8f78a7afa56a57459620767364ea1c,\n            0x05c61a19d24de097334d508520e661,\n            0x0576a47052e35f260f712cdec041c8,\n            0xeba893329072428ce86d37acac854f,\n            0xe2c7e1a8893973c91f1affdf378a6e,\n            0x35397d542c0548c569e399424a2a54,\n            0x2359289c7ea2e25180ce3847819109,\n            0x185a,\n        ],\n        [\n            0x8a1c5b2f70da4c85353a91405a3853,\n            0xb6bd35fe7a9993346bf40e9200319d,\n            0x2bf6927740b8421d6f8f885c5acbbf,\n            0xa51b8b38d4a9ed8ac238ae20794da8,\n            0xe4ab3e0984d040c47b1460fcd878fb,\n            0x25754b6adbc2d3c7649889b4a01a34,\n            0x91ede1b6a8b982c2375b9bba90d92b,\n            0x8ddfa5b18a4742c2c6c955afe49d84,\n            0x8b2462a5a21da9eb7432857fbbaaf4,\n            0x1cdb71f6ae6090d05c53414cd77e6a,\n            0x8f12bc59abe44cbe9513c4fb366be1,\n            0x0f5f5aa392c472fae41da011818981,\n            0xe220d68299b0a960f66413bd3b7dc7,\n            0xdb1565842a2cbf3761e766f2374ba8,\n            0x23ef13c9ec3b74bd6d726497a70f9d,\n            0x2df16957c6b91e3a26e2a7dca27e0b,\n            0x4ee03b0663a6e7afabc75e0344aaab,\n            0x161b,\n        ],\n        [\n            0x8b2f64bceb4f7322a1892e4afed7a2,\n            0x06bd3492fae29d3ef7fa17d44f13a3,\n            0xf9d28587a7b5306102de284c6af775,\n            0x7307cd4f8598b0103073f01d64be91,\n            0x0c8b91cdad07bfe08013a13f6b4ef9,\n            0x3ae92728895d3bebe29dc0e7f80697,\n            0x783f11b1b94ea882921114503f8466,\n            0xee45bd32660f4078332705a499689d,\n            0xc390cd856dc9380aa8d4aaa630e01a,\n            0x8b1168d75efe8f513b215bbb14e548,\n            0x977bf8dc25cdb9a1d00301a99ab432,\n            0x26ee03f585a4ed73a300e763e7c285,\n            0x6f2aa5a036bf842557e734f45d9858,\n            0xbb67ae77a1276e293092b6d4941666,\n            0x9e60d7a765b37db83501e71beec053,\n            0x50e3c65c4a0386d1d674d3680914cd,\n            0x3b98aaaa7da17667f4bb21257cf4f6,\n            0x15a4,\n        ],\n        [\n            0x1bc3ba714c79e6ea406b76000c897d,\n            0xe80e3e98dfd4f9e6a8f711a5360bb4,\n            0x1f51410637a462b6d3b383c2279503,\n            0x8ccbf5e4d719703ce883a2eeef20a0,\n            0x499a9b8fe78218f2f266a4f72ef2a8,\n            0xb08bd8044d41445928bfda98750f0a,\n            0x9d7974a23107a0ca7020a97d964fc4,\n            0x0e7acbc37d788a410ab679c26acf41,\n            0xeb334c2fb63ea2f65abc995159e56e,\n            0x96a2531f4b0b4ad14410496a45f25e,\n            0xe5287ebd7ae1945a3dbe9a38c0b012,\n            0xfb7d4c3cf84f02b0752f9e5802af39,\n            0x76cb3b25b0d54de92ce03fd93dd749,\n            0x768afbc61af80cc4b4cd0b48db658d,\n            0x22954ff874f609b81892bd3ad7b935,\n            0x6bd94a7a6df27eef8e710a83de6f35,\n            0xae77b841eb2a2a2bdd189569a248a7,\n            0x17d1,\n        ],\n    ];\n\n    for i in 0..5 {\n        let modulus = moduluses[i];\n        let redc = redcs[i];\n        let mut dkim_preimage = [0; 18];\n        // compose limbs\n        for i in 0..9 {\n            let low_index = i * 2;\n            let hi_index = i * 2 + 1;\n            let modulus_hi = modulus[hi_index] * 2.pow_32(120);\n            let redc_hi = redc[hi_index] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + modulus[low_index];\n            dkim_preimage[i + 9] = redc_hi + redc[low_index];\n        }\n        let hash = std::hash::poseidon2::Poseidon2::hash(dkim_preimage, 18);\n        println(f\"Hash {i}: {hash}\");\n    }\n}\n\n// #[test]\n// fn test_fuck() {\n//     let signature_limbs = ['0x3952187b429cd1374ddcb7ae6002d2', '0xb16d877123c08f00200643245dd33f', '0x2e46d6604bae1322dfb6e590766162', '0x18377888019412d2ac7df7bfd03124', '0xefc1241d2c87d0de859cd574308a79', '0x27856a99b463546768a95edfd4136d', '0x4fd474090fc9f91db4c0b8c86dbe22', '0x3d55a8efdb231d2bf3b3a0d0981820', '0x33a6d5111097d185c2e263230d062f', '0x7818ab92dc3762d338d2a9bc90ad79', '0xb16c68fb58e079d255a5ec098e9817', '0x61c41e31205474cb3690cb2f14b87e', '0xee6c0c4aba7404d413f59eb7b67dd8', '0x0aaa0852232f808ed13849344c0b0b', '0x802cbd6478fb9b71c16bd74c9bc4a6', '0x8501b6f75e7cb0297a7d802256edfc', '0xfe20bdd2a1793c3b5801dde4dbafdc', '0x48'];\n//     let modulus_limbs = ['0x53f4e0523650eac2cf25a8d137a949', '0x8aa514aa79ddfb14ad539ba6089caf', '0x11364d0fb2a1fe18b7c6acfa8b080c', '0x21702e5ff991caf0692e85a50be53e', '0x1eb37782945b58fe288411139bc05e', '0xc6227242a22cfbee2b69499615e157', '0x941e221ef8eebce8c971e97c4c7fcb', '0xcff8ed09f5a6ecdb505b19e09e32f9', '0xcd136a4458ed79af0a22e31141d76a', '0x29b062040a315b0ea187d7f2bd7003', '0x4659d51b02bbe68a6a297a8d09441b', '0x7a6d9eec0ca5d777a36859d1c26700', '0x40aeba9b1ff45bc3ad8e031481d835', '0x8ff166583e658caa574561e80ec810', '0x21ac80c3672cee586822845ddc2bfa', '0xb3d18b761a488941cddb10c14c8887', '0xf68b666736044f9188b5b9da6d04a4', '0xab'];\n//     let redc_limbs = ['0x1bc3ba714c79e6ea406b76000c897d', '0xe80e3e98dfd4f9e6a8f711a5360bb4', '0x1f51410637a462b6d3b383c2279503', '0x8ccbf5e4d719703ce883a2eeef20a0', '0x499a9b8fe78218f2f266a4f72ef2a8', '0xb08bd8044d41445928bfda98750f0a', '0x9d7974a23107a0ca7020a97d964fc4', '0x0e7acbc37d788a410ab679c26acf41', '0xeb334c2fb63ea2f65abc995159e56e', '0x96a2531f4b0b4ad14410496a45f25e', '0xe5287ebd7ae1945a3dbe9a38c0b012', '0xfb7d4c3cf84f02b0752f9e5802af39', '0x76cb3b25b0d54de92ce03fd93dd749', '0x768afbc61af80cc4b4cd0b48db658d', '0x22954ff874f609b81892bd3ad7b935', '0x6bd94a7a6df27eef8e710a83de6f35', '0xae77b841eb2a2a2bdd189569a248a7', '0x17d1'];\n//     let partial_hash_start = ['646094500', '3680972229', '1761802679', '4150870631', '3449760508', '2508742960', '3037443081', '4225244849'];\n//     let currency_code = ['71', '66', '80']\n//     let sort_code = ['48', '52', '50', '57', '48', '57', '52', '48', '49', '54', '52', '51', '55', '51']\n//     let header_delimiter_index = 431;\n    \n//     let payload = BoundedVec<u8, \n//     storage = ['90', '121', '53', '118', '99', '109', '99', '117', '100', '87', '115', '118', '97', '88', '78', '122', '73', '106', '111', '105', '77', '68', '65', '120', '78', '84', '103', '119', '77', '68', '65', '119', '77', '84', '65', '122', '86', '85', '70', '50', '81', '85', '70', '78', '73', '110', '48', '46', '123', '34', '68', '97', '116', '97', '34', '58', '123', '34', '68', '111', '109', '101', '115', '116', '105', '99', '80', '97', '121', '109', '101', '110', '116', '73', '100', '34', '58', '34', '54', '55', '97', '101', '53', '51', '98', '97', '45', '56', '49', '48', '52', '45', '97', '54', '101', '97', '45', '98', '49', '100', '101', '45', '51', '53', '100', '52', '101', '54', '97', '100', '102', '53', '50', '99', '34', '44', '34', '83', '116', '97', '116', '117', '115', '34', '58', '34', '80', '101', '110', '100', '105', '110', '103', '34', '44', '34', '83', '116', '97', '116', '117', '115', '85', '112', '100', '97', '116', '101', '68', '97', '116', '101', '84', '105', '109', '101', '34', '58', '34', '50', '48', '50', '53', '45', '48', '50', '45', '49', '51', '84', '50', '48', '58', '49', '57', '58', '48', '54', '46', '53', '54', '50', '50', '54', '49', '90', '34', '44', '34', '67', '114', '101', '97', '116', '105', '111', '110', '68', '97', '116', '101', '84', '105', '109', '101', '34', '58', '34', '50', '48', '50', '53', '45', '48', '50', '45', '49', '51', '84', '50', '48', '58', '49', '57', '58', '48', '54', '46', '53', '54', '50', '50', '54', '49', '90', '34', '44', '34', '67', '111', '110', '115', '101', '110', '116', '73', '100', '34', '58', '34', '50', '50', '50', '55', '57', '54', '100', '51', '45', '53', '101', '49', '100', '45', '52', '102', '102', '53', '45', '56', '51', '101', '97', '45', '56', '102', '56', '99', '99', '54', '50', '97', '99', '48', '57', '99', '34', '44', '34', '73', '110', '105', '116', '105', '97', '116', '105', '111', '110', '34', '58', '123', '34', '82', '101', '109', '105', '116', '116', '97', '110', '99', '101', '73', '110', '102', '111', '114', '109', '97', '116', '105', '111', '110', '34', '58', '123', '34', '85', '110', '115', '116', '114', '117', '99', '116', '117', '114', '101', '100', '34', '58', '34', '83', '104', '105', '112', '109', '101', '110', '116', '32', '102', '101', '101', '34', '125', '44', '34', '68', '101', '98', '116', '111', '114', '65', '99', '99', '111', '117', '110', '116', '34', '58', '123', '34', '83', '99', '104', '101', '109', '101', '78', '97', '109', '101', '34', '58', '34', '85', '75', '46', '79', '66', '73', '69', '46', '83', '111', '114', '116', '67', '111', '100', '101', '65', '99', '99', '111', '117', '110', '116', '78', '117', '109', '98', '101', '114', '34', '44', '34', '73', '100', '101', '110', '116', '105', '102', '105', '99', '97', '116', '105', '111', '110', '34', '58', '34', '48', '52', '50', '57', '48', '57', '52', '48', '49', '54', '52', '51', '55', '51', '34', '44', '34', '78', '97', '109', '101', '34', '58', '34', '65', '99', '109', '101', '32', '67', '111', '114', '112', '111', '114', '97', '116', '105', '111', '110', '34', '125', '44', '34', '69', '110', '100', '84', '111', '69', '110', '100', '73', '100', '101', '110', '116', '105', '102', '105', '99', '97', '116', '105', '111', '110', '34', '58', '34', '69', '50', '69', '49', '50', '51', '34', '44', '34', '73', '110', '115', '116', '114', '117', '99', '116', '105', '111', '110', '73', '100', '101', '110', '116', '105', '102', '105', '99', '97', '116', '105', '111', '110', '34', '58', '34', '73', '68', '52', '49', '50', '34', '44', '34', '67', '114', '101', '100', '105', '116', '111', '114', '65', '99', '99', '111', '117', '110', '116', '34', '58', '123', '34', '78', '97', '109', '101', '34', '58', '34', '82', '101', '99', '101', '105', '118', '101', '114', '32', '67', '111', '46', '34', '44', '34', '83', '99', '104', '101', '109', '101', '78', '97', '109', '101', '34', '58', '34', '85', '75', '46', '79', '66', '73', '69', '46', '83', '111', '114', '116', '67', '111', '100', '101', '65', '99', '99', '111', '117', '110', '116', '78', '117', '109', '98', '101', '114', '34', '44', '34', '73', '100', '101', '110', '116', '105', '102', '105', '99', '97', '116', '105', '111', '110', '34', '58', '34', '49', '49', '50', '50', '51', '51', '50', '49', '51', '50', '53', '54', '57', '56', '34', '125', '44', '34', '73', '110', '115', '116', '114', '117', '99', '116', '101', '100', '65', '109', '111', '117', '110', '116', '34', '58', '123', '34', '65', '109', '111', '117', '110', '116', '34', '58', '34', '50', '46', '53', '48', '34', '44', '34', '67', '117', '114', '114', '101', '110', '99', '121', '34', '58', '34', '71', '66', '80', '34', '125', '125', '125', '44', '34', '76', '105', '110', '107', '115', '34', '58', '123', '34', '83', '101', '108', '102', '34', '58', '34', '104', '116', '116', '112', '115', '58', '47', '47', '115', '97', '110', '100', '98', '111', '120', '45', '111', '98', '97', '46', '114', '101', '118', '111', '108', '117', '116', '46', '99', '111', '109', '47', '100', '111', '109', '101', '115', '116', '105', '99', '45', '112', '97', '121', '109', '101', '110', '116', '115', '47', '54', '55', '97', '101', '53', '51', '98', '97', '45', '56', '49', '48', '52', '45', '97', '54', '101', '97', '45', '98', '49', '100', '101', '45', '51', '53', '100', '52', '101', '54', '97', '100', '102', '53', '50', '99', '34', '125', '44', '34', '77', '101', '116', '97', '34', '58', '123', '34', '84', '111', '116', '97', '108', '80', '97', '103', '101', '115', '34', '58', '49', '125', '125', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32', '32']\n//     len = '858'\n    \n//     [amount]\n//     storage = ['50', '46', '53', '48', '0', '0', '0', '0', '0', '0']\n//     len = '4'\n// }",
      "path": "/Users/ianbrighton/Documents/Mach34/open_banking/openbank-circuit/src/main.nr"
    },
    "66": {
      "source": "use crate::{\n    constants::{\n        AMOUNT_KEY, AMOUNT_KEY_LENGTH, CURRENCY_CODE_KEY, CURRENCY_CODE_KEY_LENGTH,\n        CURRENCY_CODE_VALUE_LENGTH, CREDITOR_ACCOUNT_KEY, INITIATION_KEY, INSTRUCTED_AMOUNT_KEY,\n        MAX_AMOUNT_VALUE_LENGTH, PAYLOAD_DATA_KEY, PAYMENT_ID_KEY, PAYMENT_ID_KEY_LENGTH,\n        PAYMENT_ID_LENGTH, SORT_CODE_KEY, SORT_CODE_KEY_LENGTH, SORT_CODE_VALUE_LENGTH,\n    },\n    io::{OpenbankingVerifierParams, OpenbankingVerifierReturn},\n};\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse json_parser::JSON;\nuse rsa_pss::rsa::verify_sha256_pss;\nuse zkemail::partial_hash::partial_sha256_var_end;\n\npub fn verify_openbanking_payment(params: OpenbankingVerifierParams) -> OpenbankingVerifierReturn {\n    let OpenbankingVerifierParams {\n    signature_limbs,\n    modulus_limbs,\n    redc_limbs,\n    partial_hash_start,\n    header_delimiter_index,\n    payload: payload_immut,} = params;\n\n    // bit hacky but this lets us work around problem of passing mutable reference in struct.\n    // Compiler optimizes this out\n    let mut payload = payload_immut;\n\n    // calculate length of payload already hashed by finding next lowest value divisible by 64 from delimiter index\n    let partial_hash_start_preimage_length = header_delimiter_index - (header_delimiter_index % 64);\n\n    let has_multiplicative_inverse = false;\n    let params: BigNumParams<18, 2048> =\n        BigNumParams::new(has_multiplicative_inverse, modulus_limbs, redc_limbs);\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum::from_array(params, signature_limbs);\n\n    // get complete hash of JWT by taking partial hash start and hashing the rest of the payload\n    let hash: [u8; 32] = partial_sha256_var_end(\n        partial_hash_start,\n        payload.storage,\n        payload.len() as u64,\n        payload.len() as u64 + partial_hash_start_preimage_length as u64,\n    );\n\n    // verify signature over payload\n    assert(verify_sha256_pss(hash, signature, 2048));\n\n    // calculate remaning chars up to header / payload delimiter (\".\") that were not in the initial hash\n    let carry_over_end_index = header_delimiter_index - partial_hash_start_preimage_length as u32;\n\n    // if carry over is not 0 then set first index to whitespace (32)\n    let mut byte = payload.get_unchecked(0);\n    if carry_over_end_index != 0 {\n        byte = 32;\n    }\n    payload.set(0, byte);\n\n    // set values prior and up to delimiter to whitespace so JSON parser does not get angry\n    for i in 1..64 {\n        let mut index = i;\n        if i > carry_over_end_index {\n            index = carry_over_end_index;\n        }\n        payload.set(index, 32);\n    }\n\n    // init JSON. Note: Parameters may need to be adjusted depending on payload variability\n    let json: JSON<1024, 34, 106, 29, 2> = JSON::parse_json(payload.storage);\n\n    // parse through nested JSON to extract values\n    let data_obj = json.get_object(PAYLOAD_DATA_KEY).unwrap();\n    let initiation_obj = data_obj.get_object(INITIATION_KEY).unwrap();\n    let creditor_acc_obj = initiation_obj.get_object(CREDITOR_ACCOUNT_KEY).unwrap();\n\n    // extract payment id\n    let payment_id_result =\n        data_obj.get_string_unchecked::<PAYMENT_ID_KEY_LENGTH, PAYMENT_ID_LENGTH>(PAYMENT_ID_KEY);\n\n    // extract sort code\n    let sort_code_result = creditor_acc_obj\n        .get_string_unchecked::<SORT_CODE_KEY_LENGTH, SORT_CODE_VALUE_LENGTH>(SORT_CODE_KEY);\n\n    let instructed_amt_obj = initiation_obj.get_object(INSTRUCTED_AMOUNT_KEY).unwrap();\n    // extract amount\n    let amount_result = instructed_amt_obj\n        .get_string_unchecked::<AMOUNT_KEY_LENGTH, MAX_AMOUNT_VALUE_LENGTH>(AMOUNT_KEY);\n\n    // extract currency code\n    let currency_code_result = instructed_amt_obj\n        .get_string_unchecked::<CURRENCY_CODE_KEY_LENGTH, CURRENCY_CODE_VALUE_LENGTH>(\n            CURRENCY_CODE_KEY,\n        );\n\n\n    OpenbankingVerifierReturn {\n        amount: amount_result,\n        currency_code: currency_code_result.storage,\n        payment_id: payment_id_result.storage,\n        sort_code: sort_code_result.storage,\n    }\n}\n",
      "path": "/Users/ianbrighton/Documents/Mach34/open_banking/openbank-circuit/lib/src/verify.nr"
    },
    "68": {
      "source": "use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    pub fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/params.nr"
    },
    "69": {
      "source": "use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/expressions.nr"
    },
    "70": {
      "source": "use crate::params::BigNumParams as P;\n\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__div, __mul, __udiv_mod},\n};\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let modulus = params.modulus;\n    for i in 0..N {\n        l *= two_pow_120;\n        r *= two_pow_120;\n        modulus_mod_n *= two_pow_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let mut diff = l - r;\n    let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let mut is_equal_modulus: bool = true;\n    let mut is_equal_zero: bool = true;\n    for i in 0..N {\n        is_equal_modulus = is_equal_modulus & (diff[i] == params.modulus[i]);\n        is_equal_zero = is_equal_zero & (diff[i] == 0);\n    }\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    let mut compare = val;\n    compare = p_minus_self;\n    validate_in_range::<_, MOD_BITS>(compare);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let result_limb = modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * borrow_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n            + (borrow_flags[i] as Field * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    let (result, carry_flags, borrow_flags, overflow_modulus) =\n        unsafe { __add_with_flags(params, lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut subtrahend: [Field; N] = [0; N];\n    if (overflow_modulus) {\n        subtrahend = modulus;\n    }\n    let result_limb = lhs[0] + rhs[0] - subtrahend[0] - result[0]\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = lhs[N - 1] + rhs[N - 1]\n        - subtrahend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags, underflow) =\n        unsafe { __sub_with_flags(params, lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut addend: [Field; N] = [0; N];\n    if (underflow) {\n        addend = modulus;\n    }\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0]\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    evaluate_quadratic_expression(\n        params,\n        [[lhs]],\n        [[false]],\n        [[rhs]],\n        [[false]],\n        [result],\n        [true],\n    );\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    evaluate_quadratic_expression(\n        params,\n        [[result]],\n        [[false]],\n        [[rhs]],\n        [[false]],\n        [lhs],\n        [true],\n    );\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    // self / divisor = quotient rounded\n    // quotient * divisor + remainder - self = 0\n    evaluate_quadratic_expression(\n        params,\n        [[quotient]],\n        [[false]],\n        [[divisor]],\n        [[false]],\n        [numerator, remainder],\n        [true, false],\n    );\n    // we need (remainder < divisor)\n    // implies (divisor - remainder > 0)\n    validate_gt::<_, MOD_BITS>(divisor, remainder);\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor \n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/constrained_ops.nr"
    },
    "71": {
      "source": "/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/serialization.nr"
    },
    "73": {
      "source": "use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one: [Field; N] = __one::<N>();\n    let one_u60: U60Repr<N, 2> = U60Repr::from(one);\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    let mut temporaries: [[Field; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (__is_zero(x[i]) == false) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]] = [[0; N]];\n    let mut temporaries: [[Field; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (__is_zero(x[i]) == false) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n        result = result.push_back([0; N]);\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = unsafe { U60Repr::one() };\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut found_root = false;\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one) == false) {} else {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                found_root = true;\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    let result = if found_root {\n        std::option::Option::some(r)\n    } else {\n        std::option::Option::none()\n    };\n    result\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/unconstrained_ops.nr"
    },
    "74": {
      "source": "use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[i / 2] = carry as bool;\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            let idx = (i - 1) / 2;\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[idx] = carry as bool;\n            borrow_flags[idx] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[i / 2] = carry as bool;\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quircky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (!lsb_is_one) {\n            result += 1;\n            target.shr1();\n        } else {\n            break;\n        }\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = unsafe { __add(params, target, one) };\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/unconstrained_helpers.nr"
    },
    "78": {
      "source": "global TWO_POW_56: u64 = 0x100000000000000;\nglobal TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\npub unconstrained fn split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut inp: _ = input;\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(inp[i]);\n\n        normalized[i] = lo;\n        inp[i + 1] += hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(inp[range - 1]);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/utils/split_bits.nr"
    },
    "79": {
      "source": "use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N) {\n            let (lo, hi) = unsafe { split_bits::split_60_bits(input[i]) };\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) unconstrained fn new<let NumFieldSegments: u32>(\n        x: [Field; N * NumFieldSegments],\n    ) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumSegments / 2) {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs[(N * NumSegments) - 1 - i] < self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (\n                b.limbs[(N * NumSegments) - 1 - i] != self.limbs[((N * NumSegments) - 1 - i)]\n            ) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs[0] == b.limbs[0]);\n        }\n        result\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift as u8);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = (value >> limb_shift as u8);\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << (limb_shift as u8)) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/utils/u60_representation.nr"
    },
    "114": {
      "source": "use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, mul, neg, sub,\n        udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    pub fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self;\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    pub fn modulus(self) -> Self;\n    pub fn modulus_bits() -> u32;\n    pub fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    pub fn get_limbs(self) -> [Field; N];\n    pub fn get_limb(self, idx: u32) -> Field;\n    pub fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    pub fn __neg(self) -> Self;\n    // unconstrained\n    pub fn __add(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __div(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    pub fn __invmod(self) -> Self;\n    // unconstrained\n    pub fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    pub fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    pub fn assert_is_not_equal(self, other: Self);\n    pub fn validate_in_field(self);\n    pub fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    pub fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    pub fn udiv(numerator: Self, divisor: Self) -> Self;\n    pub fn umod(numerator: Self, divisor: Self) -> Self;\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = unsafe { derive_from_seed::<_, MOD_BITS, _>(params, seed) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = unsafe { __derive_from_seed::<_, MOD_BITS, _>(params, seed) };\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = unsafe {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/runtime_bignum.nr"
    },
    "117": {
      "source": "use crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::STRING_TOKEN;\nuse crate::getters::JSONValue;\nuse crate::json::JSON;\nuse crate::json_entry::JSONEntry;\nuse crate::json_tables::{\n    ESCAPE_SEQUENCE_END_CHARS, ESCAPE_SEQUENCE_REPLACEMENT, ESCAPE_SEQUENCE_START_CHARS,\n};\n\nunconstrained fn to_u8(f: Field) -> u8 {\n    f as u8\n}\nfn process_escape_sequences<let N: u32>(input: BoundedVec<u8, N>) -> BoundedVec<u8, N> {\n    let string = input.storage;\n    let mut result: [u8; N] = [0; N];\n    let mut result_ptr = 0;\n    let mut character = string[0];\n    let mut skip = 0;\n    let mut cached_byte: Field = 0;\n    for i in 1..N {\n        let next_character = string[i];\n        let escape_sequence_start_candidate = ESCAPE_SEQUENCE_START_CHARS[character];\n        let escape_sequence_end_candidate = ESCAPE_SEQUENCE_END_CHARS[next_character];\n        let escape_sequence_replacement_candidate = ESCAPE_SEQUENCE_REPLACEMENT[next_character];\n        let mut is_escape_sequence =\n            (escape_sequence_start_candidate & escape_sequence_end_candidate) as Field;\n        is_escape_sequence = is_escape_sequence * (1 - skip);\n        let mut written_byte = is_escape_sequence * escape_sequence_replacement_candidate as Field\n            + (1 - is_escape_sequence) * character as Field;\n\n        written_byte = written_byte * (1 - skip) + cached_byte * skip;\n        //@Safety: we assert that the casting is done correctly\n        let written_byte_u8 = unsafe { to_u8(written_byte) };\n        assert(written_byte_u8 as Field == written_byte);\n\n        result[result_ptr] = written_byte_u8;\n        result_ptr += (1 - is_escape_sequence);\n        cached_byte = written_byte;\n        skip = is_escape_sequence;\n        character = next_character;\n    }\n\n    let written_byte: Field = character as Field * (1 - skip) + cached_byte * skip;\n    //@Safety: we assert that the casting is done correctly\n    let written_byte_u8 = unsafe { to_u8(written_byte) };\n    assert(written_byte_u8 as Field == written_byte);\n    result[result_ptr] = written_byte_u8;\n    result_ptr += 1;\n\n    let num_removed_chars = N as Field - result_ptr;\n    let new_length = input.len as Field - num_removed_chars;\n    BoundedVec { storage: result, len: new_length as u32 }\n}\n\n#[test]\nfn test_process_escape_sequence_2() {\n    let text = BoundedVec::from_array(\"\\\\\\\"Ade\\\\nel Solangi\\\\\\\"\".as_bytes());\n    let mut expected = text;\n    expected = BoundedVec::from_array(\"\\\"Ade\\nel Solangi\\\"\".as_bytes());\n    let result: BoundedVec<u8, 19> = process_escape_sequences(text);\n    assert(result == expected);\n}\n#[test]\nfn test_process_escape_sequence() {\n    // end with escape sequence\n    {\n        let text = BoundedVec::from_array(\"the qulick brown fox said \\\\\\\"why hello there\\\\\\\"  \\\\\\\\\"\n            .as_bytes());\n\n        let expected: BoundedVec<u8, 49> = BoundedVec::from_array(\n            \"the qulick brown fox said \\\"why hello there\\\"  \\\\\".as_bytes(),\n        );\n\n        let result: BoundedVec<u8, 49> = process_escape_sequences(text);\n\n        assert(result == expected);\n    }\n    // end without escape sequence\n    {\n        let text = BoundedVec::from_array(\n            \"\\\\\\\"he qulick brown fox said \\\\n \\\\r \\\\\\\"why hello there\\\\\\\"  \\\\\\\\\".as_bytes(),\n        );\n\n        let expected: BoundedVec<u8, 56> = BoundedVec::from_array(\n            \"\\\"he qulick brown fox said \\n \\r \\\"why hello there\\\"  \\\\\".as_bytes(),\n        );\n\n        let result = process_escape_sequences(text);\n\n        assert(result == expected);\n    }\n}\n\n/**\n * @brief getter methods for extracting string values out of a JSON struct\n * @note returned strings will have escape sequences converted into the relevant ASCII characters.\n *       If you want to avoid this, use `get_value` instead of `get_string`\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief if the root JSON is an object, extract a string given by `key`\n     * @description returns an Option<BoundedVec> which will be null if the key does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned string\n     **/\n    fn get_string<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let (exists, entry) = self.get_json_entry(key);\n        assert(\n            (entry.entry_type - STRING_TOKEN) * exists as Field == 0,\n            \"get_string: entry exists but is not a string!\",\n        );\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: exists, _value: parsed_string }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a string given by `key`\n     * @description will revert if the string does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned string\n     **/\n    fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> BoundedVec<u8, StringBytes> {\n        let entry = self.get_json_entry_unchecked(key);\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_unchecked: entry exists but is not a string!\",\n        );\n        let parsed_string =\n            BoundedVec { storage: self.extract_string_entry(entry), len: entry.json_length as u32 };\n        process_escape_sequences(parsed_string)\n    }\n\n    /**\n     * @brief same as `get_string` for where the key length may be less than KeyBytes\n     **/\n    fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let (exists, entry) = self.get_json_entry_var(key);\n        assert(\n            (entry.entry_type - STRING_TOKEN) * exists as Field == 0,\n            \"get_string: entry exists but is not a string!\",\n        );\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: exists, _value: parsed_string }\n    }\n\n    /**\n     * @brief same as `get_string_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> BoundedVec<u8, StringBytes> {\n        let entry = self.get_json_entry_unchecked_var(key);\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_unchecked: entry exists but is not a string!\",\n        );\n        let parsed_string =\n            BoundedVec { storage: self.extract_string_entry(entry), len: entry.json_length as u32 };\n        process_escape_sequences(parsed_string)\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a string given by the position of the target in the source array\n     * @description returns an Option<BoundedVec> which will be null if the string does not exist\n     **/\n    fn get_string_from_array<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - STRING_TOKEN) * valid as Field == 0,\n            \"get_array_element_as_string: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: valid, _value: parsed_string }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a string given by the position of the target in the source array\n     * @description will revert if the string does not exist\n     **/\n    fn get_string_from_array_unchecked<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> BoundedVec<u8, StringBytes> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_from_array_unchecked: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        )\n    }\n\n    /**\n     * @brief if the root JSON is an object, get a nested string out of the JSON, which may be several keys deep\n     **/\n    fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n        self,\n        keys: [BoundedVec<u8, KeyBytes>; PathDepth],\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let mut target = self;\n        let mut valid = true;\n        for i in 0..PathDepth - 1 {\n            let child = self.get_object_var(keys[i]);\n\n            target = child._value;\n            valid = valid & child._is_some;\n        }\n\n        let mut final = target.get_string_var(keys[PathDepth - 1]);\n        final._is_some = final._is_some & valid;\n        final\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a JSONValue given by `key`\n     * @description returns an Option<JSONValue> which will be null if the key does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned value\n     **/\n    fn get_value<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> Option<JSONValue<StringBytes>> {\n        let (exists, entry) = self.get_json_entry(key);\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> =\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 };\n        Option {\n            _is_some: exists,\n            _value: JSONValue { value: parsed_string, value_type: entry.entry_type },\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a JSONValue given by `key`\n     * @description will revert if the string does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned value\n     **/\n    fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> JSONValue<StringBytes> {\n        let entry = self.get_json_entry_unchecked(key);\n        JSONValue {\n            value: BoundedVec {\n                len: entry.json_length as u32,\n                storage: self.extract_string_entry(entry),\n            },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief same as `get_value` for where the key length may be less than KeyBytes\n     **/\n    fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> Option<JSONValue<StringBytes>> {\n        let (exists, entry) = self.get_json_entry_var(key);\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> =\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 };\n        Option {\n            _is_some: exists,\n            _value: JSONValue { value: parsed_string, value_type: entry.entry_type },\n        }\n    }\n\n    /**\n     * @brief same as `get_value_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> JSONValue<StringBytes> {\n        let entry = self.get_json_entry_unchecked_var(key);\n        JSONValue {\n            value: BoundedVec {\n                len: entry.json_length as u32,\n                storage: self.extract_string_entry(entry),\n            },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a value given by the position of the target in the source array\n     * @description returns an Option<BoundedVec> which will be null if the value does not exist\n     **/\n    fn get_value_from_array<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> Option<JSONValue<StringBytes>> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - STRING_TOKEN) * valid as Field == 0,\n            \"get_array_element_as_string: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        Option {\n            _is_some: valid,\n            _value: JSONValue {\n                value: BoundedVec { len: entry.json_length as u32, storage: parsed_string },\n                value_type: entry.entry_type,\n            },\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a value given by the position of the target in the source array\n     * @description will revert if the value does not exist\n     **/\n    fn get_value_from_array_unchecked<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> JSONValue<StringBytes> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_from_array_unchecked: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        JSONValue {\n            value: BoundedVec { len: entry.json_length as u32, storage: parsed_string },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an object, get a nested value out of the JSON, which may be several keys deep\n     **/\n    fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n        self,\n        keys: [BoundedVec<u8, KeyBytes>; PathDepth],\n    ) -> Option<JSONValue<StringBytes>> {\n        let mut target = self;\n        let mut valid = true;\n        for i in 0..PathDepth - 1 {\n            let child = self.get_object_var(keys[i]);\n\n            target = child._value;\n            valid = valid & child._is_some;\n        }\n\n        let mut final = target.get_value_var(keys[PathDepth - 1]);\n        final._is_some = final._is_some & valid;\n\n        final\n    }\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/get_string.nr"
    },
    "118": {
      "source": "use crate::json_tables::ASCII_TO_TOKEN_TABLE;\n\nstruct ValidationFlags {\n    push_layer: Field,\n    push_layer_type_of_root: Field,\n    pop_layer: Field,\n}\n\nimpl ValidationFlags {\n    fn to_field(self) -> Field {\n        self.push_layer + self.push_layer_type_of_root * 0x100 + self.pop_layer * 0x10000\n    }\n\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 4] = f.to_be_bytes();\n        let mut push_layer = bytes[3] as Field;\n        let push_layer_type_of_root = bytes[2] as Field;\n        let pop_layer = bytes[1] as Field;\n        let error = bytes[0] as Field;\n\n        assert(error == 0, \"ValidationFlags: grammar error\");\n        // we are doing something very degenerate here.\n        // in `validate_tokens` update a `depth` parameter via `depth = depth + push_layer - pop_layer`\n        // we index a size-32 array `parent_layer_stack` using the `depth_parameter` immediately after updating `depth`\n        // i.e. we implicitly validate `push_layer < 32`\n        // If the Prover incorrectly generates the `push_layer` witness via encoding any other flag data within it,\n        // an out of bounds error will be triggered\n        // n.b. reason for doing this is that by only having 3 flags stored in our lookup table,\n        // we can extract them all with 1 add gate. combined with 2 bool checks = 3 gates instead of 5/6 gates if we had 4 flags\n        push_layer = push_layer + error * 0x1000000;\n        ValidationFlags { push_layer, push_layer_type_of_root, pop_layer }\n    }\n\n    // 3 gates\n    fn from_field(f: Field) -> Self {\n        //@Safety: check the comments below\n        let r = unsafe { ValidationFlags::__from_field(f) };\n        // checks pop_layer is a valid boolean\n        assert(r.pop_layer * r.pop_layer == r.pop_layer);\n        // checks push_layer_type_of_root is a valid boolean\n        assert(r.push_layer_type_of_root * r.push_layer_type_of_root == r.push_layer_type_of_root);\n        // checks the input field is a valid combination of the outputs of the decomposition\n        assert(r.pop_layer * 0x10000 + r.push_layer_type_of_root * 0x100 + r.push_layer == f);\n        r\n    }\n}\n\nstruct RawTranscriptEntry {\n    encoded_ascii: Field,\n    index: Field,\n    length: Field,\n}\n\nimpl RawTranscriptEntry {\n    fn new() -> Self {\n        RawTranscriptEntry { encoded_ascii: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.encoded_ascii + self.index * 0x10000 + self.length * (0x100000000)\n    }\n\n    unconstrained fn __from_field(felt: Field) -> Self {\n        let slices: [u8; 6] = felt.to_be_bytes(); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 0x100;\n        let index = slices[3] as Field + slices[2] as Field * 0x100;\n        let encoded_ascii = slices[5] as Field + slices[4] as Field * 0x100;\n        Self { encoded_ascii, index, length }\n    }\n    // 2 gates to add bytes into sum\n    // 1.25 gates for range checks\n    // 2 gates to get u16s\n    // 5.25 gates total\n    fn from_field(felt: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { RawTranscriptEntry::__from_field(felt) };\n        result.length.assert_max_bit_size::<16>();\n        result.index.assert_max_bit_size::<16>();\n        result.encoded_ascii.assert_max_bit_size::<14>();\n\n        assert(result.encoded_ascii + result.index * 0x10000 + result.length * 0x100000000 == felt);\n        result\n    }\n\n    unconstrained fn __extract_ascii(f: Field) -> (Field, Field) {\n        let r = RawTranscriptEntry::__from_field(f);\n        let ascii = r.encoded_ascii;\n        let remainder = r.index + r.length * 0x10000;\n        (ascii, remainder)\n    }\n    fn extract_ascii(f: Field) -> (Field, Field) {\n        //@Safety: ascci length is checked. remainder size is checked. the relation to the input is asserted as well.\n        let (ascii, remainder) = unsafe { RawTranscriptEntry::__extract_ascii(f) };\n        ascii.assert_max_bit_size::<14>();\n        remainder.assert_max_bit_size::<32>();\n        assert(ascii + remainder * 0x10000 == f);\n        (ascii, remainder)\n    }\n}\n\nstruct TranscriptEntry {\n    token: Field,\n    index: Field,\n    length: Field,\n}\n\nstruct ScanData {\n    scan_token: Field,\n    push_transcript: Field,\n    increase_length: Field,\n    is_potential_escape_sequence: Field,\n}\n\nimpl ScanData {\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 6] = f.to_le_bytes();\n\n        let mut scan_token = bytes[0] as Field;\n        let push_transcript = bytes[1] as Field;\n        let increase_length = bytes[2] as Field;\n        let is_potential_escape_sequence = bytes[3] as Field;\n        let error = bytes[4] as Field * 0x100 + bytes[5] as Field;\n        assert(error == 0, \"ScanData: Invalid token\");\n        // TODO document this\n        scan_token = scan_token + error * 0x100000000;\n        ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence }\n    }\n    fn from_field(f: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { ScanData::__from_field(f) };\n        // checks increase_length is a valid boolean\n        assert(result.increase_length * result.increase_length == result.increase_length);\n        // checks push_transcript is a valid boolean\n        assert(result.push_transcript * result.push_transcript == result.push_transcript);\n        // checks is_potential_escape_sequence is a valid boolean\n        assert(\n            result.is_potential_escape_sequence * result.is_potential_escape_sequence\n                == result.is_potential_escape_sequence,\n        );\n        // checks the input field is a valid combination of the outputs of the decomposition\n        assert(\n            result.scan_token\n                + result.push_transcript * 0x100\n                + result.increase_length * 0x10000\n                + result.is_potential_escape_sequence * 0x1000000\n                == f,\n        );\n        result\n    }\n}\n\nstruct PostProcessScanData {\n    token: Field,\n    new_grammar: Field,\n    scan_token: Field,\n}\nimpl PostProcessScanData {\n    fn from_field(f: Field) -> Self {\n        let bytes: [u8; 3] = f.to_be_bytes();\n        let token = bytes[2] as Field;\n        let new_grammar = bytes[1] as Field;\n        let scan_token = bytes[0] as Field;\n        PostProcessScanData { token, new_grammar, scan_token }\n    }\n}\nimpl TranscriptEntry {\n    fn new() -> Self {\n        TranscriptEntry { token: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.token + self.index * 0x100 + self.length * (0x1000000)\n    }\n    unconstrained fn __from_field(felt: Field) -> Self {\n        let slices: [u8; 5] = felt.to_be_bytes(); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 256;\n        let index = slices[3] as Field + slices[2] as Field * 256;\n        let token = slices[4] as Field;\n        Self { token, index, length }\n    }\n    unconstrained fn __get_token(f: Field) -> (Field, Field) {\n        let r = TranscriptEntry::__from_field(f);\n        (r.token, (r.index + r.length * 0x10000))\n    }\n    // 4 gates\n    fn get_token(f: Field) -> Field {\n        //@Safety: check the comments below\n        let (token, remainder) = unsafe { TranscriptEntry::__get_token(f) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that token is in range\n        token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(token + remainder * 0x100 == f);\n        token\n    }\n    // 5.25 gates\n    fn from_field(felt: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { TranscriptEntry::__from_field(felt) };\n        // checks that length is in range\n        result.length.assert_max_bit_size::<16>();\n        // checks that index is in range\n        result.index.assert_max_bit_size::<16>();\n        // checks that token is in range\n        result.token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(result.token + result.index * 0x100 + result.length * 0x1000000 == felt);\n        result\n    }\n\n    fn get_token_and_index_length_combined(f: Field) -> (Field, Field) {\n        //@Safety: check the comments below\n        let (token, remainder) = unsafe { TranscriptEntry::__get_token(f) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that token is in range\n        token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(token + remainder * 0x100 == f);\n        (token, remainder)\n    }\n\n    // 5.75 gates\n    fn from_raw(raw_encoded: Field) -> Field {\n        //@Safety: check the comments below\n        let (ascii, remainder) = unsafe { RawTranscriptEntry::__extract_ascii(raw_encoded) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(ascii + remainder * 0x10000 == raw_encoded);\n        // this lookup enforces an implicit 10 bit range check on ascii\n        let token = ASCII_TO_TOKEN_TABLE[ascii];\n        token + remainder * 0x100\n    }\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/transcript_entry.nr"
    },
    "120": {
      "source": "use crate::_comparison_tools::lt::{assert_gt_240_bit, assert_lt_240_bit, lt_field_16_bit};\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::_string_tools::string_chopper::StringChopper;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::{LITERAL_TOKEN, NUMERIC_TOKEN, STRING_TOKEN};\nuse crate::json::JSON;\nuse crate::json::JSONValue;\nuse crate::json_entry::JSONEntry;\nuse crate::keyhash::ByteHasher;\nuse crate::keymap::KeyIndexData;\nuse crate::transcript_entry::TranscriptEntry;\n/**\n * @brief records data used to reason about whether a key exists in a json blob\n **/\npub struct KeySearchResult {\n    found: bool, // does the key exist?\n    target_lt_smallest_entry: bool, // is the target keyhash smaller than the smallest keyhash in self.key_hashes?\n    target_gt_largest_entry: bool, // is the target keyhash larger than the largest keyhash in self.key_hashes?\n    lhs_index: Field, // either the index of the key being searched for, or the index of the keyhash in self.key_hashes that is closest to keyhash (hash > lhs_index_hash)\n    rhs_index: Field, // either the index of the key being searched for, or the index of the keyhash in self.key_hashes that is closest to keyhash (hash < rhs_index_hash)\n}\n\n/**\n * @brief helper methods for extracting data out of a processed JSON object\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief If the root JSON is an object, extract a JSONEntry that describes an array, object or value that maps to a given key\n     * @description returns an Option<JSONEntry> which will be null if the entry does not exist\n     **/\n    fn get_json_entry<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (bool, JSONEntry) {\n        // let key_index = self.find_key_in_map(keyhash);\n        // assert(self.key_hashes[key_index] == keyhash);\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        (exists, entry)\n    }\n\n    /**\n     * @brief If the root JSON is an object, extract a JSONEntry that describes an array, object or value that maps to a given key\n     * @note will revert if the key does not exist\n     **/\n    fn get_json_entry_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> JSONEntry {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        entry\n    }\n\n    /**\n     * @brief same as `get_json_entry` but the key length may be less than KeyBytes\n     **/\n    fn get_json_entry_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (bool, JSONEntry) {\n        // let key_index = self.find_key_in_map(keyhash);\n        // assert(self.key_hashes[key_index] == keyhash);\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        (exists, entry)\n    }\n\n    /**\n     * @brief same as `get_json_entry_unchecked` but the key length may be less than KeyBytes\n     **/\n    fn get_json_entry_unchecked_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> JSONEntry {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        entry\n    }\n\n    /**\n     * @brief same as `get_json_entry_unchecked_var` but also returns the position of the JSONEntry in `self.json_entries_packed`\n     **/\n    fn get_json_entry_unchecked_with_key_index<let KeyBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> (JSONEntry, Field) {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        (entry, key_index)\n    }\n    /**\n     * @brief same as `get_json_entry_unchecked_var` but also returns the position of the JSONEntry in `self.json_entries_packed`\n     **/\n    fn get_json_entry_unchecked_with_key_index_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (JSONEntry, Field) {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        (entry, key_index)\n    }\n\n    /**\n     * @brief helper method that will extract an array of bytes that describes the value associated with a JSONEntry object\n     * @description e.g. if the JSONEntry describes \"foo\" : \"bar\" in the JSON, `extract_string_entry` will return \"foo\"\n     **/\n    fn extract_string_entry<let StringBytes: u32>(self, entry: JSONEntry) -> [u8; StringBytes] {\n        // todo can we make this faster? witness gen for this method is slow\n        // TODO: document that StringBytes parameter includes non-escaped characters\n        assert(\n            lt_field_16_bit(entry.json_length, StringBytes as Field + 1),\n            \"get_string, string size is larger than StringBytes\",\n        );\n\n        let mut result: [u8; StringBytes] = [0; StringBytes];\n        if (StringBytes <= 31) {\n            let s: StringChopper<1> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 62) {\n            let s: StringChopper<2> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 93) {\n            let s: StringChopper<3> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 124) {\n            let s: StringChopper<4> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 155) {\n            let s: StringChopper<5> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 186) {\n            let s: StringChopper<6> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 217) {\n            let s: StringChopper<7> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 248) // 8\n        {\n            let s: StringChopper<8> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 496) // 16\n        {\n            let s: StringChopper<16> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 992) // 32\n        {\n            let s: StringChopper<32> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 1984) {\n            let s: StringChopper<64> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 3968) {\n            let s: StringChopper<128> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 7936) {\n            let s: StringChopper<256> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 15872) {\n            let s: StringChopper<512> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 31774) {\n            let s: StringChopper<1024> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else {\n            // max 16 bits = 65535 = 2115 31-byte slices\n            let s: StringChopper<2115> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        result\n    }\n\n    unconstrained fn find_key_in_map(self, target: Field) -> Field {\n        let mut found_index: Field = 0;\n        let mut found: bool = false;\n        for i in 0..MaxNumValues {\n            let key_hash = self.key_hashes[i];\n            if (key_hash == target) {\n                found_index = i as Field;\n                found = true;\n                break;\n            }\n        }\n        assert(found, \"find_key_in_map, key not found\");\n        found_index\n    }\n\n    /**\n     * @brief figures out if `target` exists as a key in `self.key_hashes`\n     * @details if `target` does not exist, we return the two indicies of adjacent\n     *          entries in `self.key_hashes`, lhs_index, rhs_index, where\n     *          lhs_index < key_hash < rhs_index\n     **/\n    unconstrained fn search_for_key_in_map(self, target: Field) -> KeySearchResult {\n        let mut found_index: Field = 0;\n        let mut found: bool = false;\n\n        let mut lhs_maximum: Field = 0;\n        let mut rhs_minimum: Field = -1;\n        let mut lhs_maximum_index: Field = 0;\n        let mut rhs_minimum_index: Field = 0;\n        for i in 0..MaxNumValues {\n            let key_hash = self.key_hashes[i];\n            if (key_hash == target) {\n                found_index = i as Field;\n                found = true;\n                break;\n            } else {\n                if key_hash.lt(target) & (lhs_maximum.lt(key_hash)) {\n                    lhs_maximum = key_hash;\n                    lhs_maximum_index = i as Field;\n                }\n                if (target.lt(key_hash)) & (key_hash.lt(rhs_minimum)) {\n                    rhs_minimum = key_hash;\n                    rhs_minimum_index = i as Field;\n                }\n            }\n        }\n        let target_lt_smallest_entry = target.lt(self.key_hashes[0]);\n        let target_gt_largest_entry = self.key_hashes[MaxNumValues - 1].lt(target);\n\n        let result_not_first_or_last =\n            !target_lt_smallest_entry & !target_gt_largest_entry & !found;\n\n        let mut lhs_index = result_not_first_or_last as Field * lhs_maximum_index;\n        let mut rhs_index = result_not_first_or_last as Field * rhs_minimum_index;\n\n        // if target_lt_smallest_entry, rhs_index = 0\n        // if target_gt_largest_entry, lhs_index = TranscriptEntries - 1\n        rhs_index = rhs_index * (1 - target_lt_smallest_entry as Field);\n\n        // we rely here on the fact that target_gt_largest_entry and result_not_first_or_last are mutually exclusive\n        lhs_index = lhs_index + target_gt_largest_entry as Field * (MaxNumValues as Field - 1);\n\n        // If target is FOUND, we want the following:\n        // keyhash[target_index] - 1 < hash < keyhash[target_index] + 1\n        lhs_index = lhs_index + found as Field * found_index;\n        rhs_index = rhs_index + found as Field * found_index;\n\n        KeySearchResult {\n            found,\n            target_lt_smallest_entry,\n            target_gt_largest_entry,\n            lhs_index,\n            rhs_index,\n        }\n    }\n\n    /**\n     * @brief returns a bool that describes whether a given key exists at the root of the JSON\n     **/\n    fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n        self.key_exists_impl_var(key).0\n    }\n\n    /**\n     * @brief implementation of `key_exists`. returns both a boolean and also the position in `self.json_entries_packed` of the key\n     * @description algorithm is O(1) because of the preprocessing we have done\n     *              Method computes a key hash and checks whether key hash exists in the list of sorted preprocessed key hashes\n     *              If it does *not* exist, we can find two adjacent entries in `key_hashes` where `key_hashes[i]` < target_key_hash < `key_hashes[i+1]`\n     **/\n    fn key_exists_impl<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (bool, Field) {\n        /*\n            Option A: key exists\n            Option B: key does NOT exist\n        If key does NOT exist. 3 cases\n            case 1: keyhash < first entry\n            case 2: keyhash > last entry\n            case 3: entry A > keyhash > entryB\n        */\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n\n        let HASH_MAXIMUM = 0x1000000000000000000000000000000000000000000000000000000000000 - 1;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let search_result = unsafe { self.search_for_key_in_map(keyhash) };\n        let found = search_result.found as Field;\n\n        let target_lt_smallest_entry = search_result.target_lt_smallest_entry as Field;\n        let target_gt_largest_entry = search_result.target_gt_largest_entry as Field;\n\n        assert(((search_result.lhs_index - search_result.rhs_index) * found) == 0);\n\n        // only one of \"found\", \"target_lt_smallest_entry\", \"target_gt_largest_entry\" can be true\n        let exclusion_test = found + target_gt_largest_entry + target_lt_smallest_entry;\n        assert(exclusion_test * exclusion_test == exclusion_test);\n\n        let mut lhs = self.key_hashes[search_result.lhs_index];\n        let mut rhs = self.key_hashes[search_result.rhs_index];\n\n        // case where hash < self.key_hashes[0]\n        // 0 < hash < hashes[0]\n        lhs = lhs * (1 - target_lt_smallest_entry);\n\n        // case where hash > self.key_hashes[last]\n        // largest < x < -1\n        rhs = rhs * (1 - target_gt_largest_entry) + target_gt_largest_entry * HASH_MAXIMUM;\n\n        // case where hash == self.key_hashes[found_index]\n        lhs = lhs - found;\n        rhs = rhs + found;\n\n        assert_gt_240_bit(keyhash, lhs);\n        assert_lt_240_bit(keyhash, rhs);\n\n        (search_result.found, search_result.lhs_index)\n    }\n\n    /**\n     * @brief implementation of `key_exists`. returns both a boolean and also the position in `self.json_entries_packed` of the key\n     * @description algorithm is O(1) because of the preprocessing we have done\n     *              Method computes a key hash and checks whether key hash exists in the list of sorted preprocessed key hashes\n     *              If it does *not* exist, we can find two adjacent entries in `key_hashes` where `key_hashes[i]` < target_key_hash < `key_hashes[i+1]`\n     **/\n    fn key_exists_impl_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (bool, Field) {\n        /*\n            Option A: key exists\n            Option B: key does NOT exist\n        If key does NOT exist. 3 cases\n            case 1: keyhash < first entry\n            case 2: keyhash > last entry\n            case 3: entry A > keyhash > entryB\n        */\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n\n        let HASH_MAXIMUM = 0x1000000000000000000000000000000000000000000000000000000000000 - 1;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: the assertion (search_result.lhs_index - search_result.rhs_index) * found == 0 constraints this function\n        let search_result = unsafe { self.search_for_key_in_map(keyhash) };\n        let found = search_result.found as Field;\n\n        let target_lt_smallest_entry = search_result.target_lt_smallest_entry as Field;\n        let target_gt_largest_entry = search_result.target_gt_largest_entry as Field;\n\n        assert(((search_result.lhs_index - search_result.rhs_index) * found) == 0);\n\n        // only one of \"found\", \"target_lt_smallest_entry\", \"target_gt_largest_entry\" can be true\n        let exclusion_test = found + target_gt_largest_entry + target_lt_smallest_entry;\n        assert(exclusion_test * exclusion_test == exclusion_test);\n\n        let mut lhs = self.key_hashes[search_result.lhs_index];\n        let mut rhs = self.key_hashes[search_result.rhs_index];\n\n        // case where hash < self.key_hashes[0]\n        // 0 < hash < hashes[0]\n        lhs = lhs * (1 - target_lt_smallest_entry);\n\n        // case where hash > self.key_hashes[last]\n        // largest < x < -1\n        rhs = rhs * (1 - target_gt_largest_entry) + target_gt_largest_entry * HASH_MAXIMUM;\n\n        // case where hash == self.key_hashes[found_index]\n        lhs = lhs - found;\n        rhs = rhs + found;\n\n        assert_gt_240_bit(keyhash, lhs);\n        assert_lt_240_bit(keyhash, rhs);\n\n        (search_result.found, search_result.lhs_index)\n    }\n\n    unconstrained fn __get_keys_at_root<let MaxNumKeys: u32>(\n        self,\n    ) -> BoundedVec<Field, MaxNumKeys> {\n        let mut result: BoundedVec<Field, MaxNumKeys> =\n            BoundedVec { len: 0, storage: [0; MaxNumKeys] };\n\n        let root_object: JSONEntry =\n            JSONEntry::from(self.json_entries_packed[self.root_index_in_transcript]);\n\n        let mut result_ptr = 0;\n        for i in 0..MaxNumValues {\n            let target_entry: JSONEntry = JSONEntry::from(self.unsorted_json_entries_packed[i]);\n            if (target_entry.parent_index == self.root_id) {\n                result.storage[result_ptr] = i as Field;\n                result_ptr += 1;\n            }\n        }\n        assert(result_ptr == root_object.num_children);\n        result.len = result_ptr as u32;\n        result\n    }\n    fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(\n        self,\n    ) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n        let root_object: JSONEntry =\n            JSONEntry::from(self.json_entries_packed[self.root_index_in_transcript]);\n        //@Safety: the length of the index is constrained later.\n        let key_indices: BoundedVec<Field, MaxNumKeys> = unsafe { self.__get_keys_at_root() };\n\n        assert(key_indices.len as Field == root_object.num_children);\n\n        let mut result: BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> = BoundedVec {\n            len: 0,\n            storage: [BoundedVec { len: 0, storage: [0; MaxKeyBytes] }; MaxNumKeys],\n        };\n        for i in 0..MaxNumKeys {\n            let key = KeyIndexData::from_field(self.key_data[key_indices.storage[i]]);\n            // just a workaround to the interface for `extract_string_entry`\n            let mut fake_entry = JSONEntry::new();\n            fake_entry.json_pointer = key.json_index;\n            fake_entry.json_length = key.json_length;\n            result.storage[i].storage = self.extract_string_entry(fake_entry);\n            result.storage[i].len = key.json_length as u32;\n        }\n        result.len = key_indices.len;\n        result\n    }\n}\n\n#[test]\nfn test_get_keys_at_root() {\n    let s = \"{ \\\"A\\\": 1, \\\"foo\\\": false, \\\"bar\\\": { \\\"one\\\" : \\\"A\\\", \\\"two\\\" : \\\"B\\\"}, \\\"baz\\\": \\\"12345\\\"  }\";\n\n    let json: JSON<77, 6, 30, 30, 2> = JSON::parse_json_from_string(s);\n\n    let keys: BoundedVec<BoundedVec<u8, 5>, 5> = json.get_keys_at_root();\n\n    assert(keys.len == 4);\n    assert(keys.storage[0] == BoundedVec::from_array(\"A\".as_bytes()));\n    assert(keys.storage[1] == BoundedVec::from_array(\"foo\".as_bytes()));\n    assert(keys.storage[2] == BoundedVec::from_array(\"bar\".as_bytes()));\n    assert(keys.storage[3] == BoundedVec::from_array(\"baz\".as_bytes()));\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/getters.nr"
    },
    "121": {
      "source": "struct TokenFlags {\n    create_json_entry: Field,\n    is_end_of_object_or_array: Field,\n    is_start_of_object_or_array: Field,\n    new_context: Field,\n    is_key_token: Field,\n    is_value_token: Field,\n    preserve_num_entries: Field,\n}\n\nimpl TokenFlags {\n\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 7] = f.to_be_bytes();\n        let create_json_entry = bytes[0] as Field;\n        let is_end_of_object_or_array = bytes[1] as Field;\n        let is_start_of_object_or_array = bytes[2] as Field;\n        let new_context = bytes[3] as Field;\n        let is_key_token = bytes[4] as Field;\n        let is_value_token = bytes[5] as Field;\n        let preserve_num_entries = bytes[6] as Field;\n\n        TokenFlags {\n            create_json_entry,\n            is_end_of_object_or_array,\n            is_start_of_object_or_array,\n            new_context,\n            is_key_token,\n            is_value_token,\n            preserve_num_entries,\n        }\n    }\n\n    fn from_field(f: Field) -> Self {\n        // 10 gates\n        //@Safety: check the comments below\n        let r = unsafe { TokenFlags::__from_field(f) };\n\n        // checks that the flags are binary\n        assert(r.create_json_entry * r.create_json_entry == r.create_json_entry);\n        assert(\n            r.is_end_of_object_or_array * r.is_end_of_object_or_array\n                == r.is_end_of_object_or_array,\n        );\n        assert(\n            r.is_start_of_object_or_array * r.is_start_of_object_or_array\n                == r.is_start_of_object_or_array,\n        );\n        assert(r.new_context * r.new_context == r.new_context);\n        assert(r.is_key_token * r.is_key_token == r.is_key_token);\n        assert(r.is_value_token * r.is_value_token == r.is_value_token);\n        assert(r.preserve_num_entries * r.preserve_num_entries == r.preserve_num_entries);\n\n        // asserts the relation of r and f\n        assert(r.to_field() == f);\n        r\n    }\n\n    // 4 gates\n    fn to_field(self) -> Field {\n        self.preserve_num_entries\n            + self.is_value_token * 0x100\n            + self.is_key_token * 0x10000\n            + self.new_context * 0x1000000\n            + self.is_start_of_object_or_array * 0x100000000\n            + self.is_end_of_object_or_array * 0x10000000000\n            + self.create_json_entry * 0x1000000000000\n    }\n\n    fn default() -> Self {\n        TokenFlags {\n            create_json_entry: 0,\n            is_end_of_object_or_array: 0,\n            is_start_of_object_or_array: 0,\n            new_context: 0,\n            is_key_token: 0,\n            preserve_num_entries: 0,\n            is_value_token: 0,\n        }\n    }\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/token_flags.nr"
    },
    "122": {
      "source": "use crate::_comparison_tools::lt::assert_lte_240_bit;\nuse crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::_comparison_tools::lt::lte_field_240_bit;\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::json::JSON;\nuse crate::json_entry::{JSONEntry, JSONEntryPacked};\nuse crate::json_tables::TOKEN_ENDS_OBJECT_OR_ARRAY;\nuse crate::keyhash::FieldHasher;\n\nuse dep::noir_sort;\n\nuse dep::std::hash::poseidon2;\nstruct KeyIndexData {\n    json_index: Field,\n    json_length: Field,\n    parent_id: Field,\n    array_index: Field,\n}\n\nimpl KeyIndexData {\n    fn to_field(self) -> Field {\n        self.parent_id\n            + self.json_index as Field * 0x10000\n            + self.json_length as Field * 0x100000000\n            + self.array_index * 0x1000000000000\n    }\n\n    unconstrained fn __from_field(packed: Field) -> Self {\n        let unpacked: [u8; 8] = packed.to_be_bytes();\n        let array_index: Field = unpacked[1] as Field + unpacked[0] as Field * 0x100;\n        let json_length: Field = unpacked[3] as Field + unpacked[2] as Field * 0x100;\n        let json_index: Field = unpacked[5] as Field + unpacked[4] as Field * 0x100;\n        let parent_id: Field = unpacked[7] as Field + unpacked[6] as Field * 0x100;\n        KeyIndexData { json_index, json_length, parent_id, array_index }\n    }\n\n    fn from_field(packed: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { KeyIndexData::__from_field(packed) };\n        // checks that array_index is in range\n        result.array_index.assert_max_bit_size::<16>();\n        // checks that json_length is in range\n        result.json_length.assert_max_bit_size::<16>();\n        // checks that json_index is in range\n        result.json_index.assert_max_bit_size::<16>();\n        // checks that parent_id is in range\n        result.parent_id.assert_max_bit_size::<16>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(result.to_field() == packed);\n        result\n    }\n}\n\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n    fn compute_keyhash_and_sort_json_entries(&mut self) {\n        let hasher: FieldHasher<MaxKeyFields> = FieldHasher {};\n\n        let mut hashlist: [Field; MaxNumValues] = [0; MaxNumValues];\n\n        let two_pow_200 = 0x10000000000000000000000000000000000000000000000000000;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n        for i in 0..MaxNumValues {\n            let KeyIndexData { json_index, json_length, parent_id, array_index } =\n                KeyIndexData::from_field(self.key_data[i]);\n            let hash = hasher.get_keyhash(self.json_packed, json_index, json_length);\n            hashlist[i] = hash + array_index * two_pow_200 + parent_id * two_pow_216;\n        }\n\n        hashlist[MaxNumValues - 1] = 0; // we always ensure the last (unused hopefully!) entry goes first.\n        self.json_entries_packed[MaxNumValues - 1] = JSONEntryPacked::default();\n        // when updating identity_to_json_map we are relying on the fact that we can update sorted entry 0? maybe? oof document better\n        let sort_result = noir_sort::sort_advanced(hashlist, lte_field_240_bit, assert_lte_240_bit);\n\n        let mut sorted_entries: [JSONEntryPacked; MaxNumValues] =\n            [JSONEntryPacked::default(); MaxNumValues];\n        for i in 0..MaxNumValues {\n            sorted_entries[sort_result.sort_indices[i]] = self.json_entries_packed[i];\n        }\n\n        let mut ids: [Field; MaxNumValues] = [0; MaxNumValues];\n        let mut parent_indices: [Field; MaxNumValues] = [0; MaxNumValues];\n        let mut entry_types: [Field; MaxNumValues] = [0; MaxNumValues];\n\n        for i in 0..MaxNumValues {\n            // 11.75 + 3.5 = 15.25 gates per iteration\n            let (id, parent_index, entry_type) = JSONEntry::extract_entry_type_id_and_parent_index_from_field(\n                sorted_entries[i].value,\n            );\n            ids[i] = id;\n            parent_indices[i] = parent_index;\n            entry_types[i] = entry_type;\n        }\n\n        let mut identity_to_json_map: [Field; MaxNumValues] = [0; MaxNumValues];\n        // 6.5 gates per iteration\n        for i in 0..MaxNumValues {\n            let id = ids[i];\n            let entry_type = entry_types[i];\n            // 2 gates\n            let update = TOKEN_ENDS_OBJECT_OR_ARRAY[entry_type];\n            // NOTE THIS RELIES ON MaxNumValues ACTUALLY DESCRIBING NUMMaxNumValues + 1\n            // 1 gate\n            let index = (id - (MaxNumValues as Field - 1)) * update + (MaxNumValues as Field - 1);\n            // 3.5 gates\n            identity_to_json_map[index] = i as Field;\n        }\n\n        // 13.5 gates per iteration\n        let mut parent_identity_pre = parent_indices[0];\n        for i in 1..MaxNumValues {\n            let parent_identity_post = parent_indices[i];\n            // if the parent identity changes,\n            // 3.5 gate\n            // the list is sorted according to parent_ideneity,\n            // n.b. parent_identity_post - parent_identity_pre is not neccessarily 0 or 1 (can be larger)\n            //      due to empty objects and arrays increasing identity value without creating associated child json entries\n            let new_parent = lt_field_16_bit(parent_identity_pre, parent_identity_post) as Field;\n            // let new_parent = (parent_identity_post as u32 > parent_identity_pre as u32) as Field;\n            // 3.5 gates\n            let index_of_parent = identity_to_json_map[parent_identity_post];\n            // 1 gate + 3.5 gates\n            let updated = JSONEntry::add_child_pointer_into_field(\n                sorted_entries[index_of_parent].value,\n                i as Field,\n            );\n\n            // RELIES ON THE SMALLEST ENTRY IN THE SORTED LIST BEING EMPTY\n            // 1 gate\n            let index = (index_of_parent * new_parent);\n            // 3.5 gates\n            sorted_entries[index] = JSONEntryPacked { value: updated };\n\n            parent_identity_pre = parent_identity_post;\n        }\n        sorted_entries[0] = JSONEntryPacked::default(); // TODO document why we want to always make 0 a dead entry\n        self.unsorted_json_entries_packed = self.json_entries_packed;\n        self.json_entries_packed = sorted_entries;\n        self.key_hashes = sort_result.sorted;\n        self.set_root_entry();\n    }\n\n    unconstrained fn __find_root_entry(self) -> Field {\n        let mut found_index = 0;\n        for i in 0..MaxNumValues {\n            let entry: JSONEntry = self.json_entries_packed[i].into();\n            if (entry.parent_index == 0) & (self.json_entries_packed[i].value != 0) {\n                found_index = i as Field;\n                break;\n            }\n        }\n        found_index\n    }\n\n    fn set_root_entry(&mut self) {\n        //@Safety: check the comments below\n        let root_index = unsafe { self.__find_root_entry() };\n\n        let packed_entry = self.json_entries_packed[root_index];\n        let entry: JSONEntry = packed_entry.into();\n\n        // checks that the entry is not empty\n        assert(packed_entry.value != 0);\n        // checks that the parent index is 0\n        assert(entry.parent_index == 0);\n        self.root_index_in_transcript = root_index;\n    }\n}\n\n// 68002\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/keymap.nr"
    },
    "124": {
      "source": "/*\n\nwhen iterating from 0 to N, validate i < M efficiently\nwe have an array of flags that describe whether entry is valid\nflags start at 1 and at 0 more or less\n\nwe check:\n1. flag starts at 0 or 1\n2. flag transition cannot be 0 -> 1 i.e. new_flag * (1 - old_flag) == 0\n3. flag ends at 0 or 1\n\nthe above validates that only one transition point occurs\nwe still need to test the transition point\n\ntransition happens when we get 1 -> 0 i.e. tx = i * (old_flag * (1 - new_flag))\nin this case, i == M\n\n// o * (1 - n) = o - on\n// n * (1 - o) = n - on\n// i*(o - on) * (1/i) - o + n\n*/\n\n/**\n * @brief helper method that provides an array of Field elements `flags`, where `flags[i] = i < boundary`\n * @description this method is cheaper than querying `i < boundary` for `u16` and `u32` types\n *              cost = 3 gates + 2 gates per iteration \n **/\npub fn get_validity_flags<let N: u32>(boundary: u32) -> [Field; N] {\n    //@Safety: The constraining is happening inside get_validity_flags_inner\n    let flags: [Field; N] = unsafe { __get_validity_flags(boundary) };\n    get_validity_flags_inner(boundary, flags)\n}\n\nunconstrained fn __get_validity_flags<let N: u32>(boundary: u32) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        if i < boundary {\n            result[i] = 1;\n        }\n    }\n    result\n}\n\n/**\n * @brief implementation of `get_validity_flags`\n * @description Given an array of `flags`, we apply the following checks to build an inductive proof about the validity of the flags array:\n *              1. the first element `flags[0]` is in the range [0,1]\n *              2. the last element `flags[N-1]` is in the range [0,1]\n *              3. for any two flags `old, new` where `old = flags[i-1], new = flags[i]` and `i>0, i <N`, we validate the following:\n *                  a. if `old` is 0, `new` *cannot* equal 1\n *                  b. if `old` is 1 and `new` is 0, set `transition_index = i`\n *  The value of `transition_index` will equal the value `i` where `i = boundary` (or `N` if `boundary > N`)\n *              4. we finally validate `transition_index == boundary` to prove the location where `flags[i-1] = 1` and `flags[i] = 0`\n *                 aligns with what is expected from testing `i < boundary`\n *  N.B. this method will revert if `boundary > N`\n **/\nfn get_validity_flags_inner<let N: u32>(boundary: u32, flags: [Field; N]) -> [Field; N] {\n    let initial_flag = flags[0];\n    let final_flag = flags[N - 1];\n\n    // check first and last flags are in the range [0, 1]\n    assert(initial_flag * initial_flag == initial_flag);\n    assert(final_flag * final_flag == final_flag);\n\n    let mut transition_index = 0;\n\n    for i in 1..N {\n        let old_flag = flags[i - 1];\n        let new_flag = flags[i];\n        assert(new_flag == old_flag * new_flag);\n\n        // old = a, new = b\n        let idx = (old_flag * (1 - new_flag)) * (i as Field);\n        transition_index = transition_index + idx;\n        std::as_witness(transition_index);\n    }\n\n    assert(transition_index == boundary as Field);\n    flags\n}\n\n#[test]\nfn test_get_validity_flags() {\n    for i in 0..32 {\n        let flags: [Field; 32] = get_validity_flags(i);\n        for j in 0..32 {\n            assert(flags[j] == (j < i) as Field);\n        }\n    }\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_fail() {\n    let _ = get_validity_flags(33);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_a() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 0, 0, 0, 1, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_b() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 1, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_c() {\n    let bad_flags: [Field; 10] = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test]\nfn test_get_validity_flags_good_index_d() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_e() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n    let _ = get_validity_flags_inner(11, bad_flags);\n}\n\n// this test uses bad flags but manipulates transition_index to be satisfiable\n// nevertheless test will fail because our transition test (old * new = new) will fail\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_f() {\n    let mut bad_flags: [Field; 10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    let fake_index_a = 2;\n    let fake_value_a = 100;\n\n    let fake_index_b = 4;\n    // 4 * Y = -2 * X\n    let fake_value_b = (-fake_value_a * fake_index_a) / fake_index_b;\n\n    bad_flags[fake_index_a] = fake_value_a;\n    bad_flags[fake_index_b] = fake_value_b;\n    let _ = get_validity_flags_inner(0, bad_flags);\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/_comparison_tools/bounds_checker.nr"
    },
    "125": {
      "source": "/**\n * @file helper methods that evaluate comparison operations on Field elements that are known to be of a fixed size (e.g. <2^16)\n **/\npub unconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    let r = a < b;\n    r\n}\n\npub unconstrained fn get_lte_predicate_large(x: Field, y: Field) -> bool {\n    let r = x.lt(y) | (x == y);\n    r\n}\n\npub fn lte_field_240_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lte_predicate_large(x, y) };\n    let delta = y as Field - x as Field;\n\n    // (x - y) * predicate\n    // if true, y - x >= 0\n    // if false, x <= y is wrong therefore x > y => x - y > 0 => x - y + 1 >= 0\n    // (y - x) * p + (1 - p) * (x - y + 1)\n    // (y - x) * p + x - y + 1 + p * (y - x)\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta + 1;\n    // checks that the bit length of lt_parameter is 240\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<240>();\n\n    predicate\n}\n\npub fn assert_lte_240_bit(x: Field, y: Field) {\n    let delta = y as Field - x as Field;\n\n    // (x - y) * predicate\n    // if true, y - x >= 0\n    // if false, x <= y is wrong therefore x > y => x - y > 0 => x - y + 1 >= 0\n    // (y - x) * p + (1 - p) * (x - y + 1)\n    // (y - x) * p + x - y + 1 + p * (y - x)\n    delta.assert_max_bit_size::<240>();\n}\n\npub fn lt_field_16_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lt_predicate_f(x, y) };\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    // checks that the bit length of lt_parameter is 16\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<16>();\n\n    predicate\n}\n\npub fn lt_field_8_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lt_predicate_f(x, y) };\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    // checks that the bit length of lt_parameter is 8\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<8>();\n\n    predicate\n}\n\npub fn assert_gt_240_bit(lhs: Field, rhs: Field) {\n    // lhs > rhs\n    // -> lhs - rhs > 0\n    // -> lhs - rhs - 1 >= 0\n    let diff = lhs - rhs - 1;\n    diff.assert_max_bit_size::<240>();\n}\n\npub fn assert_lt_240_bit(lhs: Field, rhs: Field) {\n    // lhs < rhs\n    // -> rhs - lhs > 0\n    // -> rhs - lhs - 1 >= 0\n    let diff = rhs - lhs - 1;\n    diff.assert_max_bit_size::<240>();\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/_comparison_tools/lt.nr"
    },
    "129": {
      "source": "use crate::_string_tools::slice_field::slice_200_bits_from_field;\nuse crate::_string_tools::slice_packed_field::slice_fields;\n\n/**\n * @brief utility struct that computes a 200-bit Poseidon hash of some bytes,\n *        when the bytes are represented as packed 31 byte Field elements\n * @note we wrap `get_keyhash` in a struct so that the KeyFields parameter can be defined ahead of time\n **/\nstruct FieldHasher<let KeyFields: u32> {}\n\nimpl<let KeyFields: u32> FieldHasher<KeyFields> {\n\n    fn get_keyhash<let NumPackedFields: u32>(\n        _: Self,\n        packed_fields: [Field; NumPackedFields],\n        body_index: Field,\n        key_length: Field,\n    ) -> Field {\n        let key_fields: [Field; KeyFields] = slice_fields(packed_fields, body_index, key_length);\n        let hashed = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, KeyFields as u32);\n        slice_200_bits_from_field(hashed)\n    }\n}\n\n/**\n * @brief utility struct that computes a 200-bit Poseidon hash of some bytes,\n *        when the bytes are represented as a substring in a byte array\n * @note we wrap `get_keyhash` in a struct so that the KeyFields parameter can be defined ahead of time\n * @note produces identical hash outputs when compared w. FieldHasher\n **/\nstruct ByteHasher<let KeyFields: u32> {}\n\nimpl<let KeyFields: u32> ByteHasher<KeyFields> {\n\n    fn get_keyhash_var<let N: u32>(\n        _: Self,\n        body_text: [u8; N],\n        body_index: u32,\n        key_length: u32,\n    ) -> Field {\n        assert(key_length < KeyFields * 31, \"key too large\");\n\n        let mut key_fields: [Field; KeyFields] = [0; KeyFields];\n\n        let mut key_idx: u32 = 0;\n        let mut limb = 0;\n\n        for j in 0..KeyFields {\n            limb = 0;\n\n            for _ in 0..31 {\n                let valid = (key_idx < key_length) as Field;\n                limb *= 0x100;\n                let byte_index = (body_index as Field + key_idx as Field) * valid;\n                let byte = body_text[byte_index] as Field;\n                limb += byte * valid;\n                key_idx += 1;\n            }\n            key_fields[j] = limb;\n        }\n\n        let hashed_full = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, KeyFields as u32);\n\n        let mut r = slice_200_bits_from_field(hashed_full);\n        r\n    }\n}\n\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/keyhash.nr"
    },
    "130": {
      "source": "/**\n * @brief contains data we need to keep track when, in `create_json_entries`, we enter or exist from an object or array\n **/\nstruct JSONContextStackEntry {\n    num_entries: Field,\n    context: Field,\n    current_key_index_and_length: Field,\n    json_index: Field,\n    current_identity: Field,\n}\nimpl JSONContextStackEntry {\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 11] = f.to_be_bytes();\n        let context = bytes[0] as Field;\n        let num_entries = bytes[1] as Field * 0x100 + bytes[2] as Field;\n        let current_key_length = bytes[3] as Field * 0x100 + bytes[4] as Field;\n        let current_key_index = bytes[5] as Field * 0x100 + bytes[6] as Field;\n        let json_index = bytes[7] as Field * 0x100 + bytes[8] as Field;\n        let current_identity = bytes[9] as Field * 0x100 + bytes[10] as Field;\n        let current_key_index_and_length = current_key_index + current_key_length * 0x10000;\n        JSONContextStackEntry {\n            num_entries,\n            context,\n            current_key_index_and_length,\n            json_index,\n            current_identity,\n        }\n    }\n\n    /**\n     * @brief we pack multiple values into a Field element in order to reduce the number of array read/write queries we need\n     *        (each query will be 3.5 gates as we read and write from/to unknown locations)\n     * @note method cost = 9.5 gates\n     **/\n    fn from_field(f: Field) -> Self {\n        //@Safety: the set of assertions done below will ensure the result is in the correct domain, and the computed result matches the input f\n        let result = unsafe { JSONContextStackEntry::__from_field(f) };\n\n        result.context.assert_max_bit_size::<8>(); // 1.25\n        result.num_entries.assert_max_bit_size::<16>(); // 1.5\n        result.current_key_index_and_length.assert_max_bit_size::<32>(); // 1.75\n        result.json_index.assert_max_bit_size::<16>(); // 1.5\n        result.current_identity.assert_max_bit_size::<16>(); // 1.5\n        assert(result.to_field() == f); // 2\n        result\n    }\n\n    /**\n     * @brief we pack multiple values into a Field element in order to reduce the number of array read/write queries we need\n     *        (each query will be 3.5 gates as we read and write from/to unknown locations)\n     * @note method cost = 2 gates\n     **/\n    fn to_field(self) -> Field {\n        self.current_identity\n            + self.json_index * 0x10000\n            + self.current_key_index_and_length * 0x100000000\n            + self.num_entries * 0x10000000000000000\n            + self.context * 0x100000000000000000000\n    }\n}\n\n/**\n * @brief describes a single array, object or value within our JSON\n **/\nstruct JSONEntry {\n    entry_type: Field, // is this an OBJECT_TOKEN, ARRAY_TOKEN, STRING_TOKEN, NUMERIC_TOKEN or LITERAL_TOKEN?\n    id: Field, // if this is an object or array, describes the unique identifier assigned to this item\n    parent_index: Field, // if parent is an object or array, describes the unique identifier assigned to our parent\n    array_pointer: Field, // if parent is an array, where in the array are we?\n    child_pointer: Field, // if this is an object or array, points to the location in `json_entries_packed` of this item's first child\n    num_children: Field, // if this is an object or array, how many child elements do we contain?\n    json_pointer: Field, // points to the json that describes the first byte of this entry\n    json_length: Field, // how many bytes in the json describes this item? (only for strings, numbers or literals)\n}\nimpl JSONEntry {\n    fn new() -> Self {\n        JSONEntry {\n            array_pointer: 0,\n            entry_type: 0,\n            child_pointer: 0,\n            num_children: 0,\n            json_pointer: 0,\n            json_length: 0,\n            parent_index: 0,\n            id: 0,\n        }\n    }\n\n    unconstrained fn __extract_parent_index_from_field(f: Field) -> (Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let low = entry.id;\n        let mid = entry.parent_index;\n        let hi = (f - low - mid * 0x10000) / 0x100000000;\n        (low, mid, hi)\n    }\n\n    fn add_child_pointer_into_field(f: Field, child_pointer: Field) -> Field {\n        f + child_pointer * 0x100000000000000000000\n    }\n    unconstrained fn __extract_entry_type_and_id_from_field(f: Field) -> (Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let id = entry.id;\n        let entry_type = entry.entry_type;\n        let mid = (f - id - entry_type * 0x100000000000000000000000000000000000000) / 0x10000;\n        (id, mid, entry_type)\n    }\n    unconstrained fn __extract_entry_type_id_and_parent_index_from_field(\n        f: Field,\n    ) -> (Field, Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let id = entry.id;\n        let entry_type = entry.entry_type;\n        let parent_index = entry.parent_index;\n        let mid = (\n            f - id - parent_index * 0x10000 - entry_type * 0x100000000000000000000000000000000000000\n        )\n            / 0x100000000;\n        (id, parent_index, mid, entry_type)\n    }\n\n    // 11.75 gates\n    fn extract_entry_type_id_and_parent_index_from_field(f: Field) -> (Field, Field, Field) {\n        //@Safety: we check all the outputs are in the correct range and we can construct the input from the outputs of the decomposition\n        let (id, parent_index, mid, entry_type) =\n            unsafe { JSONEntry::__extract_entry_type_id_and_parent_index_from_field(f) };\n        id.assert_max_bit_size::<8>(); // 1.25\n        parent_index.assert_max_bit_size::<16>(); // 1.5\n        entry_type.assert_max_bit_size::<16>(); // 1.5\n        mid.assert_max_bit_size::<136>(); // 5.5\n        assert(\n            id\n                + parent_index * 0x10000\n                + mid * 0x100000000\n                + entry_type * 0x100000000000000000000000000000000000000\n                == f,\n        );\n\n        (id, parent_index, entry_type)\n    }\n    fn extract_entry_type_and_id_from_field(f: Field) -> (Field, Field) {\n        let (id, mid, entry_type) = unsafe { JSONEntry::__extract_entry_type_and_id_from_field(f) };\n        id.assert_max_bit_size::<8>(); // 1.25\n        entry_type.assert_max_bit_size::<16>(); // 1.5\n        mid.assert_max_bit_size::<136>(); // 5.5\n        assert(id + mid * 0x10000 + entry_type * 0x100000000000000000000000000000000000000 == f);\n        (id, entry_type)\n    }\n\n    fn extract_parent_index_from_field(f: Field) -> Field {\n        //@Safety: we check all the outputs are in the correct range and we can construct the input from the outputs of the decomposition\n        let (low, parent_index, hi) = unsafe { JSONEntry::__extract_parent_index_from_field(f) };\n\n        low.assert_max_bit_size::<16>(); // 1.75\n        hi.assert_max_bit_size::<128>(); // 5.5\n        parent_index.assert_max_bit_size::<16>(); // 1.75\n        assert(low + parent_index * 0x10000 + hi * 0x100000000 == f); // 1\n        // 10 gates?\n        parent_index\n    }\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 20] = f.to_be_bytes(); // 10.5 gates\n        let entry_type = bytes[0] as Field;\n\n        let json_length = bytes[2] as Field * 0x100 + bytes[3] as Field;\n        let json_pointer = bytes[4] as Field * 0x100 + bytes[5] as Field;\n        let num_children = bytes[6] as Field * 0x100 + bytes[7] as Field;\n        let child_pointer = bytes[8] as Field * 0x100 + bytes[9] as Field;\n        let array_pointer = bytes[10] as Field * 0x100 + bytes[11] as Field;\n        let parent_index = bytes[16] as Field * 0x100 + bytes[17] as Field; // 6 gates\n        let id = bytes[18] as Field * 0x100 + bytes[19] as Field; // 6 gates\n        JSONEntry {\n            array_pointer,\n            child_pointer,\n            num_children,\n            json_pointer,\n            json_length,\n            entry_type,\n            parent_index,\n            id,\n        }\n    }\n\n    fn to_field(self) -> Field {\n        self.id\n            + self.parent_index * 0x10000\n            + self.array_pointer * 0x10000000000000000 // 2 bytes\n            + self.child_pointer * 0x100000000000000000000 // 2 bytes\n            + self.num_children * 0x1000000000000000000000000 // 2 bytes\n            + self.json_pointer * 0x10000000000000000000000000000 // 2 bytes\n            + self.json_length * 0x100000000000000000000000000000000 // 2 bytes\n            + self.entry_type * 0x100000000000000000000000000000000000000 // 1 byte\n        // 4 gates. oof\n    }\n    fn from_field(f: Field) -> Self {\n        //@Safety: we check all the outputs are in the correct range and match the input field value\n        let result = unsafe { JSONEntry::__from_field(f) };\n        result.entry_type.assert_max_bit_size::<8>();\n        result.json_length.assert_max_bit_size::<16>();\n        result.json_pointer.assert_max_bit_size::<16>();\n        result.num_children.assert_max_bit_size::<16>();\n        result.child_pointer.assert_max_bit_size::<16>();\n        result.array_pointer.assert_max_bit_size::<16>();\n        result.parent_index.assert_max_bit_size::<16>();\n        result.id.assert_max_bit_size::<16>();\n        assert(result.to_field() == f);\n        result\n    }\n}\n\nimpl std::convert::From<JSONEntryPacked> for JSONEntry {\n    fn from(JSONEntryPacked { value: f }: JSONEntryPacked) -> Self {\n        //@Safety: we check all the outputs are in the correct range and match the input field value\n        let result = unsafe { JSONEntry::__from_field(f) };\n        result.entry_type.assert_max_bit_size::<8>();\n        result.json_length.assert_max_bit_size::<16>();\n        result.json_pointer.assert_max_bit_size::<16>();\n        result.num_children.assert_max_bit_size::<16>();\n        result.child_pointer.assert_max_bit_size::<16>();\n        result.array_pointer.assert_max_bit_size::<16>();\n        result.parent_index.assert_max_bit_size::<16>();\n        result.id.assert_max_bit_size::<16>();\n        assert(result.to_field() == f);\n        result\n    }\n}\n\nimpl std::cmp::Eq for JSONEntry {\n    // N.B. used for testing\n    fn eq(self, other: Self) -> bool {\n        let array_ptr = (self.array_pointer == other.array_pointer);\n        let entry = self.entry_type == other.entry_type;\n        let child = (self.child_pointer == other.child_pointer);\n        let num_children = (self.num_children == other.num_children);\n        let json_pointer = (self.json_pointer == other.json_pointer);\n        let json_length = (self.json_length == other.json_length);\n        array_ptr | entry | child | num_children | json_pointer | json_length\n    }\n}\n\n/**\n * @brief describes a JSONEntry object's data, but packed into a single field element.\n * @description We do this to minimize the number of array lookups we perform\n **/\nstruct JSONEntryPacked {\n    value: Field,\n}\n\nimpl std::cmp::Eq for JSONEntryPacked {\n    fn eq(self, other: Self) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl std::default::Default for JSONEntryPacked {\n    fn default() -> Self {\n        JSONEntryPacked { value: 0 }\n    }\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/json_entry.nr"
    },
    "131": {
      "source": "use crate::_comparison_tools::bounds_checker;\nuse crate::_comparison_tools::bounds_checker::get_validity_flags;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER, SINGLE_VALUE_LAYER};\nuse crate::enums::ScanMode::{GRAMMAR_SCAN, LITERAL_SCAN, NUMERIC_SCAN, STRING_SCAN};\nuse crate::enums::Token::{\n    BEGIN_ARRAY_TOKEN, BEGIN_OBJECT_TOKEN, END_ARRAY_TOKEN, END_OBJECT_TOKEN, KEY_SEPARATOR_TOKEN,\n    KEY_TOKEN, LITERAL_TOKEN, NUM_TOKENS, NUMERIC_TOKEN, STRING_TOKEN, VALUE_SEPARATOR_TOKEN,\n};\nuse crate::get_literal::JSONLiteral;\nuse crate::json_entry::{JSONContextStackEntry, JSONEntry, JSONEntryPacked};\nuse crate::json_tables::{\n    JSON_CAPTURE_TABLE, PROCESS_RAW_TRANSCRIPT_TABLE, TOKEN_FLAGS_TABLE,\n    TOKEN_IS_ARRAY_OBJECT_OR_VALUE, TOKEN_VALIDATION_TABLE,\n};\nuse crate::token_flags::TokenFlags;\nuse crate::transcript_entry::{\n    PostProcessScanData, RawTranscriptEntry, ScanData, TranscriptEntry, ValidationFlags,\n};\n\n/**\n * @brief records a value in a json blob\n **/\npub struct JSONValue<let MaxLength: u32> {\n    value: BoundedVec<u8, MaxLength>, // raw bytes that constitute the json value entry\n    value_type: Field, // either STRING_TOKEN, NUMERIC_TOKEN or LITERAL_TOKEN\n}\n\nimpl<let MaxLength: u32> JSONValue<MaxLength> {\n    fn is_string(self) -> bool {\n        self.value_type == STRING_TOKEN\n    }\n    fn is_number(self) -> bool {\n        self.value_type == NUMERIC_TOKEN\n    }\n    fn is_literal(self) -> bool {\n        self.value_type == LITERAL_TOKEN\n    }\n}\n\n/**\n * @brief It's a JSON struct! Contains the raw and processed information required to extract data from a json blob\n * @description The \"root\" of the JSON refers to the parent object or array (or a value if the json is just a single value e.g. text = \"\\\"foo\\\": \\\"bar\\\"\")\n * @note text that describes just a single JSON value is not yet fully supported. Only use this library for processing objects or arrays for now\n **/\npub struct JSON<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> {\n    json: [u8; NumBytes], // the raw json bytes\n    json_packed: [Field; NumPackedFields], // raw bytes, but packed into 31-byte Field elements\n    raw_transcript: [Field; MaxNumTokens], // transcript of json tokens after basic processing\n    transcript: [Field; MaxNumTokens], // complete transcript of json tokens\n    transcript_length: u32, // how big is the transcript?\n    key_data: [Field; MaxNumValues], // description of each key, packed into a Field element\n    key_hashes: [Field; MaxNumValues], // a sorted list of key hashes\n    unsorted_json_entries_packed: [JSONEntryPacked; MaxNumValues], // a list of all the processed json values (objects, arrays, numerics, literals, strings)\n    json_entries_packed: [JSONEntryPacked; MaxNumValues], // a sorted list of all the processed json values (objects, arrays, numerics, literals, strings)\n    layer_type_of_root: Field, // is the root an OBJECT_LAYER, ARRAY_LAYER or SINGLE_VALUE_LAYER?\n    root_id: Field, // the unique identifier of the root (if an object or array)\n    root_index_in_transcript: Field, // location in json_entries_packed of the root\n}\n\n/**\n * @brief are two JSON objects equal?\n * @note VERY EXPENSIVE! Currently only used in tests\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> std::cmp::Eq for JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n    fn eq(self, other: Self) -> bool {\n        (self.json == other.json)\n            & (self.raw_transcript == other.raw_transcript)\n            & (self.transcript == other.transcript)\n            & (self.transcript_length == other.transcript_length)\n            & (self.key_data == other.key_data)\n            & (self.key_hashes == other.key_hashes)\n            & (self.layer_type_of_root == other.layer_type_of_root)\n            & (self.root_id == other.root_id)\n            & (self.root_index_in_transcript == other.root_index_in_transcript)\n            & (self.json_entries_packed == other.json_entries_packed)\n            & (self.json_packed == other.json_packed)\n    }\n}\n\n// TODO: casting entry_ptr to u16 is kind of expensive when generating witnesses, can we fix?\nunconstrained fn __check_entry_ptr_bounds(entry_ptr: Field, max: u32) {\n    // n.b. even though this assert is in an unconstrained function, an out of bounds error will be triggered when writing into self.key_data[entry_ptr]\n    assert(entry_ptr as u32 < max - 1, \"create_json_entries: MaxNumValues limit exceeded!\");\n}\n\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief pack the json bytes into Field elements, where each Field element represents 31 bytes\n     * @description we do this because we need to extract substrings from the json bytes, where the position and length of the substring are witness values.\n     *              Doing this on packed Field elements using `slice_string` is cheaper than the direct method of iterating byte-by-byte.\n     *              Also, by extracting data at unknown locations exclusively from the packed json, we do not need to represent the raw bytes `self.json` as a ROM table\n     *              (which would have an expensive initialization cost of 2*NumBytes gates)\n     **/\n    fn compute_json_packed(&mut self) {\n        let NumWholeLimbs = NumBytes / 31;\n        for i in 0..NumWholeLimbs {\n            let mut limb: Field = 0;\n            for j in 0..31 {\n                limb *= 0x100;\n                limb += self.json[i * 31 + j] as Field;\n            }\n            std::as_witness(limb);\n            self.json_packed[i] = limb;\n        }\n        let NumRemainingBytes = NumBytes - NumWholeLimbs * 31;\n        let mut limb: Field = 0;\n        for j in 0..NumRemainingBytes {\n            limb *= 0x100;\n            limb += self.json[NumWholeLimbs * 31 + j] as Field;\n        }\n        for _ in NumRemainingBytes..31 {\n            limb *= 0x100;\n        }\n        std::as_witness(limb);\n        self.json_packed[NumWholeLimbs + (NumRemainingBytes == 0) as u32] = limb;\n    }\n\n    // TODO: when impl is more mature, merge this into create_json_entries\n    fn keyswap(&mut self) {\n        // TODO: this won't work if 1st entry is a key!\n        let mut current = TranscriptEntry::from_field(self.transcript[0]);\n        let mut next: TranscriptEntry = TranscriptEntry::new();\n\n        for i in 0..MaxNumTokens - 1 {\n            next = TranscriptEntry::from_field(self.transcript[i + 1]);\n\n            let next_is_key = (next.token == KEY_SEPARATOR_TOKEN) as Field;\n\n            let valid_token = TOKEN_IS_ARRAY_OBJECT_OR_VALUE[current.token];\n            assert(\n                (valid_token * next_is_key) + (1 - next_is_key) == 1,\n                \"Cannot find key/value straddling KEY_DELIMITER_TOKEN\",\n            );\n\n            let old_transcript = self.transcript[i];\n            let new_transcript = TranscriptEntry::to_field(\n                TranscriptEntry { token: KEY_TOKEN, index: current.index, length: current.length },\n            );\n            let updated_transcript =\n                (new_transcript - old_transcript) * next_is_key + old_transcript;\n            self.transcript[i] = updated_transcript;\n\n            current = next;\n        }\n    }\n\n    /**\n     * @brief Once we have processed the json into a transcript of tokens, validate these tokens represent valid JSON!\n     * @description To avoid a lot of painful if/else statements, we construct a state transition function out of the lookup table TOKEN_VALIDATION_TABLE\n     *              The inputs to TOKEN_VALIDATION_TABLE are:\n     *                  1. The current token (at some position `i` i.e. `self.transcript[i])\n     *                  2. The previous token (`self.transcript[i-1]`)\n     *                  3. The context of the previous token (i.e. is it within an object or an array?)\n     *              The lookup table maps these inputs into the following outputs:\n     *                  1. Are we moving into a new context? i.e. is current token a `{` or `[` character?\n     *                  2. If so, what context are we moving into? (`OBJECT_LAYER` or `ARRAY_LAYER`)\n     *                  3. Are we exiting from the current context? i.e. is the current token a `}` or `]` character?\n     *                  4. Have we entered an error state? e.g. a `[` token followed by a `,` token would be invalid JSON\n     * \n     * @note To shave some gates, we represent the error state in a nonstandard way.\n     *       If we have entered an error state, the value of `push_layer` will be 0x1000000\n     *       This will then update `depth` to a value that exceeds the size of `parent_layer_stack` (32),\n     *       which will trigger an out-of-bounds array access, which creates unsatisfiable constraints\n     **/\n    fn validate_tokens(self, tokens: [Field; MaxNumTokens]) {\n        let mut current_layer = self.layer_type_of_root;\n        let mut parent_layer_stack: [Field; 32] = [0; 32];\n        let mut depth = 0;\n        let mut previous_token = tokens[0];\n        let NN = NUM_TOKENS * NUM_TOKENS;\n\n        let is_object = previous_token == BEGIN_OBJECT_TOKEN;\n        let is_array = previous_token == BEGIN_ARRAY_TOKEN;\n\n        depth = is_object as Field + is_array as Field;\n\n        // todo is this correct?\n        parent_layer_stack[0] = is_object as Field * OBJECT_LAYER + is_array as Field * ARRAY_LAYER;\n        assert(\n            TOKEN_IS_ARRAY_OBJECT_OR_VALUE[previous_token] == 1,\n            \"first json token does not describe an object, array or key\",\n        );\n\n        // 17 gates per iteration?\n        for i in 1..MaxNumTokens {\n            // 0 gates\n            let current_token = tokens[i];\n\n            // 1 gate\n            let index = current_layer * (NN as Field)\n                + previous_token * (NUM_TOKENS as Field)\n                + current_token;\n\n            // 5 gates\n            let ValidationFlags { push_layer, push_layer_type_of_root, pop_layer } =\n                ValidationFlags::from_field(TOKEN_VALIDATION_TABLE[index]);\n\n            // 3.5 gates\n            parent_layer_stack[depth] = current_layer;\n\n            // 1 gate\n            // we encode an error flag into `push_layer` by making its value such that `depth` will exceed the size of `parent_layer_stack`\n            depth = depth + push_layer - pop_layer;\n            std::as_witness(depth);\n\n            // 6.5 gates\n            let parent_layer = parent_layer_stack[depth];\n            let mut updated_layer = (1 - pop_layer - push_layer);\n            std::as_witness(updated_layer);\n            updated_layer = updated_layer * current_layer + push_layer_type_of_root;\n            std::as_witness(updated_layer);\n            updated_layer = updated_layer + parent_layer * pop_layer;\n            std::as_witness(updated_layer);\n            current_layer = updated_layer;\n\n            previous_token = current_token;\n        }\n        assert(depth == 0, \"validate_tokens: unclosed objects or arrays\");\n    }\n\n    /**\n     * @brief given a processed transcript of json tokens, compute a list of json entries that describes the values within the JSON blob\n     * @details a 'value' here is either an Object, Array, String, Numeric or Literal.\n     *          e.g. \"[ 1, 2, 3 ]\" contains 4 values (3 Numeric types and the Array that contains them)\n     *\n     *          To avoid branches and if statements, we construct a state transition function out of the lookup table TOKEN_FLAGS_TABLE\n     *          This table takes as an input the following:\n     *              1. The token value of an element in the transcript\n     *              2. The layer type the previous token is located in (i.e. are we in an array or an object?)\n     *          The table outputs the following data:\n     *              1. Should we create a new json entry? (i.e. is the token a STRING_TOKEN, LITERAL_TOKEN, NUMERIC_TOKEN, END_ARRAY_TOKEN, END_OBJECT_TOKEN)\n     *              2. Is the token `}` or `]`?\n     *              3. Is the token `{` or `[`?\n     *              4. Given the current layer type and the token being queried, what should the new layer type be?\n     *              5. Is the token `KEY_TOKEN`?\n     *              6. Is the token a `STRING_TOKEN`, `NUMERIC_TOKEN` OR `VALUE_TOKEN`?\n     *              7. Is the token one that we should skip over? `,` or `:`\n     **/\n    fn create_json_entries(&mut self) {\n        let mut entry_ptr = 0;\n        let mut depth: Field = 1;\n        let mut num_entries_at_current_depth: Field = 0;\n        let mut next_identity_value: Field = 1;\n        let mut current_identity_value: Field = 0;\n        let mut context = OBJECT_LAYER;\n\n        let mut current_key_index_and_length: Field = 0;\n\n        let mut parent_context_stack: [Field; 32] = [0; 32];\n        let mut tokens: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        //  maybe 71.75 gates per iteration\n        for i in 0..MaxNumTokens {\n            //@Safety: check the comments below\n            unsafe { __check_entry_ptr_bounds(entry_ptr, MaxNumValues) };\n            // 5.25 gates\n            let TranscriptEntry { token, index, length } =\n                TranscriptEntry::from_field(self.transcript[i]);\n\n            tokens[i] = token;\n            // 13 gates\n            let TokenFlags {\n    create_json_entry,\n    is_end_of_object_or_array,\n    is_start_of_object_or_array,\n    new_context,\n    is_key_token: update_key,\n    is_value_token,\n    preserve_num_entries,} =\n                TokenFlags::from_field(TOKEN_FLAGS_TABLE[token + context * (NUM_TOKENS as Field)]);\n\n            // 2 gates\n            let diff = (index + length * 0x10000) - current_key_index_and_length;\n            std::as_witness(diff);\n            current_key_index_and_length = diff * update_key + current_key_index_and_length;\n            std::as_witness(current_key_index_and_length);\n\n            // 2 gates\n            let new_context_stack_entry = JSONContextStackEntry::to_field(\n                JSONContextStackEntry {\n                    num_entries: num_entries_at_current_depth,\n                    context,\n                    current_key_index_and_length,\n                    json_index: index,\n                    current_identity: current_identity_value,\n                },\n            );\n            // subtotal 22.25\n            // 1 gate\n            let depth_index: Field = (depth - 1);\n            // 3.5 gates\n            let previous_stack_entry_packed = parent_context_stack[depth_index];\n\n            // 9.5 gates\n            let previous_stack_entry =\n                JSONContextStackEntry::from_field(previous_stack_entry_packed);\n\n            let object_or_array_entry: JSONEntry = JSONEntry {\n                array_pointer: previous_stack_entry.num_entries,\n                entry_type: token,\n                child_pointer: 0,\n                num_children: num_entries_at_current_depth,\n                json_pointer: previous_stack_entry.json_index,\n                json_length: length,\n                parent_index: previous_stack_entry.current_identity,\n                id: current_identity_value,\n            };\n            // 0\n            let value_entry: JSONEntry = JSONEntry {\n                array_pointer: num_entries_at_current_depth,\n                entry_type: token,\n                child_pointer: 0,\n                num_children: 0,\n                json_pointer: index,\n                json_length: length,\n                parent_index: current_identity_value,\n                id: 0,\n            };\n\n            // 3 gates\n            let object_or_array_entry_packed = object_or_array_entry.to_field();\n            // 2 gates\n            let value_entry_packed = value_entry.to_field();\n\n            // 2 gates\n            let diff = object_or_array_entry_packed - value_entry_packed;\n            std::as_witness(diff);\n            let new_entry = diff * is_end_of_object_or_array + value_entry_packed;\n            std::as_witness(new_entry);\n\n            // 3 gates\n            // subtotal 24 + 22.25 = 46.25\n            let old = current_identity_value;\n            current_identity_value = (next_identity_value * is_start_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value\n                + (previous_stack_entry.current_identity * is_end_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value + old * preserve_num_entries;\n            std::as_witness(current_identity_value);\n\n            // 2 gates\n            num_entries_at_current_depth =\n                num_entries_at_current_depth * preserve_num_entries + is_value_token;\n            std::as_witness(num_entries_at_current_depth);\n            num_entries_at_current_depth = num_entries_at_current_depth\n                + (previous_stack_entry.num_entries + 1) * is_end_of_object_or_array;\n            std::as_witness(num_entries_at_current_depth);\n\n            // 1 gate\n            // if `is_end_of_object_or_array == 1`, `new_context = 0` so we can do something cheaper than a conditional select:\n            context = previous_stack_entry.context * is_end_of_object_or_array + new_context;\n            std::as_witness(context);\n            // 3 gates\n            let common_term = current_identity_value\n                + context * (num_entries_at_current_depth - 1) * 0x1000000000000;\n            std::as_witness(common_term);\n            let mut new_key_data =\n                current_key_index_and_length * is_value_token * 0x10000 + common_term;\n            std::as_witness(new_key_data);\n            new_key_data = new_key_data\n                + previous_stack_entry.current_key_index_and_length\n                    * is_end_of_object_or_array\n                    * 0x10000;\n            std::as_witness(new_key_data);\n\n            // 3.5 gates\n            self.key_data[entry_ptr] = new_key_data * create_json_entry;\n\n            // 3.5 gates\n            parent_context_stack[depth] = new_context_stack_entry;\n\n            // 4.5 gates\n            self.json_entries_packed[entry_ptr] =\n                JSONEntryPacked { value: new_entry * create_json_entry };\n\n            // 1 gate\n            next_identity_value = next_identity_value + is_start_of_object_or_array;\n            std::as_witness(next_identity_value);\n\n            // 1 gate\n            depth = depth + is_start_of_object_or_array - is_end_of_object_or_array;\n\n            // 1 gate\n            // 2105 + 46.25\n            // subtotal 66.75?\n            entry_ptr += create_json_entry;\n            std::as_witness(entry_ptr);\n        }\n        self.validate_tokens(tokens);\n    }\n\n    /**\n     * @brief Perform the 1st transcript processing step as an unconstrained function\n     *        We will validate this transcript is correct via a constrained function\n     *        This is a bit cheaper than doing everything in a constrained function,\n     *        because we can use ROM arrays instead of RAM arrays\n     *        (i.e. we're only reading from our arrays, we don't write to them in constrained functions)\n     **/\n    unconstrained fn __build_transcript(self) -> [Field; MaxNumTokens] {\n        let mut raw_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: u32 = 0;\n        let mut scan_mode = GRAMMAR_SCAN as Field;\n        let mut length: Field = 0;\n        let mut previous_was_potential_escape_sequence = 0;\n        for i in 0..NumBytes {\n            // while this assert is in an unconstrained function, the out of bounds accesss `raw_transcript[transcript_ptr]` in build_transcript also generates failing constraints\n            assert(transcript_ptr < MaxNumTokens, \"build_transcript: MaxNumTokens limit exceeded!\");\n            let ascii = self.json[i];\n\n            let encoded_ascii =\n                previous_was_potential_escape_sequence * 1024 + scan_mode * 256 + ascii as Field;\n            let ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence } =\n                ScanData::from_field(JSON_CAPTURE_TABLE[encoded_ascii]);\n            let mut push_transcript = push_transcript;\n            let mut scan_token = scan_token;\n            let mut increase_length = increase_length;\n\n            let new_entry = RawTranscriptEntry::to_field(\n                RawTranscriptEntry { encoded_ascii, index: i as Field - length, length },\n            );\n\n            raw_transcript[transcript_ptr] = new_entry;\n            length = length * (1 - push_transcript) + increase_length;\n            transcript_ptr += (push_transcript as bool) as u32;\n\n            previous_was_potential_escape_sequence = is_potential_escape_sequence;\n\n            scan_mode = scan_token;\n        }\n\n        // ensure an error isn't hiding in the last scanned token\n        scan_mode.assert_max_bit_size::<2>();\n        raw_transcript\n    }\n\n    /**\n     * @brief Construct a token transcript by iterating through self.json and using a lookup table `JSON_CAPTURE_TABLE` to define a state transition function\n     * @details JSON_CAPTURE_TABLE takes the following as input:\n     *          1. the ascii byte at the current location in the json\n     *          2. the current scan mode (are we searching for grammar, strings, numbers or literals?)\n     *          3. could this byte potentially be an escape sequence? (i.e. the previous byte was a backslash character \"\\\" and scan_mode == STRING_SCAN)\n     *          The table outputs the following flags:\n     *          1. what token have we scanned? (listed in enums::Token)\n     *          2. should we push this token to the transcript (no push if token == NO_TOKEN)\n     *          3. should we increase the length of the current entry we're evaluating?\n     *              (i.e. if token == STRING_TOKEN and scan_mode == STRING_SCAN, then increase the length because we're in the process of scanning a string)\n     *          4. is this scanned ascii character a potential escape sequence? i.e. scan_mode == STRING_SCAN and ascii = \"\\\"\n     *          5. have we entered an error state? (i.e. invalid grammar e.g. \":\" is followed by \"}\")\n     *\n     * NOTE: we represent error states in a nonstandard way to reduce gate count. Instead of handling an error flag,\n     *       an error state will increase the value of `scan_token` by 0x100000000. This will cause the next access into `JSON_CAPTURE_TABLE` to trigger an out of bounds error\n     *\n     * NOTE: the scanned transcript will be missing some edge cases that are caught via `swap_keys` and `capture_missing_tokens`:\n     *          1. If the scan mode is NUMERIC_SCAN or LITERAL_SCAN and the next character is a \",\" or \"}\" or \"]\",\n     *             we will push a NUMERIC_TOKEN or LITERAL_TOKEN into the transcript but we will MISS the VALUE_SEPARATOR_TOKEN, END_OBJECT_TOKEN or END_ARRAY_TOKEN\n     *             (accomodating this edge case requires conditionally pushing two transcript entries per iteration, so we do this in a separate step where we iterate over the transcript and not the json bytes)\n     *          2. We can't yet tell if an entry is a KEY_TOKEN or a STRING_TOKEN. All keys are represented as STRING_TOKEN. This gets fixed after `swap_keys` is evaluated\n     **/\n    fn build_transcript(self) -> Self {\n        let mut raw_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: Field = 0;\n        let mut scan_mode = GRAMMAR_SCAN;\n        let mut length: Field = 0;\n\n        //@Safety: check the comments below\n        let raw_transcript = unsafe { self.__build_transcript() };\n\n        // 14 gates per iteration, plus fixed cost for initing 2,048 size lookup table (4,096 gates)\n        let mut previous_was_potential_escape_sequence = 0;\n        for i in 0..NumBytes {\n            let ascii = self.json[i];\n\n            // 1 gate\n            let encoded_ascii =\n                previous_was_potential_escape_sequence * 1024 + scan_mode * 256 + ascii as Field;\n            std::as_witness(encoded_ascii);\n\n            // 2 gates\n            let capture_flags = JSON_CAPTURE_TABLE[encoded_ascii];\n            // 5 gates\n            let ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence } =\n                ScanData::from_field(capture_flags);\n\n            // 2 gates\n            let raw = raw_transcript[transcript_ptr];\n\n            // 1 gate\n            let diff = raw\n                - RawTranscriptEntry::to_field(\n                    RawTranscriptEntry { encoded_ascii, index: i as Field - length, length },\n                );\n            std::as_witness(diff);\n            // 1 gate\n            assert(diff * push_transcript == 0);\n\n            // 1 gate\n            length = length * (1 - push_transcript) + increase_length;\n            std::as_witness(length);\n\n            // 1 gate\n            transcript_ptr += push_transcript;\n\n            previous_was_potential_escape_sequence = is_potential_escape_sequence;\n            scan_mode = scan_token;\n        }\n\n        // we encode error flag into the scan_token value, which must be less than 4\n        // the lookup into JSON_CAPTURE_TABLE applies an implicit 2-bit range check on `scan_token`\n        // however this does not get triggered if the final byte scanned produces an error state\n        length.assert_max_bit_size::<2>();\n\n        JSON {\n            json: self.json,\n            raw_transcript,\n            transcript: self.transcript,\n            transcript_length: transcript_ptr as u32,\n            key_data: self.key_data,\n            key_hashes: self.key_hashes,\n            layer_type_of_root: self.layer_type_of_root,\n            root_id: 1,\n            root_index_in_transcript: 0,\n            json_entries_packed: self.json_entries_packed,\n            unsorted_json_entries_packed: self.unsorted_json_entries_packed,\n            json_packed: self.json_packed,\n        }\n    }\n\n    /**\n     * @brief We compute the output of `capture_missing_tokens` via an unconstrained function, then validate the result is correct.\n     *        Saves some gates for same reason as in __build_transcript\n     **/\n    unconstrained fn __capture_missing_tokens(self) -> [Field; MaxNumTokens] {\n        let mut updated_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: u32 = 0;\n        // TODO: do we need a null transcript value?!?!\n        for i in 0..MaxNumTokens {\n            let RawTranscriptEntry { encoded_ascii, index, length } =\n                RawTranscriptEntry::from_field(self.raw_transcript[i]);\n\n            let PostProcessScanData { token, new_grammar, scan_token } =\n                PostProcessScanData::from_field(PROCESS_RAW_TRANSCRIPT_TABLE[encoded_ascii]);\n\n            let entry = TranscriptEntry::to_field(TranscriptEntry { token, index, length });\n            updated_transcript[transcript_ptr] = entry;\n\n            let index_valid: u32 = (i < self.transcript_length) as u32;\n            transcript_ptr += index_valid;\n\n            let index_of_possible_grammar = (index + length);\n            let new_entry =\n                TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n\n            let update = new_grammar * index_valid as Field;\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            assert(\n                transcript_ptr < MaxNumTokens,\n                \"capture_missing_tokens: MaxNumTokens limit exceeded!\",\n            );\n            updated_transcript[transcript_ptr] = new_transcript;\n            transcript_ptr += update as bool as u32;\n        }\n        updated_transcript\n    }\n\n    /**\n     * @brief Check for missing tokens that we could have missed in `build_transcript`\n     * @details If we had a json string where a NUMERIC_TOKEN or LITERAL_TOKEN is directly succeeded by a VALUE_SEPARATOR_TOKEN, END_OBJECT_TOKEN, END_ARRAY_TOKEN,\n     *          we will have missed the latter token.\n     *          We pick these up via the lookup table PROCESS_RAW_TRANSCRIPT_TABLE\n     **/\n    fn capture_missing_tokens(&mut self) {\n        let mut transcript_ptr: Field = 0;\n        // hmm probably need a null transcript value?!?!\n        //@Safety: check the comments below\n        let updated_transcript = unsafe { self.__capture_missing_tokens() };\n        // 26? gates per iteration\n        let range_valid: [Field; MaxNumTokens] = get_validity_flags(self.transcript_length);\n        for i in 0..MaxNumTokens {\n            // 5.25 gates\n            let RawTranscriptEntry { encoded_ascii, index, length } =\n                RawTranscriptEntry::from_field(self.raw_transcript[i]);\n            // 6.75 gates\n            let PostProcessScanData { token, new_grammar, scan_token } =\n                PostProcessScanData::from_field(PROCESS_RAW_TRANSCRIPT_TABLE[encoded_ascii]);\n            // 2 gates\n            let index_valid: Field = range_valid[i];\n            // 1 gate\n            let entry = TranscriptEntry::to_field(TranscriptEntry { token, index, length });\n            // 2 gates\n            let diff = updated_transcript[transcript_ptr] - entry;\n            std::as_witness(diff);\n            assert(diff * index_valid == 0);\n            // 1 gate\n            transcript_ptr += index_valid;\n            // 0 gate (merged into TranscriptEntry::to_field)\n            let index_of_possible_grammar = (index + length);\n            // 0 gates\n            let new_entry =\n                TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n            // 2 gates\n            let update = new_grammar as Field * index_valid;\n            std::as_witness(update);\n            // 1 gate\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            // 4 gates\n            let diff = updated_transcript[transcript_ptr] - new_transcript;\n            std::as_witness(diff);\n            assert(diff * update == 0);\n            // 1 gate\n            transcript_ptr += update;\n        }\n        self.transcript = updated_transcript;\n\n        // TODO we could make this more efficient...probably not a big deal though\n        let first = TranscriptEntry::from_field(self.transcript[0]);\n        if (first.token == BEGIN_OBJECT_TOKEN) {\n            self.layer_type_of_root = OBJECT_LAYER;\n        } else if (first.token == BEGIN_ARRAY_TOKEN) {\n            self.layer_type_of_root = ARRAY_LAYER;\n        } else if (first.token == STRING_TOKEN) {\n            self.layer_type_of_root = SINGLE_VALUE_LAYER as Field;\n        }\n    }\n\n    fn parse_json<let StringBytes: u32>(stringbytes: [u8; StringBytes]) -> Self {\n        assert(StringBytes <= NumBytes, \"json length exceeds NumBytes!\");\n        let mut text: [u8; NumBytes] = [0; NumBytes];\n        for i in 0..StringBytes {\n            text[i] = stringbytes[i];\n        }\n        for i in StringBytes..NumBytes {\n            text[i] = 32; // whitespace character\n        }\n        let mut json = JSON {\n            json: text,\n            raw_transcript: [0; MaxNumTokens],\n            transcript: [0; MaxNumTokens],\n            transcript_length: 0,\n            key_data: [0; MaxNumValues],\n            key_hashes: [0; MaxNumValues],\n            layer_type_of_root: 0,\n            root_id: 1,\n            root_index_in_transcript: 0,\n            json_entries_packed: [JSONEntryPacked::default(); MaxNumValues],\n            unsorted_json_entries_packed: [JSONEntryPacked::default(); MaxNumValues],\n            json_packed: [0; NumPackedFields],\n        };\n\n        json = json.build_transcript();\n        json.capture_missing_tokens();\n        json.keyswap();\n        json.compute_json_packed();\n        json.create_json_entries();\n\n        json.compute_keyhash_and_sort_json_entries();\n\n        json\n    }\n\n    fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n        JSON::parse_json(s.as_bytes())\n    }\n}\n\n// TODO: our capture tables are not correctly set up to process a JSON blob that does not begin with an object or array\n// #[test]\n// fn test_single_value() {\n//     let text = \"100\";\n//     let mut json: JSON<3, 10, 20, 20> = JSON::parse_json_from_string(text);\n//\n//     assert(json.get_length() == 0);\n//     assert(json.get_array_element_as_number(0) == 100);\n// }\n\n#[test]\nfn test_numbers() {\n    let text = \"{ \\\"a\\\": 9, \\\"b\\\": 99, \\\"c\\\": 999, \\\"d\\\": 9999, \\\"e\\\": 99999, \\\"f\\\": 999999, \\\"g\\\": 9999999, \\\"h\\\": 99999999, \\\"i\\\": 999999999, \\\"j\\\": 9999999999, \\\"k\\\": 99999999999, \\\"l\\\": 999999999999, \\\"m\\\": 9999999999999, \\\"n\\\": 99999999999999, \\\"o\\\": 999999999999999, \\\"p\\\": 999999999999999,\\\"q\\\": 9999999999999999, \\\"r\\\": 99999999999999999, \\\"s\\\": 999999999999999999, \\\"t\\\": 9999999999999999999, \\\"u\\\": 18446744073709551615}\";\n    let mut json: JSON<372, 16, 100, 24, 2> = JSON::parse_json_from_string(text);\n\n    let a = json.get_number_unchecked(\"a\".as_bytes());\n    let b = json.get_number_unchecked(\"b\".as_bytes());\n    let c = json.get_number_unchecked(\"c\".as_bytes());\n    let d = json.get_number_unchecked(\"d\".as_bytes());\n    let e = json.get_number_unchecked(\"e\".as_bytes());\n    let f = json.get_number_unchecked_var(BoundedVec { storage: \"ftrololol\".as_bytes(), len: 1 });\n    let g = json.get_number(\"g\".as_bytes()).unwrap();\n    let h = json.get_number_var(BoundedVec { storage: \"h\".as_bytes(), len: 1 }).unwrap();\n    let i = json.get_number_unchecked(\"i\".as_bytes());\n    let j = json.get_number_unchecked(\"j\".as_bytes());\n    let k = json.get_number_unchecked(\"k\".as_bytes());\n    let l = json.get_number_unchecked(\"l\".as_bytes());\n    let m = json.get_number_unchecked(\"m\".as_bytes());\n    let n = json.get_number_unchecked(\"n\".as_bytes());\n    let o = json.get_number_unchecked(\"o\".as_bytes());\n    let p = json.get_number_unchecked(\"p\".as_bytes());\n    let q = json.get_number_unchecked(\"q\".as_bytes());\n    let r = json.get_number_unchecked(\"r\".as_bytes());\n    let s = json.get_number_unchecked(\"s\".as_bytes());\n    let t = json.get_number_unchecked(\"t\".as_bytes());\n    let u = json.get_number_unchecked(\"u\".as_bytes());\n\n    assert(a == 9);\n    assert(b == 99);\n    assert(c == 999);\n    assert(d == 9999);\n    assert(e == 99999);\n    assert(f == 999999);\n    assert(g == 9999999);\n    assert(h == 99999999);\n    assert(i == 999999999);\n    assert(j == 9999999999);\n    assert(k == 99999999999);\n    assert(l == 999999999999);\n    assert(m == 9999999999999);\n    assert(n == 99999999999999);\n    assert(o == 999999999999999);\n    assert(p == 999999999999999);\n    assert(q == 9999999999999999);\n    assert(r == 99999999999999999);\n    assert(s == 999999999999999999);\n    assert(t == 9999999999999999999);\n    assert(u == 18446744073709551615);\n}\n\n#[test]\nfn test_parent_array() {\n    let text = \"[0,10,21,32,44]\";\n    let mut json: JSON<15, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n    assert(json.get_length() == 5);\n    assert(json.get_number_from_array_unchecked(0) == 0);\n    assert(json.get_number_from_array_unchecked(1) == 10);\n    assert(json.get_number_from_array_unchecked(2) == 21);\n    assert(json.get_number_from_array_unchecked(3) == 32);\n    assert(json.get_number_from_array_unchecked(4) == 44);\n}\n\n#[test]\nfn test_escaped_strings() {\n    let text = \"{   \\\"name\\\": \\\"\\\\\\\"Ade\\\\nel Solangi\\\\\\\"\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<148, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n    let result: BoundedVec<u8, 19> = json.get_string_unchecked(\"name\".as_bytes());\n    assert(result.storage == BoundedVec::from_array(\"\\\"Ade\\nel Solangi\\\"\".as_bytes()).storage);\n    assert(result.len == 16);\n}\n\n#[test]\nfn test_parse_json() {\n    let text = \"{ \\\"foo\\\": 1234, \\\"bar\\\": { \\\"foo\\\": 9876, \\\"bar\\\": true }, \\\"baz\\\": \\\"hello\\\" }\";\n    let mut json: JSON<68, 7, 30, 30, 2> = JSON::parse_json_from_string(text);\n\n    let result = json.get_string_unchecked(\"baz\".as_bytes());\n    assert(result.storage == \"hello\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 5>> = json.get_string(\"baz\".as_bytes());\n    assert(result.is_some());\n    assert(result.unwrap().storage == \"hello\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 1>> = json.get_string(\"wibble\".as_bytes());\n    assert(result.is_some() == false);\n\n    let result: u64 = json.get_number_unchecked(\"foo\".as_bytes());\n    assert(result == 1234);\n\n    let result: Option<u64> = json.get_number(\"foo\".as_bytes());\n    assert(result.is_some());\n    assert(result.unwrap() == 1234);\n\n    let result: Option<u64> = json.get_number(\"fooo\".as_bytes());\n    assert(result.is_some() == false);\n\n    let mut nested_json = json.get_object(\"bar\".as_bytes()).unwrap();\n    let result: Option<u64> = nested_json.get_number_var(\n        BoundedVec { storage: \"foounusedkeybyteslolol\".as_bytes(), len: 3 },\n    );\n    assert(result.is_some() == true);\n    assert(result.unwrap() == 9876);\n\n    let key0: BoundedVec<u8, 3> = BoundedVec::from_array(\"bar\".as_bytes());\n    let key1: BoundedVec<u8, 3> = BoundedVec::from_array(\"baz\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 10>> = json.get_string_from_path([key0, key1]);\n    assert(result.is_some() == false);\n}\n\n#[test]\nfn test_literal() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<142, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n\n    let result: JSONLiteral = json.get_literal_unchecked(\"testA\".as_bytes());\n    assert(result.is_false() == true);\n    assert(result.is_true() == false);\n    assert(result.is_null() == false);\n    assert(result.to_bool() == false);\n\n    let result_option: Option<JSONLiteral> = json.get_literal(\"testA\".as_bytes());\n    assert(result_option.is_some());\n    assert(result_option.unwrap().value == result.value);\n}\n\n#[test]\nfn test_arrays() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"age\\\": 62, \\\"portfolio\\\": { \\\"vibe_ratings\\\": [1,2],\\\"elemental_lorem\\\": false }}                                                 \";\n    let mut json: JSON<153, 10, 60, 60, 2> = JSON::parse_json_from_string(text);\n\n    assert(json.key_exists(BoundedVec { storage: \"foo\".as_bytes(), len: 3 }) == false);\n    assert(json.key_exists(BoundedVec { storage: \"name\".as_bytes(), len: 4 }));\n    assert(json.key_exists(BoundedVec { storage: \"age\".as_bytes(), len: 3 }));\n    assert(json.key_exists(BoundedVec { storage: \"portfolio\".as_bytes(), len: 9 }));\n}\n\n#[test(should_fail_with = \"build_transcript: MaxNumTokens limit exceeded!\")]\nfn test_json_not_enough_tokens_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" }\";\n    let _: JSON<26, 10, 2, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"capture_missing_tokens: MaxNumTokens limit exceeded!\")]\nfn test_json_not_enough_tokens_fails_2() {\n    // we should exceed the limit of 8 tokens here, when capturing the `,` token missed by build_transcript\n    let text = \"{ \\\"hello \\\": false,\\\"world\\\": true }\";\n    let _: JSON<33, 10, 8, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"create_json_entries: MaxNumValues limit exceeded!\")]\nfn test_json_not_enough_values_fails() {\n    let text = \"{ \\\"hello \\\": false,\\\"world\\\": true }\";\n    let _: JSON<33, 10, 10, 4, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_without_key_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\", 100 }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_key_fails() {\n    let text = \"[ \\\"hello \\\": \\\"world\\\" ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_unclosed_object_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" \";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_closed_with_array_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_with_trailing_comma_fails() {\n    let text = \"{ \\\"hello \\\" : \\\"world\\\", }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_unclosed_array_fails() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\"\";\n    let _: JSON<19, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"validate_tokens: unclosed objects or arrays\")]\nfn test_json_unclosed_array_fails_2() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\", [1,2,3,4] \";\n    let _: JSON<31, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_trailing_comma_fails() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\", ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_closed_with_object_fails() {\n    let text = \"[ \\\"hello \\\": \\\"world\\\" }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_key_not_wrapped_in_quotes_fails() {\n    let text = \"{ false: \\\"world\\\" }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_string_not_wrapped_in_quotes_fails() {\n    let text = \"{ \\\"hello \\\": world }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_char_outside_of_string_fails() {\n    let text = \"{ \\\"hello \\\", \\\"world\\\" a}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_char_outside_of_string_fails_2() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{ \\\"hello \\\", \\\"world\\\" n}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_invalid_tokens_fails() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"[,,,]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"Cannot find key/value straddling KEY_DELIMITER_TOKEN\")]\nfn test_json_object_with_invalid_tokens_fails() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{:::}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test]\nfn test_json_empty_object_passes() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test]\nfn test_json_empty_array_passes() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"[]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/json.nr"
    },
    "133": {
      "source": "use crate::_string_tools::slice_packed_field::slice_fields;\n\nstruct StringChopper<let NeedlePackedFields: u32> {}\n\nimpl<let NeedlePackedFields: u32> StringChopper<NeedlePackedFields> {\n    fn slice_string<let StringBytes: u32, let HaystackPackedFields: u32>(\n        _: Self,\n        haystack: [Field; HaystackPackedFields],\n        start_bytes: Field,\n        num_bytes: Field,\n    ) -> [u8; StringBytes] {\n        let mut parsed_string: [u8; StringBytes] = [0; StringBytes];\n\n        let sliced: [Field; NeedlePackedFields] = slice_fields(haystack, start_bytes, num_bytes);\n\n        let sliced_bytes = sliced.map(|x: Field| {\n            let r: [u8; 31] = x.to_be_bytes();\n            r\n        });\n\n        let num_slices = StringBytes / 31;\n        let overflow = StringBytes % 31;\n        for i in 0..num_slices {\n            for j in 0..31 {\n                parsed_string[i * 31 + j] = sliced_bytes[i][j];\n            }\n        }\n        for j in 0..overflow {\n            parsed_string[num_slices * 31 + j] = sliced_bytes[num_slices][j];\n        }\n        parsed_string\n    }\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/_string_tools/string_chopper.nr"
    },
    "134": {
      "source": "global PLO: Field = 0x2833E84879B9709143E1F593F0000001;\nglobal PHI: Field = 0x30644E72E131A029B85045B68181585D;\n\nglobal PLO_200_felt: Field = 0x29B85045B68181585D2833E84879B9709143E1F593F0000001;\nglobal PHI_54_felt: Field = 0x30644E72E131A0;\nglobal TWO_POW_200: Field = 0x100000000000000000000000000000000000000000000000000;\nstruct Slice200 {\n    hihi: u64, // 7 bytes\n    hilo: u64, // 7 bytes\n    lohi: u64, // 7 bytes\n    lolo: u32, // 4 bytes\n}\nglobal PHI_54: u64 = 0x30644E72E131A0;\nglobal PLO_200: Slice200 = Slice200 {\n    hihi: 0x29B85045B68181,\n    hilo: 0x585D2833E84879,\n    lohi: 0xB9709143E1F593,\n    lolo: 0xF0000001,\n};\n\nunconstrained fn __slice_200_bits_from_field(f: Field) -> (Field, Field, bool) {\n    let b: [u8; 32] = f.to_be_bytes();\n\n    let mut res200: Slice200 = Slice200 { hihi: 0, hilo: 0, lohi: 0, lolo: 0 };\n    let mut res54: u64 = 0;\n    for i in 0..7 {\n        res200.hihi <<= 8;\n        res200.hilo <<= 8;\n        res200.lohi <<= 8;\n        res200.hihi += b[i + 7] as u64;\n        res200.hilo += b[i + 14] as u64;\n        res200.lohi += b[i + 21] as u64;\n    }\n    for i in 0..4 {\n        res200.lolo <<= 8;\n        res200.lolo += b[28 + i] as u32;\n    }\n    for i in 0..7 {\n        res54 <<= 8;\n        res54 += b[i] as u64;\n    }\n\n    let mut lo: Field = res200.hihi as Field; // 56 bits\n    lo *= 0x100000000000000; // 56 + 56 bits\n    lo += res200.hilo as Field; // 56 + 56 bits\n    lo *= 0x100000000000000; // 56 + 56 + 56 bits\n    lo += res200.lohi as Field; // 56 + 56 + 56 bits = 168 bits\n    lo *= 0x100000000; // 56 + 56 + 56 + 32 bits = 200 bits?\n    lo += res200.lolo as Field;\n\n    let mut hi = res54 as Field;\n\n    let mut PLO = PLO_200;\n    let mut borrow: bool = false;\n    // p - x\n    borrow = PLO.lolo < res200.lolo;\n    PLO.lohi -= borrow as u64;\n    borrow = PLO.lohi < res200.lohi;\n    PLO.hilo -= borrow as u64;\n    borrow = PLO.hilo < res200.hilo;\n    PLO.hihi -= borrow as u64;\n    borrow = PLO.hihi < res200.hihi;\n    (lo, hi, borrow)\n}\n\npub fn slice_200_bits_from_field(f: Field) -> Field {\n    //@Safety: check the comments below\n    let (lo, hi, borrow) = unsafe { __slice_200_bits_from_field(f) };\n    // checks that lo and hi are the correct slices of f\n    assert(hi * TWO_POW_200 + lo == f);\n    // checks that lo and hi are the correct bit sizes\n    lo.assert_max_bit_size::<200>();\n    hi.assert_max_bit_size::<56>();\n    let lo_diff = PLO_200_felt - lo + (borrow as Field * TWO_POW_200);\n    let hi_diff = PHI_54_felt - hi - borrow as Field;\n    lo_diff.assert_max_bit_size::<200>();\n    hi_diff.assert_max_bit_size::<56>();\n    lo\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/_string_tools/slice_field.nr"
    },
    "136": {
      "source": "/**\n * @file methods to extract data efficiently from Field elements that represent 31 bytes of packed data\n **/\n\n// #############################################################\n// ### GLOBAL VARIABLES AND LOOKUP TABLES\n// #############################################################\nglobal two_pow_128: Field = 0x100000000000000000000000000000000;\nglobal two_pow_64: Field = 0x10000000000000000;\nglobal two_pow_32: Field = 0x100000000;\nglobal two_pow_16: Field = 0x10000;\n\nglobal path_multipliers_chunk4: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ 0,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ 0,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ 0,\n    /* 14 (01110) */ 0,\n    /* 15 (01111) */ 0,\n    /* 16 (10000) */ 1,\n    /* 17 (10001) */ 1,\n    /* 18 (10010) */ 1,\n    /* 19 (10011) */ 1,\n    /* 20 (10100) */ 1,\n    /* 21 (10101) */ 1,\n    /* 22 (10110) */ 1,\n    /* 23 (10111) */ 1,\n    /* 24 (11000) */ 1,\n    /* 25 (11001) */ 1,\n    /* 26 (11010) */ 1,\n    /* 27 (11011) */ 1,\n    /* 28 (11100) */ 1,\n    /* 29 (11101) */ 1,\n    /* 30 (11110) */ 1,\n    /* 31 (11111) */ 1,\n];\n\n// this represents an 8 byte chunk. what do we multiply by?\nglobal path_multipliers_chunk3: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ 0,\n    /* 8  (01000) */ 1,\n    /* 9  (01001) */ 1,\n    /* 10 (01010) */ 1,\n    /* 11 (01011) */ 1,\n    /* 12 (01100) */ 1,\n    /* 13 (01101) */ 1,\n    /* 14 (01110) */ 1,\n    /* 15 (01111) */ 1,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ 0,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ 0,\n    /* 22 (10110) */ 0,\n    /* 23 (10111) */ 0,\n    /* 24 (11000) */ two_pow_128,\n    /* 25 (11001) */ two_pow_128,\n    /* 26 (11010) */ two_pow_128,\n    /* 27 (11011) */ two_pow_128,\n    /* 28 (11100) */ two_pow_128,\n    /* 29 (11101) */ two_pow_128,\n    /* 30 (11110) */ two_pow_128,\n    /* 31 (11111) */ two_pow_128,\n];\n\n// what do we multiply 4 byte chunk by\nglobal path_multipliers_chunk2: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 1,\n    /* 5  (00101) */ 1,\n    /* 6  (00110) */ 1,\n    /* 7  (00111) */ 1,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ 0,\n    /* 12 (01100) */ two_pow_64,\n    /* 13 (01101) */ two_pow_64,\n    /* 14 (01110) */ two_pow_64,\n    /* 15 (01111) */ two_pow_64,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ 0,\n    /* 20 (10100) */ two_pow_128,\n    /* 21 (10101) */ two_pow_128,\n    /* 22 (10110) */ two_pow_128,\n    /* 23 (10111) */ two_pow_128,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ 0,\n    /* 26 (11010) */ 0,\n    /* 27 (11011) */ 0,\n    /* 28 (11100) */ two_pow_128 * two_pow_64,\n    /* 29 (11101) */ two_pow_128 * two_pow_64,\n    /* 30 (11110) */ two_pow_128 * two_pow_64,\n    /* 31 (11111) */ two_pow_128 * two_pow_64,\n];\n\n// what do we multiply 2 byte chunk by\nglobal path_multipliers_chunk1: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 1,\n    /* 3  (00011) */ 1,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ two_pow_32,\n    /* 7  (00111) */ two_pow_32,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ two_pow_64,\n    /* 11 (01011) */ two_pow_64,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ 0,\n    /* 14 (01110) */ two_pow_64 * two_pow_32,\n    /* 15 (01111) */ two_pow_64 * two_pow_32,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ two_pow_128,\n    /* 19 (10011) */ two_pow_128,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ 0,\n    /* 22 (10110) */ two_pow_128 * two_pow_32,\n    /* 23 (10111) */ two_pow_128 * two_pow_32,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ 0,\n    /* 26 (11010) */ two_pow_128 * two_pow_64,\n    /* 27 (11011) */ two_pow_128 * two_pow_64,\n    /* 28 (11100) */ 0,\n    /* 29 (11101) */ 0,\n    /* 30 (11110) */ two_pow_128 * two_pow_64 * two_pow_32,\n    /* 31 (11111) */ two_pow_128 * two_pow_64 * two_pow_32,\n];\n\n// what do we multiply 1 byte chunk by\nglobal path_multipliers_chunk0: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 1,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ two_pow_16,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ two_pow_32,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ two_pow_16 * two_pow_32,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ two_pow_64,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ two_pow_64 * two_pow_16,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ two_pow_64 * two_pow_32,\n    /* 14 (01110) */ 0,\n    /* 15 (01111) */ two_pow_64 * two_pow_32 * two_pow_16,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ two_pow_128,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ two_pow_128 * two_pow_16,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ two_pow_128 * two_pow_32,\n    /* 22 (10110) */ 0,\n    /* 23 (10111) */ two_pow_128 * two_pow_32 * two_pow_16,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ two_pow_128 * two_pow_64,\n    /* 26 (11010) */ 0,\n    /* 27 (11011) */ two_pow_128 * two_pow_64 * two_pow_16,\n    /* 28 (11100) */ 0,\n    /* 29 (11101) */ two_pow_128 * two_pow_64 * two_pow_32,\n    /* 30 (11110) */ 0,\n    /* 31 (11111) */ two_pow_128 * two_pow_64 * two_pow_32 * two_pow_16,\n];\n\n// these are `head_path_multipliers` but in reverse order\nglobal tail_path_multipliers_chunk3: [Field; 32] = [\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk2: [Field; 32] = [\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk1: [Field; 32] = [\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x010000000000000000000000000000000000000000,\n    0x010000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x01000000000000000000000000,\n    0x01000000000000000000000000,\n    0x00,\n    0x00,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x00,\n    0x00,\n    0x0100000000,\n    0x0100000000,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk0: [Field; 32] = [\n    0x01000000000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000,\n    0x00,\n    0x0100000000000000000000,\n    0x00,\n    0x010000000000000000,\n    0x00,\n    0x01000000000000,\n    0x00,\n    0x0100000000,\n    0x00,\n    0x010000,\n    0x00,\n    0x01,\n    0x00,\n];\n\nglobal LIMB_VALID_PATH: [Field; 35] = [\n    0x000000000, // 0 0 0 0 0 0 0 0 0\n    0x000000001, // 0 0 0 0 0 0 0 0 1\n    0x000000003, // 0 0 0 0 0 0 0 1 1\n    0x000000007, // 0 0 0 0 0 0 1 1 1\n    0x000000008, // 0 0 0 0 0 1 1 1 1\n    0x000000010, // 0 0 0 0 1 0 0 0 0\n    0x000000020, // 0 0 0 1 0 0 0 0 0\n    0x000000040, // 0 0 1 0 0 0 0 0 0\n    0x000000080, // 0 1 0 0 0 0 0 0 0\n    0x000000100, // 1 0 0 0 0 0 0 0 0\n    0x000000200, // 0 0 0 0 0 0 0 1 0\n    0x000000400, // 0 0 0 0 0 0 1 0 0\n    0x000000800, // 0 0 0 0 0 1 0 0 0\n    0x000001000, // 0 0 0 0 1 0 0 0 0\n    0x000002000, // 0 0 0 1 0 0 0 0 0\n    0x000004000, // 0 0 1 0 0 0 0 0 0\n    0x000008000, // 0 1 0 0 0 0 0 0 0\n    0x000010000, // 0 0 0 0 0 0 0 0 1\n    0x000020000, // 0 0 0 0 0 0 0 1 0\n    0x000040000, // 0 0 0 0 0 0 1 0 0\n    0x000080000, // 0 0 0 0 0 1 0 0 0\n    0x000100000, // 0 0 0 0 1 0 0 0 0\n    0x000200000, // 0 0 0 1 0 0 0 0 0\n    0x000400000, // 0 0 1 0 0 0 0 0 0\n    0x000800000, // 0 1 0 0 0 0 0 0 0\n    0x001000000, // 0 0 0 0 0 0 0 0 1\n    0x002000000, // 0 0 0 0 0 0 0 1 0\n    0x004000000, // 0 0 0 0 0 0 1 0 0\n    0x008000000, // 0 0 0 0 0 1 0 0 0\n    0x010000000, // 0 0 0 0 1 0 0 0 0\n    0x020000000, // 0 0 0 1 0 0 0 0 0\n    0x040000000, // 0 0 1 0 0 0 0 0 0\n    0x080000000, // 0 1 0 0 0 0 0 0 0\n    0x100000000,\n    0x200000000,\n];\n\n// these path variables describe the location of a limb in an array\n// e.g. LAST_LIMB_PATH[5] produces 2^{5-1},\n// which is decomposed into 1 0 0 0 0, and the decompositions turned into an array M\n// M[4] = 1 i.e. the limbs[4] should contain the last limb\n// array extends to 0x200000000 which is 2^33 => 33 31 byte limbs = 1,023 bytes\n// this puts a hard limit on the max size of a key that this program supports.\nglobal LAST_LIMB_PATH: [Field; 36] = [\n    0x000000000, // 0 0 0 0 0 0 0 0 0 <-- edge case because sometimes array index is -1, so we offset by 1 TODO explain better\n    0x000000000, // 0 0 0 0 0 0 0 0 1\n    0x000000001, // 0 0 0 0 0 0 0 1 0\n    0x000000003, // 0 0 0 0 0 0 1 0 0\n    0x000000007, // 0 0 0 0 0 1 0 0 0\n    0x00000000f, // 0 0 0 0 1 0 0 0 0\n    0x00000001f, // 0 0 0 1 0 0 0 0 0\n    0x00000003f, // 0 0 1 0 0 0 0 0 0\n    0x00000007f, // 0 1 0 0 0 0 0 0 0\n    0x0000000ff, // 1 0 0 0 0 0 0 0 0\n    0x0000001ff, // 0 0 0 0 0 0 0 1 0\n    0x0000003ff, // 0 0 0 0 0 0 1 0 0\n    0x0000007ff, // 0 0 0 0 0 1 0 0 0\n    0x000000fff, // 0 0 0 0 1 0 0 0 0\n    0x000001fff, // 0 0 0 1 0 0 0 0 0\n    0x000003fff, // 0 0 1 0 0 0 0 0 0\n    0x000007fff, // 0 1 0 0 0 0 0 0 0\n    0x00000ffff, // 0 0 0 0 0 0 0 0 1\n    0x00001ffff, // 0 0 0 0 0 0 0 1 0\n    0x00003ffff, // 0 0 0 0 0 0 1 0 0\n    0x00007ffff, // 0 0 0 0 0 1 0 0 0\n    0x0000fffff, // 0 0 0 0 1 0 0 0 0\n    0x0001fffff, // 0 0 0 1 0 0 0 0 0\n    0x0003fffff, // 0 0 1 0 0 0 0 0 0\n    0x0007fffff, // 0 1 0 0 0 0 0 0 0\n    0x000ffffff, // 0 0 0 0 0 0 0 0 1\n    0x001ffffff, // 0 0 0 0 0 0 0 1 0\n    0x003ffffff, // 0 0 0 0 0 0 1 0 0\n    0x007ffffff, // 0 0 0 0 0 1 0 0 0\n    0x00fffffff, // 0 0 0 0 1 0 0 0 0\n    0x01fffffff, // 0 0 0 1 0 0 0 0 0\n    0x03fffffff, // 0 0 1 0 0 0 0 0 0\n    0x07fffffff, // 0 1 0 0 0 0 0 0 0\n    0x0ffffffff,\n    0x1ffffffff,\n    0x3ffffffff,\n];\n\nglobal INTEGER_UP_TO_62_IS_GREATER_THAN_31: [Field; 63] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\nglobal NUM_BYTES_MOD_31_IS_ZERO: [Field; 31] =\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nglobal BYTE_SHIFT: [Field; 32] = [\n    1,\n    0x1000000000000000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000,\n    0x100000000000000000000000000000000,\n    0x1000000000000000000000000000000,\n    0x10000000000000000000000000000,\n    0x100000000000000000000000000,\n    0x1000000000000000000000000,\n    0x10000000000000000000000,\n    0x100000000000000000000,\n    0x1000000000000000000,\n    0x10000000000000000,\n    0x100000000000000,\n    0x1000000000000,\n    0x10000000000,\n    0x100000000,\n    0x1000000,\n    0x10000,\n    0x100,\n    1,\n];\n\nglobal PATH_LOOKUP: [[bool; 5]; 32] = [\n    [false, false, false, false, false],\n    [true, false, false, false, false],\n    [false, true, false, false, false],\n    [true, true, false, false, false],\n    [false, false, true, false, false],\n    [true, false, true, false, false],\n    [false, true, true, false, false],\n    [true, true, true, false, false],\n    [false, false, false, true, false],\n    [true, false, false, true, false],\n    [false, true, false, true, false],\n    [true, true, false, true, false],\n    [false, false, true, true, false],\n    [true, false, true, true, false],\n    [false, true, true, true, false],\n    [true, true, true, true, false],\n    [false, false, false, false, true],\n    [true, false, false, false, true],\n    [false, true, false, false, true],\n    [true, true, false, false, true],\n    [false, false, true, false, true],\n    [true, false, true, false, true],\n    [false, true, true, false, true],\n    [true, true, true, false, true],\n    [false, false, false, true, true],\n    [true, false, false, true, true],\n    [false, true, false, true, true],\n    [true, true, false, true, true],\n    [false, false, true, true, true],\n    [true, false, true, true, true],\n    [false, true, true, true, true],\n    [true, true, true, true, true],\n];\n\n// #############################################################\n// ### METHODS\n// #############################################################\n\n/**\n * slice a field that represents bytes [0, ..., 31] into 5 chunks where:\n * chunk[0] = 1 byte\n * chunk[1] = 2 bytes\n * chunk[2] = 4 bytes\n * chunk[3] = 8 bytes\n * chunk[4] = 16 bytes\n *\n * some of the chunks will describe the bytes [0, ..., num_bytes - 1]\n * some of the chunks will describe the bytes [num_bytes, ..., 31]\n **/\nunconstrained fn __slice_field(f: Field, num_bytes: Field) -> [Field; 5] {\n    let head_path = PATH_LOOKUP[num_bytes];\n    let bytes: [u8; 32] = f.to_be_bytes();\n    let bytes = bytes.map(|b: u8| b as Field);\n\n    let mut chunks: [Field; 5] = [0; 5];\n    let mut head_ptr = 1;\n    let mut tail_ptr = num_bytes + 1;\n    if head_path[0] {\n        chunks[0] = bytes[head_ptr] as Field;\n        head_ptr += 1;\n    } else {\n        chunks[0] = bytes[tail_ptr] as Field;\n        tail_ptr += 1;\n    }\n    if head_path[1] {\n        chunks[1] = bytes[head_ptr] * 0x100 + bytes[head_ptr + 1];\n        head_ptr += 2;\n    } else {\n        chunks[1] = bytes[tail_ptr] * 0x100 + bytes[tail_ptr + 1];\n        tail_ptr += 2;\n    }\n    if head_path[2] {\n        chunks[2] = bytes[head_ptr] * 0x1000000\n            + bytes[head_ptr + 1] * 0x10000\n            + bytes[head_ptr + 2] * 0x100\n            + bytes[head_ptr + 3];\n        head_ptr += 4;\n    } else {\n        chunks[2] = bytes[tail_ptr] * 0x1000000\n            + bytes[tail_ptr + 1] * 0x10000\n            + bytes[tail_ptr + 2] * 0x100\n            + bytes[tail_ptr + 3];\n        tail_ptr += 4;\n    }\n    if head_path[3] {\n        chunks[3] = bytes[head_ptr] * 0x100000000000000\n            + bytes[head_ptr + 1] * 0x1000000000000\n            + bytes[head_ptr + 2] * 0x10000000000\n            + bytes[head_ptr + 3] * 0x100000000\n            + bytes[head_ptr + 4] * 0x1000000\n            + bytes[head_ptr + 5] * 0x10000\n            + bytes[head_ptr + 6] * 0x100\n            + bytes[head_ptr + 7];\n        head_ptr += 8;\n    } else {\n        chunks[3] = bytes[tail_ptr] * 0x100000000000000\n            + bytes[tail_ptr + 1] * 0x1000000000000\n            + bytes[tail_ptr + 2] * 0x10000000000\n            + bytes[tail_ptr + 3] * 0x100000000\n            + bytes[tail_ptr + 4] * 0x1000000\n            + bytes[tail_ptr + 5] * 0x10000\n            + bytes[tail_ptr + 6] * 0x100\n            + bytes[tail_ptr + 7];\n        tail_ptr += 8;\n    }\n    if head_path[4] {\n        chunks[4] = bytes[head_ptr] * 0x1000000000000000000000000000000\n            + bytes[head_ptr + 1] * 0x10000000000000000000000000000\n            + bytes[head_ptr + 2] * 0x100000000000000000000000000\n            + bytes[head_ptr + 3] * 0x1000000000000000000000000\n            + bytes[head_ptr + 4] * 0x10000000000000000000000\n            + bytes[head_ptr + 5] * 0x100000000000000000000\n            + bytes[head_ptr + 6] * 0x1000000000000000000\n            + bytes[head_ptr + 7] * 0x10000000000000000\n            + bytes[head_ptr + 8] * 0x100000000000000\n            + bytes[head_ptr + 9] * 0x1000000000000\n            + bytes[head_ptr + 10] * 0x10000000000\n            + bytes[head_ptr + 11] * 0x100000000\n            + bytes[head_ptr + 12] * 0x1000000\n            + bytes[head_ptr + 13] * 0x10000\n            + bytes[head_ptr + 14] * 0x100\n            + bytes[head_ptr + 15];\n    } else {\n        chunks[4] = bytes[tail_ptr] * 0x1000000000000000000000000000000\n            + bytes[tail_ptr + 1] * 0x10000000000000000000000000000\n            + bytes[tail_ptr + 2] * 0x100000000000000000000000000\n            + bytes[tail_ptr + 3] * 0x1000000000000000000000000\n            + bytes[tail_ptr + 4] * 0x10000000000000000000000\n            + bytes[tail_ptr + 5] * 0x100000000000000000000\n            + bytes[tail_ptr + 6] * 0x1000000000000000000\n            + bytes[tail_ptr + 7] * 0x10000000000000000\n            + bytes[tail_ptr + 8] * 0x100000000000000\n            + bytes[tail_ptr + 9] * 0x1000000000000\n            + bytes[tail_ptr + 10] * 0x10000000000\n            + bytes[tail_ptr + 11] * 0x100000000\n            + bytes[tail_ptr + 12] * 0x1000000\n            + bytes[tail_ptr + 13] * 0x10000\n            + bytes[tail_ptr + 14] * 0x100\n            + bytes[tail_ptr + 15];\n    }\n\n    chunks\n}\n\nunconstrained fn __divmod(numerator: Field, denominator: Field) -> (Field, Field) {\n    let quotient = numerator as u32 / denominator as u32;\n    let remainder = numerator as u32 % denominator as u32;\n    (quotient as Field, remainder as Field)\n}\n\n/**\n * @brief cheeky divmod method for dividing a u16 by 31\n *        we know the quotient will fit into a 14 bit range check which will save us some fractional gates\n **/\nfn divmod_31(numerator: Field) -> (Field, Field) {\n    //@Safety: we check the bit lengths of qf and rf and their relation to the numerator with assertions later\n    let (quotient, remainder) = unsafe { __divmod(numerator, 31) };\n\n    let qf = quotient as Field;\n    let rf = remainder as Field;\n\n    // note: these range checks are because we know the denominator is 31\n    // TODO: need more checks, atm remainder could equal 31\n    qf.assert_max_bit_size::<14>();\n    rf.assert_max_bit_size::<5>();\n\n    // n / d = q\n    // d * q + r = n\n    assert(qf * 31 as Field + rf == numerator as Field);\n    (quotient, remainder)\n}\n\n/**\n * @brief converts a 16 bit value into 16 fake bools (Field elements that are 0 or 1)\n **/\nunconstrained fn decompose(val: Field) -> [Field; 16] {\n    let mut r: [Field; 16] = [0; 16];\n\n    let mut it = val as u32;\n    for i in 0..16 {\n        r[i] = (it & 1) as Field;\n        it >>= 1;\n    }\n    r\n}\n\n// 5 gates?\npub fn get_last_limb_path<let OutputFields: u32>(last_limb_index: Field) -> [Field; OutputFields] {\n    // TODO we offset by 1 explain why (0 byte length produces 0 - 1 which = invalid array index. we just add 1 and increase array length by 1 to compensate)\n    let path = LAST_LIMB_PATH[last_limb_index + 1]; // 2\n    //@Safety: check the comments below\n    let path_valid_bits = unsafe { decompose(path) };\n    let mut path_valid_sum: Field = 0;\n    let mut path_valid_output: [Field; OutputFields] = [0; OutputFields];\n    for i in 0..OutputFields {\n        // we check that the path valid bits are binary\n        assert(path_valid_bits[i] * path_valid_bits[i] - path_valid_bits[i] == 0);\n        path_valid_sum += (path_valid_bits[i] * (1 << i as u8) as Field);\n        path_valid_output[i] = path_valid_bits[i];\n    }\n    // we check that the path valid bits sum to the path\n    assert(path_valid_sum == path);\n    path_valid_output\n}\n\n/**\n * @brief slice a Field `f`, that represents 31-bytes, into two outputs `head, tail`\n *        where `head = f.slice(0, num_bytes)`, `tail = f.slice(num_bytes, 31)`\n * @details cost 46 gates\n **/\npub fn slice_field(f: Field, num_bytes: Field) -> (Field, Field) {\n    //@Safety: we check the bit lengths of the chunks with assertions later\n    let chunks = unsafe { __slice_field(f, num_bytes) };\n    chunks[0].assert_max_bit_size::<8>(); // 1.25 gates\n    chunks[1].assert_max_bit_size::<16>(); // 1.5 gates\n    chunks[2].assert_max_bit_size::<32>(); // 1.75 gates\n    chunks[3].assert_max_bit_size::<64>(); // 3.25 gates\n    chunks[4].assert_max_bit_size::<128>(); // 7.5 gates\n    let mut head: Field = 0;\n    let mut tail: Field = 0;\n\n    // 15 gates\n    let temp = path_multipliers_chunk4[num_bytes];\n    head = chunks[4] * temp;\n    std::as_witness(head);\n    head += chunks[3] * path_multipliers_chunk3[num_bytes];\n    std::as_witness(head);\n    head += chunks[2] * path_multipliers_chunk2[num_bytes];\n    std::as_witness(head);\n    head += chunks[1] * path_multipliers_chunk1[num_bytes];\n    std::as_witness(head);\n    head += chunks[0] * path_multipliers_chunk0[num_bytes];\n\n    // 13 gates\n    tail = chunks[4] * (1 - temp);\n    std::as_witness(tail);\n    tail += chunks[3] * tail_path_multipliers_chunk3[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[2] * tail_path_multipliers_chunk2[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[1] * tail_path_multipliers_chunk1[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[0] * tail_path_multipliers_chunk0[num_bytes];\n    std::as_witness(tail);\n\n    // 3 gates\n    let total = tail + head * BYTE_SHIFT[num_bytes];\n    assert(total == f);\n\n    // total 46.25 gates\n    (head, tail)\n}\n\n/**\n * @brief Given an array of fields that pack 31 bytes, return an array that slices the packed byte array at a given index for a given number of bytes\n * @description Some serious dark black magic nonsense going on here. TODO: document\n **/\npub fn slice_fields<let InputFields: u32, let OutputFields: u32>(\n    data: [Field; InputFields],\n    start_byte: Field,\n    num_bytes: Field,\n) -> [Field; OutputFields] {\n    // 3.5\n    let (start_index, start_mod_31) = divmod_31(start_byte);\n    let num_underflow_bytes = start_mod_31;\n    // 3.5, 7\n    let (num_bytes_div_31, num_bytes_mod_31) = divmod_31(num_bytes);\n\n    // 2, 9\n    let num_bytes_mod_31_is_0 = NUM_BYTES_MOD_31_IS_ZERO[num_bytes_mod_31];\n    // 2, 11\n    let num_bytes_div_31_is_0 = NUM_BYTES_MOD_31_IS_ZERO[num_bytes_div_31];\n\n    // 1, 12\n    let lookup = (-num_bytes_div_31_is_0 * num_bytes) - start_mod_31 + 62;\n    std::as_witness(lookup);\n    // 3, 15\n    let bytes_fit_into_limb = INTEGER_UP_TO_62_IS_GREATER_THAN_31[lookup] * num_bytes_div_31_is_0;\n    std::as_witness(bytes_fit_into_limb);\n\n    // 2, 17\n    let num_unused_bytes_in_start_limb =\n        (num_bytes + start_mod_31 - 31) * bytes_fit_into_limb + (31 - start_mod_31);\n    std::as_witness(num_unused_bytes_in_start_limb);\n    let num_remaining_bytes = num_bytes - num_unused_bytes_in_start_limb;\n\n    // 4.5, 21.5\n    let mut (num_whole_limbs, num_overflow_bytes) = divmod_31(num_remaining_bytes);\n    // 44, 65.5\n    let (_, tail) = slice_field(data[start_index], num_underflow_bytes);\n\n    let mut previous = tail;\n\n    let mut result = [0; OutputFields];\n\n    // 4, 69.5\n    let extra_head_section = INTEGER_UP_TO_62_IS_GREATER_THAN_31[num_overflow_bytes - start_mod_31\n        + 31]\n        * (1 - bytes_fit_into_limb);\n\n    // 1, 70.5\n    let index_of_output_limb: Field = (num_bytes_div_31 - num_bytes_mod_31_is_0);\n    // 5, 75.5\n    let path_valid_output: [Field; OutputFields] = get_last_limb_path(index_of_output_limb);\n\n    // 2, 77.5\n    let tail_shift = BYTE_SHIFT[num_unused_bytes_in_start_limb];\n\n    // 51, 128.5\n    for i in 0..(OutputFields - 1) {\n        // 0\n        let slice_valid = path_valid_output[i];\n        // 1\n        let data_index = (start_index + 1 + i as Field);\n        // 2, 3\n        let input_slice = data[data_index];\n        // 44, 47\n        let (head, tail) = slice_field(input_slice, num_underflow_bytes);\n        // 1, 48\n        let combined = previous * tail_shift + head;\n        // 1, 49\n        result[i] = combined * slice_valid;\n        // 2, 51\n        previous = (tail - previous) * slice_valid + previous;\n    }\n\n    // 2, 130.5\n    let slice_size = (num_bytes + start_mod_31) * bytes_fit_into_limb + num_overflow_bytes;\n\n    // 1, 131.5\n    let use_previous_for_last_limb: Field = extra_head_section + bytes_fit_into_limb;\n\n    // 1, 132.5\n    let mut index_of_overflow_limb = start_index + num_whole_limbs + 1;\n    // 2, 134.5\n    let last_limb_from_data = data[index_of_overflow_limb];\n    // 2, 136.5\n    let slice_source =\n        (previous - last_limb_from_data) * use_previous_for_last_limb + last_limb_from_data;\n\n    // 44, 180.5\n    let (head, _) = slice_field(slice_source, slice_size);\n\n    // 3, 183.5\n    let previous_shift = BYTE_SHIFT[31 - num_overflow_bytes]; // could save 1 gate by making different shift table\n    // 2, 185.5\n    let last_limb_shift = BYTE_SHIFT[num_bytes_mod_31];\n    // 1, 186.5\n    let mut last_limb = (previous * previous_shift);\n    std::as_witness(last_limb);\n    // 1, 187.5\n    last_limb = last_limb * (-use_previous_for_last_limb) + last_limb + head;\n    std::as_witness(last_limb);\n    // 1, 188.5\n    last_limb = last_limb * last_limb_shift;\n    std::as_witness(last_limb);\n\n    let mut path: [Field; OutputFields] = [0; OutputFields];\n    // 2, 190.5\n    for i in 1..OutputFields {\n        path[i] = path_valid_output[i] * -path_valid_output[i - 1] + path_valid_output[i - 1];\n    }\n    // 1, 191.5\n    path[0] = (1 - path_valid_output[0]);\n\n    // 4, 195.5\n    // actual valud = 182, missing gates?\n    for i in 0..OutputFields {\n        // 2\n        result[i] = (last_limb - result[i]) * path[i] + result[i];\n        // std::as_witness(result[i]);\n    }\n    // actual value = 182?\n    result\n}\n\nmod test {\n    use crate::_string_tools::slice_packed_field::slice_field;\n    use crate::_string_tools::slice_packed_field::slice_fields;\n\n    unconstrained fn build_slices_for_test<let N: u32>(\n        bytes: [u8; N],\n        start: u32,\n        num_bytes: u32,\n    ) -> [Field; 3] {\n        let mut slices: [Field; 3] = [0; 3];\n        for i in 0..3 {\n            for k in 0..31 {\n                let mut idx = i * 31 + k;\n                slices[i] *= 0x100;\n                if (idx < num_bytes) {\n                    slices[i] += bytes[idx + start] as Field;\n                }\n            }\n        }\n        slices\n    }\n\n    #[test]\n    fn test_slice_fields_nolength() {\n        let text: [u8; 1405] = \"Charlie is genius, right. He's made from a million pieces of old bubble gum. Imagine that! In the summer of 1976, on his way home from an Alice Cooper concert, Charlie started to melt onto the pavement. It was too hot in L.A., and he melted like a pink bitch. Luckily though, there was Eric Phillips, a local crocodile who dabbled in black magic. He took pity on Charlie and scraped him off the floor with a pair of fish slicers. He poured him into an antique soup ladle, and boarded his magic carpet. Destination: Alaska! Eric Phillips decided to refreeze Charlie, but in his cold-blooded reptilian haste, he refroze him into to the shape of a Hoover. Charlie wasn't fazed though, he just zoomed about the place, sucking up Inuits. Ha ha! Oh. The Inuits didn't mind; they loved it in Charlie's pink, tight warm belly pouch, and they refused to come out. Charlie said, \\\"I'm cool with that,\\\" and set fire to a posh hammer to make it official. he downside was that the Inuits suffocated immediately. It was air-tight in there. Charlie panicked and fired the tiny Inuit bullets into Eric's crocodile peepers. The green shape was frozen. After a quick drink, Charlie stole Eric Phillips's magic carpet and left for Seattle. Charlie was racked with guilt: he'd killed 50 Inuits, noone needs that. He decided to spend the rest of his life putting small hairstyles onto boots, monkey nuts, trumpets and spanners.\"\n            .as_bytes();\n        println(f\"text = {text}\");\n        let mut slices: [Field; 46 + 3] = [0; 46 + 3];\n        for i in 0..46 {\n            for j in 0..31 {\n                let mut idx = i * 31 + j;\n                slices[i] *= 0x100;\n                if (idx < 1405) {\n                    slices[i] += text[idx] as Field;\n                }\n            }\n        }\n        // let start_byte = 26;\n        let num_bytes = 0;\n        let start_byte: u32 = 0;\n        //@Safety: this is a test\n        let mut expected_slices: [Field; 3] =\n            unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n        let result_slices: [Field; 3] =\n            slice_fields(slices, start_byte as Field, num_bytes as Field);\n        assert(result_slices == expected_slices);\n    }\n\n    #[test]\n    fn test_slice_fields() {\n        let text: [u8; 1405] = \"Charlie is genius, right. He's made from a million pieces of old bubble gum. Imagine that! In the summer of 1976, on his way home from an Alice Cooper concert, Charlie started to melt onto the pavement. It was too hot in L.A., and he melted like a pink bitch. Luckily though, there was Eric Phillips, a local crocodile who dabbled in black magic. He took pity on Charlie and scraped him off the floor with a pair of fish slicers. He poured him into an antique soup ladle, and boarded his magic carpet. Destination: Alaska! Eric Phillips decided to refreeze Charlie, but in his cold-blooded reptilian haste, he refroze him into to the shape of a Hoover. Charlie wasn't fazed though, he just zoomed about the place, sucking up Inuits. Ha ha! Oh. The Inuits didn't mind; they loved it in Charlie's pink, tight warm belly pouch, and they refused to come out. Charlie said, \\\"I'm cool with that,\\\" and set fire to a posh hammer to make it official. he downside was that the Inuits suffocated immediately. It was air-tight in there. Charlie panicked and fired the tiny Inuit bullets into Eric's crocodile peepers. The green shape was frozen. After a quick drink, Charlie stole Eric Phillips's magic carpet and left for Seattle. Charlie was racked with guilt: he'd killed 50 Inuits, noone needs that. He decided to spend the rest of his life putting small hairstyles onto boots, monkey nuts, trumpets and spanners.\"\n            .as_bytes();\n        println(f\"text = {text}\");\n        let mut slices: [Field; 46 + 3] = [0; 46 + 3];\n        for i in 0..46 {\n            for j in 0..31 {\n                let mut idx = i * 31 + j;\n                slices[i] *= 0x100;\n                if (idx < 1405) {\n                    slices[i] += text[idx] as Field;\n                }\n            }\n        }\n        // let start_byte = 26;\n        let byte_sizes: [u32; 10] = [0, 1, 5, 30, 31, 32, 47, 61, 62, 90];\n\n        let byte_positions: [u32; 18] =\n            [0, 1, 14, 15, 16, 20, 28, 29, 30, 31, 32, 33, 38, 40, 55, 60, 61, 62];\n\n        for i in 0..10 {\n            let num_bytes = byte_sizes[i];\n            for j in 0..18 {\n                let start_byte: u32 = byte_positions[j];\n                let mut expected_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n                let result_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { slice_fields(slices, start_byte as Field, num_bytes as Field) };\n                assert(result_slices == expected_slices);\n            }\n\n            for j in 0..18 {\n                let start_byte: u32 = text.len() - num_bytes - byte_positions[j];\n                let mut expected_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n                let result_slices: [Field; 3] =\n                    slice_fields(slices, start_byte as Field, num_bytes as Field);\n                assert(result_slices == expected_slices);\n            }\n        }\n    }\n\n    #[test]\n    fn test_slice_field() {\n        let input = 0xffeebbccbbaa99887766554433221100112233445566778899aabbccddeeff;\n\n        let input_bytes: [u8; 32] = input.to_be_bytes();\n\n        for i in 0..32 {\n            println(f\"i = {i}\");\n            let num_bytes = i as Field;\n            let (head, tail) = slice_field(input, num_bytes);\n            let mut expected_head: Field = 0;\n            let mut expected_tail: Field = 0;\n            for j in 0..num_bytes as u32 {\n                expected_head *= 0x100;\n                expected_head += input_bytes[j + 1] as Field;\n            }\n            for j in 0..(31 - num_bytes as u32) {\n                expected_tail *= 0x100;\n                expected_tail += input_bytes[j as Field + num_bytes + 1] as Field;\n            }\n            assert(expected_head == head);\n            assert(expected_tail == tail);\n        }\n        let (head, tail) = slice_field(input, 11);\n        let head_expected = 0xffeebbccbbaa9988776655;\n        let tail_expected = 0x4433221100112233445566778899aabbccddeeff;\n        assert(head_expected == head);\n        assert(tail_expected == tail);\n    }\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/_string_tools/slice_packed_field.nr"
    },
    "137": {
      "source": "use crate::enums::Token::NUM_TOKENS_MUL_2;\n\nglobal TOKEN_ENDS_OBJECT_OR_ARRAY: [Field; 11] = [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0];\nglobal TOKEN_IS_ARRAY_OBJECT_OR_VALUE: [Field; 11] = [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0];\nglobal TOKEN_FLAGS_TABLE: [Field; NUM_TOKENS_MUL_2] = [\n    0x01,\n    0x0100000000,\n    0x01010000000000,\n    0x0101000000,\n    0x01010000000000,\n    0x01,\n    0x01,\n    0x01000000000101,\n    0x01000000000101,\n    0x01000000000101,\n    0x010001,\n    0x01000001,\n    0x0100000000,\n    0x01010000000000,\n    0x0101000000,\n    0x01010000000000,\n    0x01000001,\n    0x01000001,\n    0x01000001000101,\n    0x01000001000101,\n    0x01000001000101,\n    0x01010001,\n];\nglobal PROCESS_RAW_TRANSCRIPT_TABLE: [Field; 1024] = [\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x060006, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x050005, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x030003, 0x00,\n    0x040004, 0x00, 0x00, 0x00, 0x090009, 0x00, 0x00, 0x00, 0x090009, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x090009, 0x00, 0x090009, 0x00, 0x00, 0x00, 0x090009, 0x090009, 0x090009, 0x090009, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x010001, 0x00, 0x020002, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x060000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x050000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x030000, 0x00, 0x040000, 0x00, 0x00, 0x00,\n    0x090000, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x090000, 0x00,\n    0x090000, 0x00, 0x00, 0x00, 0x090000, 0x090000, 0x090000, 0x090000, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x010000, 0x00, 0x020000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x060108, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x050000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x030000, 0x00, 0x040108, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00,\n    0x00, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x090000, 0x00, 0x00, 0x00,\n    0x090000, 0x090000, 0x090000, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x010000, 0x00, 0x020108,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x09,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x060109,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x050000, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x030000, 0x00, 0x040109, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x090000, 0x090000,\n    0x090000, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x010000, 0x00, 0x020109, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n];\nglobal ASCII_TO_TOKEN_TABLE: [Field; 1024] = [\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00,\n    0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09, 0x00,\n    0x00, 0x00, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n];\nglobal JSON_CAPTURE_TABLE: [Field; 2048] = [\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x00,\n    0x00,\n    0x0100000004,\n    0x0100000004,\n    0x00,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x00,\n    0x0100000004,\n    0x01,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100010004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100010004,\n    0x010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100010004,\n    0x0100000004,\n    0x010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100010004,\n    0x010003,\n    0x0100010004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x01,\n    0x01,\n    0x0100000004,\n    0x0100000004,\n    0x01,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010001,\n    0x010001,\n    0x0100,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x01010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x0100000004,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000104,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000104,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010003,\n    0x0100010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010003,\n    0x0100000004,\n    0x0100010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010003,\n    0x010003,\n    0x0100010004,\n    0x010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x00,\n    0x00,\n    0x0100000004,\n    0x0100000004,\n    0x00,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x00,\n    0x0100000004,\n    0x010001,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100010004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100010004,\n    0x010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100010004,\n    0x0100000004,\n    0x010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100010004,\n    0x010003,\n    0x0100010004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x01,\n    0x01,\n    0x0100000004,\n    0x0100000004,\n    0x01,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x01010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x010001,\n    0x0100000004,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x010001,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x010002,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x010001,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010003,\n    0x0100010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010003,\n    0x0100000004,\n    0x0100010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x010003,\n    0x010003,\n    0x0100010004,\n    0x010003,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100000004,\n    0x0100,\n    0x0100000004,\n    0x0100000004,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n    0x0100000000,\n];\nglobal TOKEN_VALIDATION_TABLE: [Field; 363] = [\n    0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x00, 0x01000000, 0x010000,\n    0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x01000000,\n    0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01, 0x01000000,\n    0x0101, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x00, 0x00, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x00, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x01000000, 0x01000000, 0x00,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000,\n    0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x010000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000,\n    0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01, 0x01000000,\n    0x0101, 0x010000, 0x01000000, 0x01000000, 0x00, 0x00, 0x00, 0x01000000, 0x00, 0x01000000,\n    0x01000000, 0x01000000, 0x010000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01, 0x01000000, 0x0101,\n    0x01000000, 0x01000000, 0x01000000, 0x00, 0x00, 0x00, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x010000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x00,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x010000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01, 0x01000000, 0x0101, 0x01000000, 0x01000000, 0x01000000, 0x00,\n    0x00, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000,\n    0x01000000,\n];\nglobal ASCII_TO_NUMBER: [u8; 128] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    /*   */ 0, /*\"!\"*/ 0, /* \" */ 0, /*\"#\"*/ 0, /*\"$\"*/ 0, /*\"%\"*/ 0, /*\"&\"*/ 0, /*\"'\"*/ 0, /*\"(\"*/ 0,\n    /*\")\"*/ 0, /*\"*\"*/ 0, /*\"+\"*/ 0, /*\",\"*/ 0, /*\"-\"*/ 0, /*\".\"*/ 0, /*\"/\"*/ 0, /*\"0\"*/ 0, // numeric value\n    /*\"1\"*/\n    1, // numeric value\n    /*\"2\"*/\n    2, // numeric value\n    /*\"3\"*/\n    3, // numeric value\n    /*\"4\"*/\n    4, // numeric value\n    /*\"5\"*/\n    5, // numeric value\n    /*\"6\"*/\n    6, // numeric value\n    /*\"7\"*/\n    7, // numeric value\n    /*\"8\"*/\n    8, // numeric value\n    /*\"9\"*/\n    9, // numeric value\n    /*\":\"*/\n    0, /*\";\"*/ 0, /*\"<\"*/ 0, /*\"=\"*/ 0, /*\">\"*/ 0, /*\"?\"*/ 0, /*\"@\"*/ 0, /*\"A\"*/ 0, /*\"B\"*/ 0,\n    /*\"C\"*/ 0, /*\"D\"*/ 0, /*\"E\"*/ 0, /*\"F\"*/ 0, /*\"G\"*/ 0, /*\"H\"*/ 0, /*\"I\"*/ 0, /*\"J\"*/ 0, /*\"K\"*/ 0,\n    /*\"L\"*/ 0, /*\"M\"*/ 0, /*\"N\"*/ 0, /*\"O\"*/ 0, /*\"P\"*/ 0, /*\"Q\"*/ 0, /*\"R\"*/ 0, /*\"S\"*/ 0, /*\"T\"*/ 0,\n    /*\"U\"*/ 0, /*\"V\"*/ 0, /*\"W\"*/ 0, /*\"X\"*/ 0, /*\"Y\"*/ 0, /*\"Z\"*/ 0, /*\"[\"*/ 0, // an array\n    /*\"\\\"*/\n    0, /*\"]\"*/ 0, /*\"^\"*/ 0, /*\"_\"*/ 0, /*\"`\"*/ 0, /*\"a\"*/ 0, /*\"b\"*/ 0, /*\"c\"*/ 0, /*\"d\"*/ 0,\n    /*\"e\"*/ 0, /*\"f\"*/ 0, // \"0\"\n    /*\"g\"*/\n    0, /*\"h\"*/ 0, /*\"i\"*/ 0, /*\"j\"*/ 0, /*\"k\"*/ 0, /*\"l\"*/ 0, /*\"m\"*/ 0, /*\"n\"*/ 0, /*\"o\"*/ 0,\n    /*\"p\"*/ 0, /*\"q\"*/ 0, /*\"r\"*/ 0, /*\"s\"*/ 0, /*\"t\"*/ 0, // \"0\"\n    /*\"u\"*/\n    0, /*\"v\"*/ 0, /*\"w\"*/ 0, /*\"x\"*/ 0, /*\"y\"*/ 0, /*\"z\"*/ 0, /*\"{\"*/ 0, // an object\n    /*\"|\"*/\n    0, /*\"}\"*/ 0, /*\"~\"*/ 0, /*DEL*/ 0,\n];\n\nglobal ESCAPE_SEQUENCE_END_CHARS: [bool; 128] = [\n    /* NULL */ false,\n    /* SOH */ false,\n    /* TXT */ false,\n    /* ETX */ false,\n    /* EOT */ false,\n    /* ENQ */ false,\n    /* ACK */ false,\n    /* BEL */ false,\n    /* BS */ false,\n    /* TAB */ false,\n    /* NL */ false,\n    /* VT */ false,\n    /* FF */ false,\n    /* CR */ false,\n    /* SI */ false,\n    /* SO */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /* SPACE */ false,\n    /*\"!\"*/ false,\n    /* \" */ true, // replace \\\" with double quote\n    /*\"#\"*/\n    false,\n    /*\"$\"*/ false,\n    /*\"%\"*/ false,\n    /*\"&\"*/ false,\n    /*\"'\"*/ false,\n    /*\"(\"*/ false,\n    /*\")\"*/ false,\n    /*\"*\"*/ false,\n    /*\"+\"*/ false,\n    /*\",\"*/ false,\n    /*\"-\"*/ false,\n    /*\".\"*/ false,\n    /*\"/\"*/ false,\n    /*\"0\"*/ false,\n    /*\"1\"*/ false,\n    /*\"2\"*/ false,\n    /*\"3\"*/ false,\n    /*\"4\"*/ false,\n    /*\"5\"*/ false,\n    /*\"6\"*/ false,\n    /*\"7\"*/ false,\n    /*\"8\"*/ false,\n    /*\"9\"*/ false,\n    /*\":\"*/ false,\n    /*\";\"*/ false,\n    /*\"<\"*/ false,\n    /*\"=\"*/ false,\n    /*\">\"*/ false,\n    /*\"?\"*/ false,\n    /*\"@\"*/ false,\n    /*\"A\"*/ false,\n    /*\"B\"*/ false,\n    /*\"C\"*/ false,\n    /*\"D\"*/ false,\n    /*\"E\"*/ false,\n    /*\"F\"*/ false,\n    /*\"G\"*/ false,\n    /*\"H\"*/ false,\n    /*\"I\"*/ false,\n    /*\"J\"*/ false,\n    /*\"K\"*/ false,\n    /*\"L\"*/ false,\n    /*\"M\"*/ false,\n    /*\"N\"*/ false,\n    /*\"O\"*/ false,\n    /*\"P\"*/ false,\n    /*\"Q\"*/ false,\n    /*\"R\"*/ false,\n    /*\"S\"*/ false,\n    /*\"T\"*/ false,\n    /*\"U\"*/ false,\n    /*\"V\"*/ false,\n    /*\"W\"*/ false,\n    /*\"X\"*/ false,\n    /*\"Y\"*/ false,\n    /*\"Z\"*/ false,\n    /*\"[\"*/ false,\n    /*\"\\\"*/ true, // replace \\\\ with \\\n    /*\"]\"*/\n    false,\n    /*\"^\"*/ false,\n    /*\"_\"*/ false,\n    /*\"`\"*/ false,\n    /*\"a\"*/ false,\n    /*\"b\"*/ true, // replace \\b with backspace\n    /*\"c\"*/\n    false,\n    /*\"d\"*/ false,\n    /*\"e\"*/ false,\n    /*\"f\"*/ true, // replace \\f with form feed\n    /*\"g\"*/\n    false,\n    /*\"h\"*/ false,\n    /*\"i\"*/ false,\n    /*\"j\"*/ false,\n    /*\"k\"*/ false,\n    /*\"l\"*/ false,\n    /*\"m\"*/ false,\n    /*\"n\"*/ true, // replace \\n with line feed\n    /*\"o\"*/\n    false,\n    /*\"p\"*/ false,\n    /*\"q\"*/ false,\n    /*\"r\"*/ true, // replace \\r with carriage return\n    /*\"s\"*/\n    false,\n    /*\"t\"*/ true, // replace \\t with tab\n    /*\"u\"*/\n    false,\n    /*\"v\"*/ false,\n    /*\"w\"*/ false,\n    /*\"x\"*/ false,\n    /*\"y\"*/ false,\n    /*\"z\"*/ false,\n    /*\"{\"*/ false,\n    /*\"|\"*/ false,\n    /*\"}\"*/ false,\n    /*\"~\"*/ false,\n    /*DEL*/ false,\n];\n\nglobal ESCAPE_SEQUENCE_START_CHARS: [bool; 128] = [\n    /* NULL */ false,\n    /* SOH */ false,\n    /* TXT */ false,\n    /* ETX */ false,\n    /* EOT */ false,\n    /* ENQ */ false,\n    /* ACK */ false,\n    /* BEL */ false,\n    /* BS */ false,\n    /* TAB */ false,\n    /* NL */ false,\n    /* VT */ false,\n    /* FF */ false,\n    /* CR */ false,\n    /* SI */ false,\n    /* SO */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /*  */ false,\n    /* SPACE */ false,\n    /*\"!\"*/ false,\n    /* \" */ false,\n    /*\"#\"*/ false,\n    /*\"$\"*/ false,\n    /*\"%\"*/ false,\n    /*\"&\"*/ false,\n    /*\"'\"*/ false,\n    /*\"(\"*/ false,\n    /*\")\"*/ false,\n    /*\"*\"*/ false,\n    /*\"+\"*/ false,\n    /*\",\"*/ false,\n    /*\"-\"*/ false,\n    /*\".\"*/ false,\n    /*\"/\"*/ false,\n    /*\"0\"*/ false,\n    /*\"1\"*/ false,\n    /*\"2\"*/ false,\n    /*\"3\"*/ false,\n    /*\"4\"*/ false,\n    /*\"5\"*/ false,\n    /*\"6\"*/ false,\n    /*\"7\"*/ false,\n    /*\"8\"*/ false,\n    /*\"9\"*/ false,\n    /*\":\"*/ false,\n    /*\";\"*/ false,\n    /*\"<\"*/ false,\n    /*\"=\"*/ false,\n    /*\">\"*/ false,\n    /*\"?\"*/ false,\n    /*\"@\"*/ false,\n    /*\"A\"*/ false,\n    /*\"B\"*/ false,\n    /*\"C\"*/ false,\n    /*\"D\"*/ false,\n    /*\"E\"*/ false,\n    /*\"F\"*/ false,\n    /*\"G\"*/ false,\n    /*\"H\"*/ false,\n    /*\"I\"*/ false,\n    /*\"J\"*/ false,\n    /*\"K\"*/ false,\n    /*\"L\"*/ false,\n    /*\"M\"*/ false,\n    /*\"N\"*/ false,\n    /*\"O\"*/ false,\n    /*\"P\"*/ false,\n    /*\"Q\"*/ false,\n    /*\"R\"*/ false,\n    /*\"S\"*/ false,\n    /*\"T\"*/ false,\n    /*\"U\"*/ false,\n    /*\"V\"*/ false,\n    /*\"W\"*/ false,\n    /*\"X\"*/ false,\n    /*\"Y\"*/ false,\n    /*\"Z\"*/ false,\n    /*\"[\"*/ false,\n    /*\"\\\"*/ true, // replace \\\\ with \\\n    /*\"]\"*/\n    false,\n    /*\"^\"*/ false,\n    /*\"_\"*/ false,\n    /*\"`\"*/ false,\n    /*\"a\"*/ false,\n    /*\"b\"*/ false,\n    /*\"c\"*/ false,\n    /*\"d\"*/ false,\n    /*\"e\"*/ false,\n    /*\"f\"*/ false,\n    /*\"g\"*/ false,\n    /*\"h\"*/ false,\n    /*\"i\"*/ false,\n    /*\"j\"*/ false,\n    /*\"k\"*/ false,\n    /*\"l\"*/ false,\n    /*\"m\"*/ false,\n    /*\"n\"*/ false,\n    /*\"o\"*/ false,\n    /*\"p\"*/ false,\n    /*\"q\"*/ false,\n    /*\"r\"*/ false,\n    /*\"s\"*/ false,\n    /*\"t\"*/ false,\n    /*\"u\"*/ false,\n    /*\"v\"*/ false,\n    /*\"w\"*/ false,\n    /*\"x\"*/ false,\n    /*\"y\"*/ false,\n    /*\"z\"*/ false,\n    /*\"{\"*/ false,\n    /*\"|\"*/ false,\n    /*\"}\"*/ false,\n    /*\"~\"*/ false,\n    /*DEL*/ false,\n];\n\nglobal ESCAPE_SEQUENCE_REPLACEMENT: [u8; 128] = [\n    /* NULL */ 0,\n    /* SOH */ 0,\n    /* TXT */ 0,\n    /* ETX */ 0,\n    /* EOT */ 0,\n    /* ENQ */ 0,\n    /* ACK */ 0,\n    /* BEL */ 0,\n    /* BS */ 0,\n    /* TAB */ 0,\n    /* NL */ 0,\n    /* VT */ 0,\n    /* FF */ 0,\n    /* CR */ 0,\n    /* SI */ 0,\n    /* SO */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /*  */ 0,\n    /* SPACE */ 0,\n    /*\"!\"*/ 0,\n    /* \" */ 34, // replace \\\" with double quote\n    /*\"#\"*/\n    0,\n    /*\"$\"*/ 0,\n    /*\"%\"*/ 0,\n    /*\"&\"*/ 0,\n    /*\"'\"*/ 0,\n    /*\"(\"*/ 0,\n    /*\")\"*/ 0,\n    /*\"*\"*/ 0,\n    /*\"+\"*/ 0,\n    /*\",\"*/ 0,\n    /*\"-\"*/ 0,\n    /*\".\"*/ 0,\n    /*\"/\"*/ 0,\n    /*\"0\"*/ 0,\n    /*\"1\"*/ 0,\n    /*\"2\"*/ 0,\n    /*\"3\"*/ 0,\n    /*\"4\"*/ 0,\n    /*\"5\"*/ 0,\n    /*\"6\"*/ 0,\n    /*\"7\"*/ 0,\n    /*\"8\"*/ 0,\n    /*\"9\"*/ 0,\n    /*\":\"*/ 0,\n    /*\";\"*/ 0,\n    /*\"<\"*/ 0,\n    /*\"=\"*/ 0,\n    /*\">\"*/ 0,\n    /*\"?\"*/ 0,\n    /*\"@\"*/ 0,\n    /*\"A\"*/ 0,\n    /*\"B\"*/ 0,\n    /*\"C\"*/ 0,\n    /*\"D\"*/ 0,\n    /*\"E\"*/ 0,\n    /*\"F\"*/ 0,\n    /*\"G\"*/ 0,\n    /*\"H\"*/ 0,\n    /*\"I\"*/ 0,\n    /*\"J\"*/ 0,\n    /*\"K\"*/ 0,\n    /*\"L\"*/ 0,\n    /*\"M\"*/ 0,\n    /*\"N\"*/ 0,\n    /*\"O\"*/ 0,\n    /*\"P\"*/ 0,\n    /*\"Q\"*/ 0,\n    /*\"R\"*/ 0,\n    /*\"S\"*/ 0,\n    /*\"T\"*/ 0,\n    /*\"U\"*/ 0,\n    /*\"V\"*/ 0,\n    /*\"W\"*/ 0,\n    /*\"X\"*/ 0,\n    /*\"Y\"*/ 0,\n    /*\"Z\"*/ 0,\n    /*\"[\"*/ 0,\n    /*\"\\\"*/ 92, // replace \\\\ with \\\n    /*\"]\"*/\n    0,\n    /*\"^\"*/ 0,\n    /*\"_\"*/ 0,\n    /*\"`\"*/ 0,\n    /*\"a\"*/ 0,\n    /*\"b\"*/ 8, // replace \\b with backspace\n    /*\"c\"*/\n    0,\n    /*\"d\"*/ 0,\n    /*\"e\"*/ 0,\n    /*\"f\"*/ 12, // replace \\f with form feed\n    /*\"g\"*/\n    0,\n    /*\"h\"*/ 0,\n    /*\"i\"*/ 0,\n    /*\"j\"*/ 0,\n    /*\"k\"*/ 0,\n    /*\"l\"*/ 0,\n    /*\"m\"*/ 0,\n    /*\"n\"*/ 10, // replace \\n with line feed\n    /*\"o\"*/\n    0,\n    /*\"p\"*/ 0,\n    /*\"q\"*/ 0,\n    /*\"r\"*/ 13, // replace \\r with carriage return\n    /*\"s\"*/\n    0,\n    /*\"t\"*/ 9, // replace \\t with tab\n    /*\"u\"*/\n    0,\n    /*\"v\"*/ 0,\n    /*\"w\"*/ 0,\n    /*\"x\"*/ 0,\n    /*\"y\"*/ 0,\n    /*\"z\"*/ 0,\n    /*\"{\"*/ 0,\n    /*\"|\"*/ 0,\n    /*\"}\"*/ 0,\n    /*\"~\"*/ 0,\n    /*DEL*/ 0,\n];\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/json_tables.nr"
    },
    "141": {
      "source": "use crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::END_OBJECT_TOKEN;\nuse crate::getters::JSONValue;\nuse crate::json::JSON;\nuse crate::json_entry::JSONEntry;\n\n/**\n * @brief getter methods for extracting object types out of a JSON struct\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief if the root JSON is an object, extract a child object given by `key`\n     * @description returns an Option<JSON> where, if the object exists, the JSON object will have the requested object as its root value  \n     **/\n    fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * exists as Field == 0,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        Option { _is_some: exists, _value: r }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a child object given by `key`\n     * @description will revert if the requested object does not exist\n     **/\n    fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n        let (entry, key_index) = self.get_json_entry_unchecked_with_key_index(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        r\n    }\n\n    /**\n     * @brief same as `get_object` for where the key length may be less than KeyBytes\n     **/\n    fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * exists as Field == 0,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        Option { _is_some: exists, _value: r }\n    }\n\n    /**\n     * @brief same as `get_object_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n        let (entry, key_index) = self.get_json_entry_unchecked_with_key_index_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        r\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract an object given by the position of the target in the source array\n     * @description returns an Option<JSON> where, if the object exists, the JSON object will have the requested object as its root value  \n     **/\n    fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * valid as Field == 0,\n            \"get_object_from_array: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = entry_index;\n\n        Option { _is_some: valid, _value: r }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract an object given by the position of the target in the source array\n     * @description will revert if the object does not exist\n     **/\n    fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object_from_array_unchecked: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = entry_index;\n        r\n    }\n}\n\n#[test]\nfn test_object() {\n    let text = \"{ \\\"foo\\\": [ [1,{ \\\"bartholomew tony Harrison III\\\": { \\\"hello\\\": \\\"world\\\" }},3], [[3,4]], [[]], [], { \\\"bar\\\": [\\\"b\\\", \\\"a\\\", \\\"z\\\" ]} ]}\";\n\n    let mut json: JSON<123, 7, 60, 60, 2> = JSON::parse_json_from_string(text);\n\n    let first = json.get_array_unchecked(\"foo\".as_bytes());\n    assert(first.get_length() == 5);\n\n    let A = first.get_array_from_array_unchecked(0);\n    assert(A.get_length() == 3);\n\n    let B = A.get_object_from_array_unchecked(1);\n    let B_alt = A.get_object_from_array(1);\n    assert(B == B_alt.unwrap());\n\n    let C = B.get_object_unchecked(\"bartholomew tony Harrison III\".as_bytes());\n    assert(JSONEntry::from(C.json_entries_packed[C.root_index_in_transcript]).num_children == 1);\n\n    let not_real = B.get_object(\"bartholomew tony Harrison IV\".as_bytes());\n    assert(not_real.is_some() == false);\n\n    let C = B.get_object_unchecked_var(\n        BoundedVec { storage: \"bartholomew tony Harrison III\".as_bytes(), len: 29 },\n    );\n    assert(JSONEntry::from(C.json_entries_packed[C.root_index_in_transcript]).num_children == 1);\n\n    let C = B.get_object_var(\n        BoundedVec { storage: \"bartholomew tony Harrison III\".as_bytes(), len: 28 },\n    );\n    assert(C.is_some() == false);\n\n    let C = B.get_object_var(\n        BoundedVec { storage: \"bartholomew tony Harrison IIIekurfgaeoiurh\".as_bytes(), len: 29 },\n    );\n    assert(C.is_some() == true);\n\n    let second = first.get_object_from_array_unchecked(4);\n\n    let third = second.get_array_unchecked(\"bar\".as_bytes());\n\n    let E: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(0);\n    let F: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(1);\n    let G: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(2);\n    assert(E.storage == \"b\".as_bytes());\n    assert(F.storage == \"a\".as_bytes());\n    assert(G.storage == \"z\".as_bytes());\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_json_parser/main/src/get_object.nr"
    },
    "142": {
      "source": "pub mod quicksort;\nuse crate::quicksort::quicksort::quicksort as quicksort;\nuse crate::quicksort::quicksort_explicit::quicksort as quicksort_explicit;\nuse dep::check_shuffle::{check_shuffle, get_shuffle_indices};\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Ord and Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n * Note: sort_extended is likely more efficient as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort<T, let N: u32>(input: [T; N]) -> [T; N]\nwhere\n    T: std::cmp::Ord + std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort(input) };\n\n    for i in 0..N - 1 {\n        assert(sorted[i] <= sorted[i + 1]);\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n *\n * The `sortfn` parameter is a function that descibes whether, given two elements `a, b` of type T, `a <= b`\n * Note: sort_extended is likely more efficient as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort_via<T, let N: u32>(input: [T; N], sortfn: fn(T, T) -> bool) -> [T; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    for i in 0..N - 1 {\n        assert(sortfn(sorted[i], sorted[i + 1]));\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n *\n * The `sortfn` parameter is a function that descibes whether, given two elements `a, b` of type T, `a <= b`\n * The `sortfn_assert` parameter is a function that *asserts* that `a <= b`\n *\n * `sortfn` is used in unconstrained functions only\n * `sortfn_assert` is used in constrained functions\n\n * Note: This is likely the most efficient sort function as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort_extended<T, let N: u32>(\n    input: [T; N],\n    sortfn: fn(T, T) -> bool,\n    sortfn_assert: fn(T, T) -> (),\n) -> [T; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    for i in 0..N - 1 {\n        sortfn_assert(sorted[i], sorted[i + 1]);\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\npub struct SortResult<T, let N: u32> {\n    pub sorted: [T; N],\n    pub sort_indices: [Field; N],\n}\npub fn sort_advanced<T, let N: u32>(\n    input: [T; N],\n    sortfn: fn(T, T) -> bool,\n    sortfn_assert: fn(T, T) -> (),\n) -> SortResult<T, N>\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    let sort_indices = get_shuffle_indices(input, sorted);\n\n    for i in 0..N - 1 {\n        sortfn_assert(sorted[i], sorted[i + 1]);\n    }\n    SortResult { sorted, sort_indices }\n}\n\nmod test {\n    use crate::sort;\n    use crate::sort_extended;\n    use crate::sort_via;\n\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    // unconditional_lt will cost fewer constraints than the `<=` operator\n    // as we do not need to constrain the case where `a > b`, and assign a boolean variable to the result\n    fn unconditional_lt(_a: u32, _b: u32) {\n        let a = _a as Field;\n        let b = _b as Field;\n\n        let diff = b - a;\n        diff.assert_max_bit_size::<32>();\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort(arr);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort_via(arr, sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_extended() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort_extended(arr, sort_u32, unconditional_lt);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n}\n\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_sort/v0.2.2/src/lib.nr"
    },
    "144": {
      "source": "pub trait Swap {\n    fn swap(&mut self, i: u32, j: u32);\n}\n\nimpl<T, let N: u32> Swap for [T; N] {\n    fn swap(&mut self, i: u32, j: u32) {\n        let temp = self[i];\n        self[i] = self[j];\n        self[j] = temp;\n    }\n}\n\nunconstrained fn partition<T, let N: u32>(arr: &mut [T; N], low: u32, high: u32) -> u32\nwhere\n    T: std::cmp::Ord,\n{\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (arr[j] < arr[pivot]) {\n            arr.swap(i, j);\n            i += 1;\n        }\n    }\n    arr.swap(i, pivot);\n    i\n}\n\nunconstrained fn quicksort_recursive<T, let N: u32>(arr: &mut [T; N], low: u32, high: u32)\nwhere\n    T: std::cmp::Ord,\n{\n    if low < high {\n        let pivot_index = partition(arr, low, high);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high);\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32>(_arr: [T; N]) -> [T; N]\nwhere\n    T: std::cmp::Ord,\n{\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1);\n    }\n    arr\n}\n\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_sort/v0.2.2/src/quicksort/quicksort.nr"
    },
    "145": {
      "source": "pub trait Swap {\n    fn swap(&mut self, i: u32, j: u32);\n}\n\nimpl<T, let N: u32> Swap for [T; N] {\n    fn swap(&mut self, i: u32, j: u32) {\n        let temp = self[i];\n        self[i] = self[j];\n        self[j] = temp;\n    }\n}\n\nunconstrained fn partition<T, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn(T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            arr.swap(i, j);\n            i += 1;\n        }\n    }\n    arr.swap(i, pivot);\n    i\n}\n\nunconstrained fn quicksort_recursive<T, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn(T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32>(_arr: [T; N], sortfn: fn(T, T) -> bool) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_sort/v0.2.2/src/quicksort/quicksort_explicit.nr"
    },
    "146": {
      "source": "unconstrained fn __get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [Field; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let mut shuffle_indices: [Field; N] = [0; N];\n\n    let mut shuffle_mask: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut found = false;\n        for j in 0..N {\n            if ((shuffle_mask[j] == false) & (!found)) {\n                if (lhs[i] == rhs[j]) {\n                    found = true;\n                    shuffle_indices[i] = j as Field;\n                    shuffle_mask[j] = true;\n                }\n            }\n            if (found) {\n                continue;\n            }\n        }\n        assert(found == true, \"check_shuffle, lhs and rhs arrays do not contain equivalent values\");\n    }\n\n    shuffle_indices\n}\n\nunconstrained fn __get_index<let N: u32>(indices: [Field; N], idx: Field) -> Field {\n    let mut result = 0;\n    for i in 0..N {\n        if (indices[i] == idx) {\n            result = i as Field;\n            break;\n        }\n    }\n    result\n}\n\npub fn check_shuffle<T, let N: u32>(lhs: [T; N], rhs: [T; N])\nwhere\n    T: std::cmp::Eq,\n{\n    //@Safety: check the comments below\n    let shuffle_indices = unsafe { __get_shuffle_indices(lhs, rhs) };\n\n    for i in 0..N {\n        let idx = unsafe { __get_index(shuffle_indices, i as Field) };\n        // checks the relation between shuffle_indices and output of __get_index\n        assert_eq(shuffle_indices[idx], i as Field);\n    }\n    for i in 0..N {\n        let idx = shuffle_indices[i];\n        let expected = rhs[idx];\n        let result = lhs[i];\n        // checks the relation between shuffle_indices and the lhs, rhs inputs\n        assert_eq(expected, result);\n    }\n}\n\npub fn get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [Field; N]\nwhere\n    T: std::cmp::Eq,\n{\n    //@Safety: as explained in check_shuffle function\n    let shuffle_indices = unsafe { __get_shuffle_indices(lhs, rhs) };\n    for i in 0..N {\n        let idx = unsafe { __get_index(shuffle_indices, i as Field) };\n        assert_eq(shuffle_indices[idx], i as Field);\n    }\n    for i in 0..N {\n        let idx = shuffle_indices[i];\n        let expected = rhs[idx];\n        let result = lhs[i];\n        assert_eq(expected, result);\n    }\n    shuffle_indices\n}\n\nmod test {\n    struct CompoundStruct {\n        a: bool,\n        b: Field,\n        c: u64,\n    }\n    impl std::cmp::Eq for CompoundStruct {\n        fn eq(self, other: Self) -> bool {\n            (self.a == other.a) & (self.b == other.b) & (self.c == other.c)\n        }\n    }\n\n    use crate::check_shuffle;\n    #[test]\n    fn test_shuffle() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_identity() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_fail() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 5];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_duplicates() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 3];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_compound_struct() {\n        let lhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n        ];\n        let rhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n        ];\n        check_shuffle(lhs, rhs);\n    }\n}\n\n#[export]\nfn bench_test() {\n    let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n    let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n    check_shuffle(lhs, rhs);\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/noir-lang/noir_check_shuffle/v0.2.0/src/lib.nr"
    },
    "149": {
      "source": "use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\npub fn verify_sha256_pss<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    key_size: u32,\n) -> bool {\n    // Exponentiate the signature assuming e = 65537\n    let mut exponentiated = sig * sig;\n    for _ in 0..15 {\n        exponentiated = exponentiated * exponentiated;\n    }\n    exponentiated = exponentiated * sig;\n\n    // Convert the exponentiated signature to a byte array and reverse it to\n    // get it in big endian order, which is much easier to work with for\n    // the rest of the verification process\n    let em: [u8; ModBits / 8] = reverse_array(exponentiated.to_le_bytes());\n\n    // The modulus size in bits minus 1\n    let em_bits = key_size - 1;\n    // The actual length of the encoded message without any of the leftmost 0s\n    let em_len = (em_bits + 7) / 8;\n    // The length of the modulus in bytes\n    let key_len = (key_size + 7) / 8;\n    let h_len = 32;\n    let s_len = 32;\n\n    // Check if emLen < hLen + sLen + 2\n    assert(em_len >= h_len + s_len + 2);\n\n    // Check if eM ends with 0xBC\n    assert_eq(em[em.len() - 1], 0xBC);\n\n    let db_mask_len = em_len - h_len - 1;\n    // In some rare cases, em_len is not equal to key_len (e.g. 1025 bit RSA)\n    // In this case, we'll have a leading zero byte in em that we need to ignore\n    // c.f. https://github.com/RustCrypto/RSA/blob/aeedb5adf5297892fcb9e11f7c0f6c0157005c58/src/algorithms/pss.rs#L242\n    let offset = key_len - em_len;\n    // As the hash is 32 bytes and we also remove the 0xBC at the end, we have up to NumBytes - 33 bytes left for DB\n    // For example, for 2048 bit RSA (i.e. 256 bytes), we have 256 - 33 = 223 bytes left for DB\n    // and for 1024 bit RSA (i.e. 128 bytes), we have 128 - 33 = 95 bytes left for DB\n    let masked_db: [u8; (ModBits / 8) - 33] = get_array_slice(em, offset, db_mask_len + offset);\n    let h = get_array_slice(em, db_mask_len + offset, em.len() - 1);\n\n    // Make sure the 8 * em_len - em_bits leftmost bits are 0\n    // c.f. https://github.com/RustCrypto/RSA/blob/aeedb5adf5297892fcb9e11f7c0f6c0157005c58/src/algorithms/pss.rs#L205\n    let bits_to_mask = 8 - (8 * em_len - em_bits);\n    let mask_value = pow(2, bits_to_mask as u32);\n    assert_eq(masked_db[0] as u32 / mask_value, 0);\n\n    // Generate dbMask using MGF1\n    let db_mask: [u8; (ModBits / 8) - 33] = mgf1_sha256(h);\n\n    // Compute DB = maskedDB xor dbMask\n    let mut db = [0 as u8; (ModBits / 8) - 33];\n    for i in 0..db_mask_len {\n        db[i] = masked_db[i] ^ db_mask[i];\n    }\n\n    // Set leftmost byte of DB to 0\n    db[0] = 0;\n\n    // Check if the leftmost octets of DB are zero\n    for i in 0..(em_len - h_len - s_len - 2) {\n        assert_eq(db[i], 0);\n    }\n\n    // Check if the octet at position emLen - hLen - sLen - 2 is 1\n    assert_eq(db[em_len - h_len - s_len - 2], 1);\n\n    // Extract salt\n    let salt: [u8; 32] = get_array_slice(db, db_mask_len - s_len, db_mask_len);\n\n    // Construct M'\n    // M' = (0x)00 00 00 00 00 00 00 00 || msg_hash || salt\n    let mut m_prime = [0 as u8; 72]; // 8 + h_len + s_len\n    for i in 8..40 {\n        m_prime[i] = msg_hash[i - 8];\n    }\n    for i in 40..72 {\n        m_prime[i] = salt[i - 40];\n    }\n\n    // Compute H'\n    let h_prime = dep::std::hash::sha256(m_prime);\n\n    // Compare H and H'\n    h == h_prime\n}\n\nfn reverse_array<let N: u32>(array: [u8; N]) -> [u8; N] {\n    let mut reversed = [0 as u8; N];\n    for i in 0..N {\n        reversed[i] = array[N - i - 1];\n    }\n    reversed\n}\n\nfn get_array_slice<let N: u32, let M: u32>(array: [u8; N], start: u32, end: u32) -> [u8; M] {\n    assert(end - start <= M);\n    let mut slice = [0 as u8; M];\n    for i in 0..M {\n        if i < end - start {\n            slice[i] = array[start + i];\n        }\n    }\n    slice\n}\n\nfn pow(base: u32, exp: u32) -> u32 {\n    let mut result = 1;\n    for _ in 0..exp {\n        result *= base;\n    }\n    result\n}\n\nglobal HASH_LEN: u32 = 32;\n\n/**\n * @brief Generate a mask from a seed using the MGF1 algorithm with SHA256 as the hash function\n **/\nfn mgf1_sha256<let SEED_LEN: u32, let MASK_LEN: u32>(seed: [u8; SEED_LEN]) -> [u8; MASK_LEN] {\n    // MASK_LEN must be less than 2^32 * HASH_LEN\n    std::field::bn254::assert_lt(MASK_LEN as Field, 0xffffffff * HASH_LEN as Field + 1);\n\n    // HASH_LEN bytes are added at each iteration and there is at least 1 iteration\n    // so if HASH_LEN is not enough to fill MASK_LEN bytes in one iteration,\n    // another one is required and so on.\n    let iterations = (MASK_LEN / HASH_LEN) + 1;\n\n    let mut mask: [u8; MASK_LEN] = [0; MASK_LEN];\n    let mut hashed: [u8; HASH_LEN] = [0; HASH_LEN];\n\n    for i in 0..iterations {\n        let mut block: [u8; SEED_LEN + 4] = [0; SEED_LEN + 4];\n\n        // Copy seed to block\n        for j in 0..SEED_LEN {\n            block[j] = seed[j];\n        }\n\n        // Add counter to block\n        let counter_bytes: [u8; 4] = (i as Field).to_be_bytes();\n        for j in 0..4 {\n            block[SEED_LEN + j] = counter_bytes[j];\n        }\n\n        // Hash the block\n        // First SEED_LEN bytes are the seed, next 4 bytes are the counter\n        hashed = dep::std::hash::sha256_var(block, SEED_LEN as u64 + 4);\n\n        // Copy hashed output to mask\n        for j in 0..HASH_LEN {\n            if i * HASH_LEN + j < MASK_LEN {\n                mask[i * HASH_LEN + j] = hashed[j];\n            }\n        }\n    }\n\n    mask\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n\n#[test]\nfn test_mgf1_sha256() {\n    let seed: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    let expected_mask: [u8; 32] = [\n        106, 93, 232, 46, 236, 203, 51, 228, 103, 104, 145, 29, 197, 74, 26, 194, 135, 200, 40, 232,\n        179, 172, 220, 135, 51, 185, 209, 35, 194, 131, 176, 190,\n    ];\n    let mask: [u8; 32] = mgf1_sha256(seed);\n    assert(mask == expected_mask);\n}\n\n#[test]\nfn test_verify_sha256_pss_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x45648f4ade2ac1f40c18b44a2951ad,\n            0xd558cced315cbced65532e416ab0ea,\n            0x67c3818b41ed79f0e9e06b10b31a39,\n            0x9bb9db99001fe165b2a18bfb8ff423,\n            0xc792c2037f2abe206bdc987898a73b,\n            0x6630acf8743e8ffca5199b195d2e32,\n            0xbffc9f0464184da3de5f0efa5a705b,\n            0xe14bd49bd3ec93d8f3e84f47a32e6d,\n            0x2d6abfec39882cd67f7804b9ff278e,\n            0x1140883fa39129d297ebee534cdf58,\n            0x96bc387e08849589aa1dda5d381cd2,\n            0x31c60ecdf4d3c1119814b724779a9e,\n            0x1a4882267e3e2e6074b40448d62087,\n            0x9e015854d57eae42e5b515d357a755,\n            0xb593f8dfc8434f32d7d30277b1abc,\n            0x4e7184b54966a30552fc92df470aa,\n            0xa8a3c9172762978b03464671f8288e,\n            0xba,\n        ],\n        [\n            0x1c63831dbaa98693ab59ca2ae5a88,\n            0x3e67cf06ca2556701f3aa8d158552,\n            0x7c63171078a831165ed8b2dd116675,\n            0x9e1f1bca55d0e220e58ddbbb387972,\n            0xd7c72f20722cc7af897d5819424801,\n            0xf0434a631cffe4c4d56874bff93661,\n            0x8767e83f45cfff15cca95d5dc6f48c,\n            0xf210d697748e9ad45c0f7c3ed3bda8,\n            0xc960d59cb9dd48d50e12c2ef04dda2,\n            0xbf07cf1ecc532686848dca09d061c2,\n            0xc491a60be200f9574ad6aa31977a4f,\n            0x67681170f25ab2aff941b18e21e1bd,\n            0xc485fc6deda1ba84f2bfcfbea2c044,\n            0x776bc3eac3728ec7f85ca2496ee8e4,\n            0x4d82eeb8ecdc1ec53280fce96c05e,\n            0x514088d39ff1cae50d2f67db91458f,\n            0x9c1553de9eef61a83b288c4d11610e,\n            0x15f1,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xcce57aaed9eed21edef9d96d9ebdf8,\n            0x181f152657736ea458462ff45b1d81,\n            0x9df8c00fefe67c3a727c1f84641d2a,\n            0xe3bb299609d4f4bfe7e979123f6962,\n            0x6cf987c686983f184262419dc8d64b,\n            0xedc086f713d60c9d661a4e7fdae380,\n            0xb95ada34d5b9217d9eaa89d1d7a3d1,\n            0xec275d1d4e3e74296eab26318df81f,\n            0x3c943e2d3e12f1394952de70d92ac9,\n            0x4a4e8a625138a533b9b71cbb03c991,\n            0xa5379dfc363e79c5a55ad71a01948e,\n            0x9340e047e0d4be67ac7f1517fe2673,\n            0xdf2606ac8cbbcad391c5e925bf5082,\n            0x249690032f10b7986e7edbb8ec0d6a,\n            0x8c07da4fbed69ab71f127fb5edf73c,\n            0x64aefd403b6a4353ebdc9b7fce82bc,\n            0x5ecc107633bc4cc1a3adb545b474de,\n            0x7b,\n        ],\n    };\n\n    assert(verify_sha256_pss(sha256_hash, signature, 2048));\n}\n\n#[test]\nfn test_verify_sha256_pss_4096() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    let params: BigNumParams<35, 4096> = BigNumParams::new(\n        false,\n        [\n            0xa6222b52f49e7258fe4fee04ea2d9,\n            0x2fd64c9fce4dba1e003e9b0947ee34,\n            0xf46a24f43be90f258013ba55794c6a,\n            0xda8100ed967a7577f4144295e37b68,\n            0x8545db58ed5cb1a78661a725c2e2df,\n            0xfc1673fba9882dc0c1bf1ebd95e9a7,\n            0xf8863f5481969b504d93ec7b3634f,\n            0xafedf06a9d7583f1c06b2ee8a1f2b8,\n            0x375c3f57b70cb7fc6b934445a97ebe,\n            0xd89ad291b95a70bf4922b45d2efff8,\n            0x2bf000f6408944083d93e45030e827,\n            0xf55cb42313719c7a2bfa07b3eb1ed4,\n            0x6d8656a0f3b41fa1a717140dc5ce90,\n            0x404b10d983681bd3f9ed1534d5bfa2,\n            0xced48aead2b9ba16f08a0fb968a96c,\n            0x43acf088910c3322f7da5c2d0a2211,\n            0x58b7e2d7b7f268eb990fc464defe90,\n            0x2be3be3a4fedf432a98dda3c220958,\n            0xf9156a2bafb69ef294360c25d22759,\n            0x1b7e6763845875a1886345b4ee8940,\n            0xa40ae130e9762120841e1930873975,\n            0x2d883272a543cf8fd0cdfbecc94367,\n            0x715a88142fec78eb472f6684cd942d,\n            0xdd302fea25298915e2db875f6ab621,\n            0x6612ced822df9c00c368466391fe23,\n            0x48acb5eea186585b9c24443397b8fb,\n            0x53fc8b5e2bedc30b81f632371f1e8a,\n            0x7ef026faeb670fc44abfeee192bec6,\n            0xb07bb4bfb19773a319052ffac029a9,\n            0x81c21e9e538893cb04debde34bc02e,\n            0x823427edc35eaf0a2f5d493318db74,\n            0xbad02f47a1ff078d0103affc3792b1,\n            0xe297eab3b3edafcf99c2ba52cb8424,\n            0x3e7e575d40629a07980fa71996e807,\n            0xc27a,\n        ],\n        [\n            0x54aba16603d87dec091aa1821ce3b0,\n            0x8f6a9c560fe4f4d5fb83999853bd1c,\n            0x4d9b41fcc316ae6b1a9bb7eefa7713,\n            0x623fcac3bfa0aa5f932acc0f0f28c9,\n            0xb29eca15e9ba6d9bbcd2ac543f9558,\n            0x43689b8fe8bbb48269c2fb3b03a624,\n            0xc6f8b1cbefb4cb7d2eec1bc951808b,\n            0x4074a7837f67403f497133fee0e29,\n            0x536ba97fd34f92aae1e0354bc17db0,\n            0x784c203e438e43ddddae491fd0c0e9,\n            0xf41ae3f5f5060d212bcc7c4ee71d2,\n            0xe539fd3b39a98377199ae15d165ea,\n            0xd13be03a50e9694c4c84e2541303ed,\n            0x38136b8771f62c9778e1f812ceadec,\n            0x23bea00ab5c2efafde2c8ea46673a8,\n            0xa4d3523ba9389da81c46adde61fece,\n            0xadb3053369bb6e7233eea01174caa2,\n            0x68995fa9f373e420a9f6e6fa2329e7,\n            0x38f83f074d3ee3674e7336349a0d4e,\n            0xd9ecb79c431b08a695e4808a636a48,\n            0x3498c268b8bb4936c9e8f9fa73da27,\n            0x123ed10b1358dde62125f1191fc922,\n            0xa5a412e4c3c73dbb5cba119c48af2d,\n            0xbee3217219d507e4a6ff74b9b9eee5,\n            0x2ee5efcaee7ca45ffcd85f10eeb21b,\n            0xb977bc65277e5723737f52905837bc,\n            0xd1fd3aa6e7717bceccf73b04c8bf2d,\n            0x7964355f3acd61d2408ce20a964740,\n            0xfc2e76f487e6ca0e6bcadbf9d3801d,\n            0xfb0ea20336cf95062efb880d82cab5,\n            0x6884d9ca882e37df90f8f5c603b7b1,\n            0x9be945fc633fcc0dd2b84ec1debef5,\n            0x8d834cbc2c9a3aa4a85a3994bc569d,\n            0x7055060035c122b095b75e6de37d48,\n            0x150fc2,\n        ],\n    );\n    let signature: RuntimeBigNum<35, 4096> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xdeb402a595b32a248fd427ed84c743,\n            0x75f1b3656f2eb61c3e4164375052cf,\n            0x33aa80998875b8b48263611706607b,\n            0xd9c80be79f586e80ac3af1a8d5ea53,\n            0xf0b116fd85546f206ae49d041d0223,\n            0x406a397f56e62863aa7b6ed1429dec,\n            0xd7e0bbd7ac00a419f3fef0098e904f,\n            0x303665df221e3691c84c6502d1b807,\n            0xb2ce0e36df94a88f8120b53a0bcb84,\n            0xe8e55991ffdb5b731b77cb249991d1,\n            0xbaa946c3acb9696a4d416d86291fd2,\n            0x7746a7486603b1cfb5dc5f800ee409,\n            0x567d9470319309142967b699404091,\n            0x5ee6fbb50c8637805ec6c7780a9e0a,\n            0x32bf8a51bc178cdb664ca911c857ea,\n            0xe928146ddcc0865c10215611955243,\n            0x5d12083acd2e3a1b7f7313dea0b894,\n            0x8620f5ba7615db0a3285c735813a73,\n            0x7b84f0e392902e84792c4879f48fbc,\n            0x1437df81c544ea4d7fdb020bfb7fcb,\n            0x09fb8b36d3a58a6a5fff27c1664d97,\n            0xef70898862d34d8f2d7c1bb1fb8103,\n            0xd24f625196ae71e3064596a7dd80f3,\n            0xeb646b3e5958fc213a0f711a5c68c4,\n            0x7f57a200d1894a07a33610c56a543d,\n            0xa54baf3fadfe09f896d2f2c88df7e7,\n            0xb605122c80e189236329bbf9ad6c9f,\n            0xa6ac0b396215d0f50b3705cd08788a,\n            0xdad6946e3c27a25ab484a0ed338788,\n            0x874dfd4c3723c395217a881b93283a,\n            0xf5ac1d98a50f59a40db4e2d4864a07,\n            0x9d6ed5b0d10028a291588a3359cd32,\n            0x7d8b67a1bad38a5ec750dc27bc8ae0,\n            0xa2ddd25f61adf97f5e2e8a0ef99ba8,\n            0x2244,\n        ],\n    };\n    assert(verify_sha256_pss(sha256_hash, signature, 4096));\n}\n\n// doesnt work yet need better method\n// #[test]\nfn test_verify_sha256_pss_1964() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    let params: BigNumParams<17, 1964> = BigNumParams::new(\n        false,\n        [\n            0xe62ce4613d178a8af9154a28c804c9,\n            0xe9c80bb90ee949aa26d5554f5b7323,\n            0xa823c32e66dce57c7617704f092c82,\n            0x8b7eee92772e414a23ee9dd5ef843a,\n            0x6590039cb62daeea7a96faf674175c,\n            0x2905f4400973a1442181701f12f30d,\n            0xc5f0a37929848a5fbe070ddc915dee,\n            0x2ada1490d935ef7700c43dc2565539,\n            0xa99acb3b526abb963d71e527c17e2e,\n            0xf9d79341476659c231dc93313fb440,\n            0x168d8abd0528fa146b6401034358f2,\n            0x6d7386e7d66bec5392a463d34f7b5d,\n            0xeb245f85612f76849ce32cd5f9011e,\n            0x2d171c40f36f34eeb17b4643c7f9e2,\n            0xd582273cf4c5fb0c195ccac1526478,\n            0x1df64d0a6c95698d34c1b16640ad92,\n            0xdd8e29ecdc0,\n        ],\n        [\n            0x7893f159b37d9b4d46e77e420d3315,\n            0x97913c7ea0db74a13b793686c0fa,\n            0x3eddab2786c599e1fcd99b06a1b151,\n            0x6f922b72a2386f483d35d5017ef102,\n            0xcf9ede21d4ca70a045ccdac95c1e9,\n            0xbe7c0cc79955f74eafb82000838e19,\n            0x26bd0fc82288bde663f5dff239b55b,\n            0x95f857821550531b848b454b4f7dc7,\n            0xef08d9d594fbf1547ac00a03323aa7,\n            0x3bb9f9263bfe85814477c58de4934d,\n            0x214887fd218e3573f1aae50917a816,\n            0xe6f1abc97678adf59b2008645d8802,\n            0x28dd35618649eef12941db95081242,\n            0xc13764316f70444e7120b6ae5088f5,\n            0xefb1aba9512f1b2c88db34a4938796,\n            0x6aed9a143fb37749eca936a60ae25c,\n            0x127ccb9568ee6,\n        ],\n    );\n\n    let signature: RuntimeBigNum<17, 1964> = RuntimeBigNum {\n        params,\n        limbs: [\n            0x37c3a3f915fb9e787412d457ec4a63,\n            0xd60918c40b6c50bcc8afa8d1ea754f,\n            0x98eec8d63deeb22eca4f9d15b7e935,\n            0xc841db8c9930934dcc8171a5fee4b4,\n            0x3341bdb96ed1d734959e257dbc85ca,\n            0x32701c7557ca04c15cd9e18f45d37b,\n            0xefd3dae979f5a920654dc7a3ea2277,\n            0x1d6724ec09b112e8776c115874a53f,\n            0xf403d3593f85b9ab421fa26bf99298,\n            0x04e85e3628f4c3fc254a92c56ba0b8,\n            0x975bb82f1fe3c3d1656e098682f69f,\n            0x0ad72d532c8e6e17398d918c360973,\n            0xc4ba256370766c633e77d4102a8919,\n            0xc4d3bb32bc889aca394bef272d3f71,\n            0x5d56778a3d1ad3117471d4060761b0,\n            0x5fd5d71fec72f615614d6347935f35,\n            0x09ab8ab67e43,\n        ],\n    };\n    assert(verify_sha256_pss(sha256_hash, signature, 4096));\n\n}\n\n#[test]\nfn test_verify_sha256_pss_jwt() {\n    let hash: [u8; 32] = [\n        190, 196, 184, 50, 102, 89, 57, 43, 211, 245, 140, 168, 170, 163, 80, 128, 25, 139, 25, 68,\n        239, 215, 154, 164, 148, 234, 47, 212, 6, 140, 157, 110,\n    ];\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x83e879145bffccbe4d783abeca8999,\n            0xb7d9868f5b915b43f6c6a8193a1a4f,\n            0x67f95badedef107f0998ab3d52961e,\n            0x7dcc9780ac8d71c6b49bbfeca25f0,\n            0xf9fdced289a3d4f62830681be65b50,\n            0x986aa8fe98888e9f609af97515b036,\n            0xd494bc65f4608849a6ed8cf5cb82ed,\n            0x18ca508b8353e676387d22667e4adb,\n            0x9d3fcb816b4763099ccbb7416a7ad,\n            0xcfd89fee1ffcfa5f2243c92e3908b7,\n            0xcaf320fbb34158238b41042f9c6386,\n            0xb3df0cd5dee269ecec61b342880c59,\n            0x2134236dc67b59df001cac48181625,\n            0x536d424ce3dcaf2b3c15eba3ceb98,\n            0x7c6532647de2f025c4245c4a816ea9,\n            0x1ca6b6ac38706f61dd460c53293c88,\n            0x812b9256f612815edb22ec614a6c89,\n            0xc9,\n        ],\n        [\n            0x9ec08341171d384b92ed35848dac43,\n            0xaa5e7059598102ad1d99f33e533781,\n            0x894978a6e54a780efd6c579b74dd3f,\n            0x9531219036eb346dc4d2f142d9aeb3,\n            0x2d67220edac65500daea360896b937,\n            0x72393de3ce76a185b8d5fe4efeb301,\n            0x2e5a676dc2d3d971ead0a1a8127ff1,\n            0xbb92e11f4b88fb1f478a8e5fcc8a63,\n            0x978205931de77dc276cbffcfa9ab06,\n            0x3f0074f27a70de9b87b38923c5d26f,\n            0x315d3964500ad7da70267bebb13aed,\n            0xee04558c06aced97c3375cb93ae624,\n            0xcaf9c90ec5317baf27dabd3f3a6018,\n            0x453a832dd0cf10c2e7669123ffdabe,\n            0xc6c46372e3eda40f2582e2e9902867,\n            0xcdb6b9ecb85a01524cbe4cee82a2c2,\n            0xbbaa5920d526e092f29b41b1c629e1,\n            0x1453,\n        ],\n    );\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0x2e3f7f3a3b7d89cbf680adcee4f039,\n            0xcca286445a216e1c110416099710f3,\n            0x0684d04d7773fbff2223360e314f47,\n            0x1342e7d3f7cadd18ba5f0ed57b1e54,\n            0xe5347fc80630780900cffe3d20cb7d,\n            0xda578cadd719f2a38f505d54c46203,\n            0x4a729fdd97383a0e32b5e8f671c833,\n            0x810ea2ce9ace9bd072bd3b221c9b62,\n            0xc565d6bff72c8501a729ecab2aee3b,\n            0xe042b627c4e6b4cc6ab4ca0ababaaa,\n            0x8e707750c71a4f9f0b9d9389b61826,\n            0x850297f956c58dafb6bf4f7bb049fa,\n            0x32c51e7454edae060725c509d9a48c,\n            0xbe2f1df6227e67dc61e6ab82bc501f,\n            0xea17c90cc7053bbb94ddfac6b1a405,\n            0x6c6eaada9c24dfa1a476c3718f6735,\n            0x0134b376c64ba2a79a086061573792,\n            0x22,\n        ],\n    };\n\n    assert(verify_sha256_pss(hash, signature, 2048));\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/jp4g/noir_rsa_pss/feat/nargo-1.0.0/lib/src/rsa.nr"
    },
    "158": {
      "source": "use crate::tests::test_inputs::PartialHash::DATA;\nuse std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L23\n// Convert 64-byte array to array of 16 u32s\npub fn msg_u8_to_u32(msg: [u8; BLOCK_SIZE]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L38\nunconstrained fn build_msg_block_iter<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> ([u8; BLOCK_SIZE], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L59\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32,\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE: u32 = 64;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L86-L116\n/**\n * Partially computes a SHA256 hash of a message but does not finalize\n * @notice can be used for post-partial hashing where client proves part of hash and relies on server to finish\n * \n *\n * @param N: the length of the message to hash.\n *  --- WARNING: N must be divisible by BLOCK_SIZE such that N % BLOCK_SIZE == 0 \n *      otherwise the remaining bytes will not be inputted when computing the initial hash\n * @param msg: the preimage to begin hashing\n * @return the intermediate hash state\n */\npub fn partial_sha256_var_start<let N: u32>(msg: [u8; N]) -> [u32; 8] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe { build_msg_block_iter(msg, N, msg_start) };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n/**\n * Given some state of a partially computed sha256 hash and part of the preimage, continue hashing\n * @notice used for complex/ recursive offloading of post-partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the preimage to hash\n * @param message_size - the actual length of the preimage to hash\n * @return the intermediate hash state after compressing in msg to h\n */\npub fn partial_sha256_var_interstitial<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u32,\n) -> [u32; 8] {\n    assert(message_size % BLOCK_SIZE == 0, \"Message size must be a multiple of the block size\");\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe { build_msg_block_iter(msg, N, msg_start) };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) & (msg_start < message_size) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L85\n/**\n * Given some state of a partially computed sha256 hash and remaining preimage, complete the hash\n * @notice used for traditional partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the remaining preimage to hash\n * @param message_size - the size of the remaining preimage\n * @param real_message_size -= the total size of the preimage\n * @return finalized sha256 hash\n */\npub fn partial_sha256_var_end<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u64,\n    real_message_size: u64,\n) -> [u8; 32] {\n    let message_size = message_size as u32; // noir stdlib uses u64\n    let real_message_size = real_message_size as u32; // noir stdlib uses u64\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block_iter(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block_iter(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, real_message_size) };\n\n    if !is_unconstrained() {\n        for i in 0..56 {\n            if i < msg_byte_ptr {\n                assert_eq(msg_block[i], last_block[i]);\n            } else {\n                assert_eq(msg_block[i], zero);\n            }\n        }\n\n        let len = 8 * real_message_size;\n        let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n        for i in 56..64 {\n            assert_eq(msg_block[i], len_bytes[i - 56]);\n        }\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32,\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32,\n    message_size: u32,\n) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\n#[test]\nfn test_partial_hash() {\n    let mut data0 = [0; 128];\n    for i in 0..data0.len() {\n        data0[i] = DATA[i];\n    }\n    let mut data1 = [0; 64];\n    for i in 0..data1.len() {\n        data1[i] = DATA[data0.len() + i];\n    }\n    let state = partial_sha256_var_start(data0);\n    let hash = partial_sha256_var_end(state, data1, data1.len() as u64, DATA.len() as u64);\n    let correct_hash = std::hash::sha256_var(DATA, DATA.len() as u64);\n    assert_eq(hash, correct_hash);\n}\n\n#[test]\nfn test_partial_hash_interstitial() {\n    let mut data0 = [0; 64];\n    let mut data1 = [0; 64];\n    let mut data2 = [0; 64];\n    for i in 0..data0.len() {\n        data0[i] = DATA[i];\n        data1[i] = DATA[64 + i];\n        data2[i] = DATA[128 + i];\n    }\n    let pre_hash = partial_sha256_var_start(data0);\n    let interstitial_hash = partial_sha256_var_interstitial(pre_hash, data1, data1.len());\n    let hash = partial_sha256_var_end(\n        interstitial_hash,\n        data2,\n        data2.len() as u64,\n        DATA.len() as u64,\n    );\n    let correct_hash = std::hash::sha256_var(DATA, DATA.len() as u64);\n    assert_eq(hash, correct_hash);\n}\n\n#[test]\nfn test_partial_hash_interstitial_var() {\n    let mut data0 = [0; 64];\n    let mut data1 = [0; 128]; // second block not used\n    let mut data2 = [0; 64];\n    for i in 0..data0.len() {\n        data0[i] = DATA[i];\n        data1[i] = DATA[64 + i];\n        data2[i] = DATA[128 + i];\n    }\n    let pre_hash = partial_sha256_var_start(data0);\n    let interstitial_hash = partial_sha256_var_interstitial(pre_hash, data1, 64);\n    let hash = partial_sha256_var_end(\n        interstitial_hash,\n        data2,\n        data2.len() as u64,\n        DATA.len() as u64,\n    );\n    let correct_hash = std::hash::sha256_var(DATA, DATA.len() as u64);\n    assert_eq(hash, correct_hash);\n}\n",
      "path": "/Users/ianbrighton/nargo/github.com/zkemail/zkemail.nr/v0.4.1/lib/src/partial_hash.nr"
    }
  },
  "names": ["main"],
  "brillig_names": [
    "split_60_bits",
    "build_msg_block_iter",
    "pad_msg_block",
    "attach_len_to_msg_block",
    "__mul",
    "__compute_quadratic_expression_with_borrow_flags",
    "build_msg_block",
    "attach_len_to_msg_block",
    "build_msg_block",
    "__build_transcript",
    "__from_field",
    "__capture_missing_tokens",
    "__get_validity_flags",
    "__from_field",
    "__from_field",
    "__from_field",
    "__check_entry_ptr_bounds",
    "__from_field",
    "__from_field",
    "__from_field",
    "__divmod",
    "__slice_field",
    "decompose",
    "__slice_200_bits_from_field",
    "quicksort",
    "__get_shuffle_indices",
    "__get_index",
    "__extract_entry_type_id_and_parent_index_from_field",
    "get_lt_predicate_f",
    "__find_root_entry",
    "__from_field",
    "search_for_key_in_map",
    "find_key_in_map",
    "to_u8",
    "directive_integer_quotient",
    "directive_invert",
    "directive_to_radix"
  ]
}
